
Challenge 2. Stopwatch_Time display on 7Segment_controlled by buttons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004254  08004254  00005254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800426c  0800426c  000060c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800426c  0800426c  0000526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004274  08004274  000060c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004274  08004274  00005274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004278  08004278  00005278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  0800427c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000060c4  2**0
                  CONTENTS
 10 .bss          000000b8  200000c4  200000c4  000060c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000017c  2000017c  000060c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000060c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec8f  00000000  00000000  000060f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000257d  00000000  00000000  00014d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00017300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad0  00000000  00000000  000180f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212e2  00000000  00000000  00018bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ee9  00000000  00000000  00039eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8845  00000000  00000000  0004ad93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001135d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003960  00000000  00000000  0011361c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009c  00000000  00000000  00116f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c4 	.word	0x200000c4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800423c 	.word	0x0800423c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c8 	.word	0x200000c8
 80001c4:	0800423c 	.word	0x0800423c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fba1 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f845 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f939 	bl	800073c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004ca:	f000 f90d 	bl	80006e8 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80004ce:	f000 f8d5 	bl	800067c <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004d2:	f000 f8a7 	bl	8000624 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80004d6:	481d      	ldr	r0, [pc, #116]	@ (800054c <main+0x94>)
 80004d8:	f001 fc78 	bl	8001dcc <HAL_TIM_Base_Start_IT>
  _7SEG_GPIO_Init();
 80004dc:	f002 feae 	bl	800323c <_7SEG_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Button* button_1 = GET_INSTANCE(button_1);
 80004e0:	f003 fba6 	bl	8003c30 <get_button_1>
 80004e4:	6278      	str	r0, [r7, #36]	@ 0x24
  Button* button_2 = GET_INSTANCE(button_2);
 80004e6:	f003 fbad 	bl	8003c44 <get_button_2>
 80004ea:	6238      	str	r0, [r7, #32]
  Button* button_3 = GET_INSTANCE(button_3);
 80004ec:	f003 fbb4 	bl	8003c58 <get_button_3>
 80004f0:	61f8      	str	r0, [r7, #28]
  Button* button_4 = GET_INSTANCE(button_4);
 80004f2:	f003 fbbb 	bl	8003c6c <get_button_4>
 80004f6:	61b8      	str	r0, [r7, #24]

  Led* left_red   = GET_INSTANCE(left_red);
 80004f8:	f003 fc72 	bl	8003de0 <get_left_red>
 80004fc:	6178      	str	r0, [r7, #20]
  Led* left_green = GET_INSTANCE(left_green);
 80004fe:	f003 fc79 	bl	8003df4 <get_left_green>
 8000502:	6138      	str	r0, [r7, #16]
  Led* left_blue  = GET_INSTANCE(left_blue);
 8000504:	f003 fc80 	bl	8003e08 <get_left_blue>
 8000508:	60f8      	str	r0, [r7, #12]
  Led* right_red  = GET_INSTANCE(right_red);
 800050a:	f003 fc87 	bl	8003e1c <get_right_red>
 800050e:	60b8      	str	r0, [r7, #8]

  SevenSegment* segment = GET_INSTANCE(segment);
 8000510:	f003 fd92 	bl	8004038 <get_segment>
 8000514:	6078      	str	r0, [r7, #4]

  while (1)
  {
	  left_red->operate(left_red, button_1);
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800051c:	6978      	ldr	r0, [r7, #20]
 800051e:	4798      	blx	r3
	  left_green->operate(left_green, button_2);
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	6a39      	ldr	r1, [r7, #32]
 8000526:	6938      	ldr	r0, [r7, #16]
 8000528:	4798      	blx	r3
	  left_blue->operate(left_blue, button_3);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	69f9      	ldr	r1, [r7, #28]
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	4798      	blx	r3
	  right_red->operate(right_red, button_4);
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	69b9      	ldr	r1, [r7, #24]
 800053a:	68b8      	ldr	r0, [r7, #8]
 800053c:	4798      	blx	r3

	  segment->operate(segment);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	4798      	blx	r3
	  left_red->operate(left_red, button_1);
 8000546:	bf00      	nop
 8000548:	e7e5      	b.n	8000516 <main+0x5e>
 800054a:	bf00      	nop
 800054c:	200000e0 	.word	0x200000e0

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	@ 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	@ 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 fe40 	bl	80041e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b28      	ldr	r3, [pc, #160]	@ (800061c <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800057c:	4a27      	ldr	r2, [pc, #156]	@ (800061c <SystemClock_Config+0xcc>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	@ 0x40
 8000584:	4b25      	ldr	r3, [pc, #148]	@ (800061c <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a21      	ldr	r2, [pc, #132]	@ (8000620 <SystemClock_Config+0xd0>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c4:	23a8      	movs	r3, #168	@ 0xa8
 80005c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 ff11 	bl	80013fc <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 f9dd 	bl	800099e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2105      	movs	r1, #5
 8000602:	4618      	mov	r0, r3
 8000604:	f001 f972 	bl	80018ec <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800060e:	f000 f9c6 	bl	800099e <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	@ 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2036      	movs	r0, #54	@ 0x36
 800062e:	f000 fc36 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000632:	2036      	movs	r0, #54	@ 0x36
 8000634:	f000 fc4f 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	2027      	movs	r0, #39	@ 0x27
 800063e:	f000 fc2e 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000642:	2027      	movs	r0, #39	@ 0x27
 8000644:	f000 fc47 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2100      	movs	r1, #0
 800064c:	2009      	movs	r0, #9
 800064e:	f000 fc26 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000652:	2009      	movs	r0, #9
 8000654:	f000 fc3f 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	200a      	movs	r0, #10
 800065e:	f000 fc1e 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000662:	200a      	movs	r0, #10
 8000664:	f000 fc37 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2028      	movs	r0, #40	@ 0x28
 800066e:	f000 fc16 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000672:	2028      	movs	r0, #40	@ 0x28
 8000674:	f000 fc2f 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800068a:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <MX_TIM6_Init+0x64>)
 800068c:	4a15      	ldr	r2, [pc, #84]	@ (80006e4 <MX_TIM6_Init+0x68>)
 800068e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000 - 1;
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <MX_TIM6_Init+0x64>)
 8000692:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000696:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_TIM6_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 840 - 1;
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <MX_TIM6_Init+0x64>)
 80006a0:	f240 3247 	movw	r2, #839	@ 0x347
 80006a4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <MX_TIM6_Init+0x64>)
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006ac:	480c      	ldr	r0, [pc, #48]	@ (80006e0 <MX_TIM6_Init+0x64>)
 80006ae:	f001 fb3d 	bl	8001d2c <HAL_TIM_Base_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006b8:	f000 f971 	bl	800099e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006bc:	2300      	movs	r3, #0
 80006be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_TIM6_Init+0x64>)
 80006ca:	f001 fdb3 	bl	8002234 <HAL_TIMEx_MasterConfigSynchronization>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80006d4:	f000 f963 	bl	800099e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200000e0 	.word	0x200000e0
 80006e4:	40001000 	.word	0x40001000

080006e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <MX_USART3_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 8000720:	f001 fe18 	bl	8002354 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800072a:	f000 f938 	bl	800099e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000128 	.word	0x20000128
 8000738:	40004800 	.word	0x40004800

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	@ 0x30
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	4b5d      	ldr	r3, [pc, #372]	@ (80008cc <MX_GPIO_Init+0x190>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a5c      	ldr	r2, [pc, #368]	@ (80008cc <MX_GPIO_Init+0x190>)
 800075c:	f043 0310 	orr.w	r3, r3, #16
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b5a      	ldr	r3, [pc, #360]	@ (80008cc <MX_GPIO_Init+0x190>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0310 	and.w	r3, r3, #16
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	4b56      	ldr	r3, [pc, #344]	@ (80008cc <MX_GPIO_Init+0x190>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a55      	ldr	r2, [pc, #340]	@ (80008cc <MX_GPIO_Init+0x190>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b53      	ldr	r3, [pc, #332]	@ (80008cc <MX_GPIO_Init+0x190>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b4f      	ldr	r3, [pc, #316]	@ (80008cc <MX_GPIO_Init+0x190>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a4e      	ldr	r2, [pc, #312]	@ (80008cc <MX_GPIO_Init+0x190>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b4c      	ldr	r3, [pc, #304]	@ (80008cc <MX_GPIO_Init+0x190>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b48      	ldr	r3, [pc, #288]	@ (80008cc <MX_GPIO_Init+0x190>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a47      	ldr	r2, [pc, #284]	@ (80008cc <MX_GPIO_Init+0x190>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b45      	ldr	r3, [pc, #276]	@ (80008cc <MX_GPIO_Init+0x190>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b41      	ldr	r3, [pc, #260]	@ (80008cc <MX_GPIO_Init+0x190>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a40      	ldr	r2, [pc, #256]	@ (80008cc <MX_GPIO_Init+0x190>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b3e      	ldr	r3, [pc, #248]	@ (80008cc <MX_GPIO_Init+0x190>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b3a      	ldr	r3, [pc, #232]	@ (80008cc <MX_GPIO_Init+0x190>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a39      	ldr	r2, [pc, #228]	@ (80008cc <MX_GPIO_Init+0x190>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b37      	ldr	r3, [pc, #220]	@ (80008cc <MX_GPIO_Init+0x190>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RIGHT_BLUE_Pin|RIGHT_GREEN_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2121      	movs	r1, #33	@ 0x21
 80007fe:	4834      	ldr	r0, [pc, #208]	@ (80008d0 <MX_GPIO_Init+0x194>)
 8000800:	f000 fdca 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEFT_RED_Pin|LEFT_GREEN_Pin|LEFT_BLUE_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800080a:	4832      	ldr	r0, [pc, #200]	@ (80008d4 <MX_GPIO_Init+0x198>)
 800080c:	f000 fdc4 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RIGHT_RED_GPIO_Port, RIGHT_RED_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2140      	movs	r1, #64	@ 0x40
 8000814:	4830      	ldr	r0, [pc, #192]	@ (80008d8 <MX_GPIO_Init+0x19c>)
 8000816:	f000 fdbf 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 800081a:	2308      	movs	r3, #8
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800081e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	482b      	ldr	r0, [pc, #172]	@ (80008dc <MX_GPIO_Init+0x1a0>)
 8000830:	f000 fbfe 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin;
 8000834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800083a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_2_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4823      	ldr	r0, [pc, #140]	@ (80008d8 <MX_GPIO_Init+0x19c>)
 800084c:	f000 fbf0 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_BLUE_Pin RIGHT_GREEN_Pin */
  GPIO_InitStruct.Pin = RIGHT_BLUE_Pin|RIGHT_GREEN_Pin;
 8000850:	2321      	movs	r3, #33	@ 0x21
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000858:	2301      	movs	r3, #1
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085c:	2302      	movs	r3, #2
 800085e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	481a      	ldr	r0, [pc, #104]	@ (80008d0 <MX_GPIO_Init+0x194>)
 8000868:	f000 fbe2 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_3_Pin;
 800086c:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000872:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4814      	ldr	r0, [pc, #80]	@ (80008d4 <MX_GPIO_Init+0x198>)
 8000884:	f000 fbd4 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_RED_Pin LEFT_GREEN_Pin LEFT_BLUE_Pin */
  GPIO_InitStruct.Pin = LEFT_RED_Pin|LEFT_GREEN_Pin|LEFT_BLUE_Pin;
 8000888:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000892:	2301      	movs	r3, #1
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000896:	2302      	movs	r3, #2
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <MX_GPIO_Init+0x198>)
 80008a2:	f000 fbc5 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_RED_Pin */
  GPIO_InitStruct.Pin = RIGHT_RED_Pin;
 80008a6:	2340      	movs	r3, #64	@ 0x40
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b2:	2302      	movs	r3, #2
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <MX_GPIO_Init+0x19c>)
 80008be:	f000 fbb7 	bl	8001030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c2:	bf00      	nop
 80008c4:	3730      	adds	r7, #48	@ 0x30
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40020c00 	.word	0x40020c00
 80008d8:	40020800 	.word	0x40020800
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	Uart* uart = GET_INSTANCE(uart);
 80008e8:	f003 fc72 	bl	80041d0 <get_uart>
 80008ec:	60f8      	str	r0, [r7, #12]

	if (huart->Instance == USART3)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a05      	ldr	r2, [pc, #20]	@ (8000908 <HAL_UART_RxCpltCallback+0x28>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d103      	bne.n	8000900 <HAL_UART_RxCpltCallback+0x20>
	{
		uart->receive(uart);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	4798      	blx	r3
	}
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40004800 	.word	0x40004800

0800090c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	Timer* timer = GET_INSTANCE(timer);
 8000914:	f003 fc26 	bl	8004164 <get_timer>
 8000918:	60f8      	str	r0, [r7, #12]

	if (htim->Instance == TIM6)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d103      	bne.n	800092c <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		timer->count_up(timer);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	4798      	blx	r3
	}
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40001000 	.word	0x40001000

08000938 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	80fb      	strh	r3, [r7, #6]
	Button* button_1 = GET_INSTANCE(button_1);
 8000942:	f003 f975 	bl	8003c30 <get_button_1>
 8000946:	6178      	str	r0, [r7, #20]
	Button* button_2 = GET_INSTANCE(button_2);
 8000948:	f003 f97c 	bl	8003c44 <get_button_2>
 800094c:	6138      	str	r0, [r7, #16]
	Button* button_3 = GET_INSTANCE(button_3);
 800094e:	f003 f983 	bl	8003c58 <get_button_3>
 8000952:	60f8      	str	r0, [r7, #12]
	Button* button_4 = GET_INSTANCE(button_4);
 8000954:	f003 f98a 	bl	8003c6c <get_button_4>
 8000958:	60b8      	str	r0, [r7, #8]

	if (GPIO_Pin == BUTTON_1_Pin) button_1->update(button_1);
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	2b08      	cmp	r3, #8
 800095e:	d103      	bne.n	8000968 <HAL_GPIO_EXTI_Callback+0x30>
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	6978      	ldr	r0, [r7, #20]
 8000966:	4798      	blx	r3
	if (GPIO_Pin == BUTTON_2_Pin) button_2->update(button_2);
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800096e:	d103      	bne.n	8000978 <HAL_GPIO_EXTI_Callback+0x40>
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	6938      	ldr	r0, [r7, #16]
 8000976:	4798      	blx	r3
	if (GPIO_Pin == BUTTON_3_Pin) button_3->update(button_3);
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	2b10      	cmp	r3, #16
 800097c:	d103      	bne.n	8000986 <HAL_GPIO_EXTI_Callback+0x4e>
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	4798      	blx	r3
	if (GPIO_Pin == BUTTON_4_Pin) button_4->update(button_4);
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800098c:	d103      	bne.n	8000996 <HAL_GPIO_EXTI_Callback+0x5e>
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	68b8      	ldr	r0, [r7, #8]
 8000994:	4798      	blx	r3
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a2:	b672      	cpsid	i
}
 80009a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a6:	bf00      	nop
 80009a8:	e7fd      	b.n	80009a6 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0b      	ldr	r2, [pc, #44]	@ (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d10d      	bne.n	8000a2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <HAL_TIM_Base_MspInit+0x40>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a09      	ldr	r2, [pc, #36]	@ (8000a3c <HAL_TIM_Base_MspInit+0x40>)
 8000a18:	f043 0310 	orr.w	r3, r3, #16
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <HAL_TIM_Base_MspInit+0x40>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40001000 	.word	0x40001000
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ac4 <HAL_UART_MspInit+0x84>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12c      	bne.n	8000abc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a10      	ldr	r2, [pc, #64]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aac:	2307      	movs	r3, #7
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <HAL_UART_MspInit+0x8c>)
 8000ab8:	f000 faba 	bl	8001030 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	@ 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40004800 	.word	0x40004800
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020c00 	.word	0x40020c00

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 f8bf 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8000b32:	2008      	movs	r0, #8
 8000b34:	f000 fc4a 	bl	80013cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_3_Pin);
 8000b40:	2010      	movs	r0, #16
 8000b42:	f000 fc43 	bl	80013cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <USART3_IRQHandler+0x10>)
 8000b52:	f001 fc75 	bl	8002440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000128 	.word	0x20000128

08000b60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_4_Pin);
 8000b64:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000b68:	f000 fc30 	bl	80013cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8000b6c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000b70:	f000 fc2c 	bl	80013cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <TIM6_DAC_IRQHandler+0x10>)
 8000b7e:	f001 f995 	bl	8001eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000e0 	.word	0x200000e0

08000b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	@ (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bb4:	f7ff ffea 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	@ (8000bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f003 fb09 	bl	80041f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fc69 	bl	80004b8 <main>
  bx  lr    
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8000bf4:	0800427c 	.word	0x0800427c
  ldr r2, =_sbss
 8000bf8:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8000bfc:	2000017c 	.word	0x2000017c

08000c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c08:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <HAL_Init+0x40>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <HAL_Init+0x40>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	@ (8000c44 <HAL_Init+0x40>)
 8000c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f92b 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	200f      	movs	r0, #15
 8000c34:	f000 f808 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff feb8 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023c00 	.word	0x40023c00

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f943 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f90b 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	@ (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000170 	.word	0x20000170

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000170 	.word	0x20000170

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	@ (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	@ (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff29 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb0:	f7ff ff3e 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff ff8e 	bl	8000ddc <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5d 	bl	8000d88 <__NVIC_SetPriority>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff31 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffa2 	bl	8000e44 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff feda 	bl	8000cd0 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d008      	beq.n	8000f3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2280      	movs	r2, #128	@ 0x80
 8000f2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e052      	b.n	8000fe2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0216 	bic.w	r2, r2, #22
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d103      	bne.n	8000f6c <HAL_DMA_Abort+0x62>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0208 	bic.w	r2, r2, #8
 8000f7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0201 	bic.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f8c:	e013      	b.n	8000fb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f8e:	f7ff fe9f 	bl	8000cd0 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d90c      	bls.n	8000fb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e015      	b.n	8000fe2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1e4      	bne.n	8000f8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fc8:	223f      	movs	r2, #63	@ 0x3f
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d004      	beq.n	8001008 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2280      	movs	r2, #128	@ 0x80
 8001002:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e00c      	b.n	8001022 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2205      	movs	r2, #5
 800100c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0201 	bic.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e16b      	b.n	8001324 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 815a 	bne.w	800131e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80b4 	beq.w	800131e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b60      	ldr	r3, [pc, #384]	@ (800133c <HAL_GPIO_Init+0x30c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	4a5f      	ldr	r2, [pc, #380]	@ (800133c <HAL_GPIO_Init+0x30c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c6:	4b5d      	ldr	r3, [pc, #372]	@ (800133c <HAL_GPIO_Init+0x30c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001340 <HAL_GPIO_Init+0x310>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a52      	ldr	r2, [pc, #328]	@ (8001344 <HAL_GPIO_Init+0x314>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d02b      	beq.n	8001256 <HAL_GPIO_Init+0x226>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a51      	ldr	r2, [pc, #324]	@ (8001348 <HAL_GPIO_Init+0x318>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d025      	beq.n	8001252 <HAL_GPIO_Init+0x222>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a50      	ldr	r2, [pc, #320]	@ (800134c <HAL_GPIO_Init+0x31c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d01f      	beq.n	800124e <HAL_GPIO_Init+0x21e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4f      	ldr	r2, [pc, #316]	@ (8001350 <HAL_GPIO_Init+0x320>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x21a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4e      	ldr	r2, [pc, #312]	@ (8001354 <HAL_GPIO_Init+0x324>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x216>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4d      	ldr	r2, [pc, #308]	@ (8001358 <HAL_GPIO_Init+0x328>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x212>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4c      	ldr	r2, [pc, #304]	@ (800135c <HAL_GPIO_Init+0x32c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x20e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4b      	ldr	r2, [pc, #300]	@ (8001360 <HAL_GPIO_Init+0x330>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x20a>
 8001236:	2307      	movs	r3, #7
 8001238:	e00e      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800123a:	2308      	movs	r3, #8
 800123c:	e00c      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800123e:	2306      	movs	r3, #6
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001256:	2300      	movs	r3, #0
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	@ (8001340 <HAL_GPIO_Init+0x310>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001276:	4b3b      	ldr	r3, [pc, #236]	@ (8001364 <HAL_GPIO_Init+0x334>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129a:	4a32      	ldr	r2, [pc, #200]	@ (8001364 <HAL_GPIO_Init+0x334>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a0:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <HAL_GPIO_Init+0x334>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c4:	4a27      	ldr	r2, [pc, #156]	@ (8001364 <HAL_GPIO_Init+0x334>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ca:	4b26      	ldr	r3, [pc, #152]	@ (8001364 <HAL_GPIO_Init+0x334>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001364 <HAL_GPIO_Init+0x334>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <HAL_GPIO_Init+0x334>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001318:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <HAL_GPIO_Init+0x334>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3301      	adds	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	f67f ae90 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3724      	adds	r7, #36	@ 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40013800 	.word	0x40013800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40021000 	.word	0x40021000
 8001358:	40021400 	.word	0x40021400
 800135c:	40021800 	.word	0x40021800
 8001360:	40021c00 	.word	0x40021c00
 8001364:	40013c00 	.word	0x40013c00

08001368 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	4013      	ands	r3, r2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e001      	b.n	800138a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	041a      	lsls	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff faa4 	bl	8000938 <HAL_GPIO_EXTI_Callback>
  }
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40013c00 	.word	0x40013c00

080013fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e267      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d075      	beq.n	8001506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800141a:	4b88      	ldr	r3, [pc, #544]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b04      	cmp	r3, #4
 8001424:	d00c      	beq.n	8001440 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001426:	4b85      	ldr	r3, [pc, #532]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800142e:	2b08      	cmp	r3, #8
 8001430:	d112      	bne.n	8001458 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001432:	4b82      	ldr	r3, [pc, #520]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800143a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800143e:	d10b      	bne.n	8001458 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	4b7e      	ldr	r3, [pc, #504]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d05b      	beq.n	8001504 <HAL_RCC_OscConfig+0x108>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d157      	bne.n	8001504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e242      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001460:	d106      	bne.n	8001470 <HAL_RCC_OscConfig+0x74>
 8001462:	4b76      	ldr	r3, [pc, #472]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a75      	ldr	r2, [pc, #468]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e01d      	b.n	80014ac <HAL_RCC_OscConfig+0xb0>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x98>
 800147a:	4b70      	ldr	r3, [pc, #448]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6f      	ldr	r2, [pc, #444]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b6d      	ldr	r3, [pc, #436]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a6c      	ldr	r2, [pc, #432]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e00b      	b.n	80014ac <HAL_RCC_OscConfig+0xb0>
 8001494:	4b69      	ldr	r3, [pc, #420]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a68      	ldr	r2, [pc, #416]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800149a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b66      	ldr	r3, [pc, #408]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a65      	ldr	r2, [pc, #404]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc0c 	bl	8000cd0 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fc08 	bl	8000cd0 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	@ 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e207      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b5b      	ldr	r3, [pc, #364]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0xc0>
 80014da:	e014      	b.n	8001506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fbf8 	bl	8000cd0 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fbf4 	bl	8000cd0 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	@ 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e1f3      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f6:	4b51      	ldr	r3, [pc, #324]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0xe8>
 8001502:	e000      	b.n	8001506 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d063      	beq.n	80015da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001512:	4b4a      	ldr	r3, [pc, #296]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151e:	4b47      	ldr	r3, [pc, #284]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001526:	2b08      	cmp	r3, #8
 8001528:	d11c      	bne.n	8001564 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152a:	4b44      	ldr	r3, [pc, #272]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d116      	bne.n	8001564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	4b41      	ldr	r3, [pc, #260]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_RCC_OscConfig+0x152>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e1c7      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4b3b      	ldr	r3, [pc, #236]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4937      	ldr	r1, [pc, #220]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	e03a      	b.n	80015da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d020      	beq.n	80015ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156c:	4b34      	ldr	r3, [pc, #208]	@ (8001640 <HAL_RCC_OscConfig+0x244>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff fbad 	bl	8000cd0 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff fba9 	bl	8000cd0 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e1a8      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b28      	ldr	r3, [pc, #160]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4925      	ldr	r1, [pc, #148]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	600b      	str	r3, [r1, #0]
 80015ac:	e015      	b.n	80015da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ae:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <HAL_RCC_OscConfig+0x244>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb8c 	bl	8000cd0 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015bc:	f7ff fb88 	bl	8000cd0 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e187      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ce:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d036      	beq.n	8001654 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d016      	beq.n	800161c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_RCC_OscConfig+0x248>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff fb6c 	bl	8000cd0 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fc:	f7ff fb68 	bl	8000cd0 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e167      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x200>
 800161a:	e01b      	b.n	8001654 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_RCC_OscConfig+0x248>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff fb55 	bl	8000cd0 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	e00e      	b.n	8001648 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff fb51 	bl	8000cd0 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d907      	bls.n	8001648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e150      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
 800163c:	40023800 	.word	0x40023800
 8001640:	42470000 	.word	0x42470000
 8001644:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	4b88      	ldr	r3, [pc, #544]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800164a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1ea      	bne.n	800162a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 8097 	beq.w	8001790 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001666:	4b81      	ldr	r3, [pc, #516]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10f      	bne.n	8001692 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b7d      	ldr	r3, [pc, #500]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	4a7c      	ldr	r2, [pc, #496]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	@ 0x40
 8001682:	4b7a      	ldr	r3, [pc, #488]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	4b77      	ldr	r3, [pc, #476]	@ (8001870 <HAL_RCC_OscConfig+0x474>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d118      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169e:	4b74      	ldr	r3, [pc, #464]	@ (8001870 <HAL_RCC_OscConfig+0x474>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a73      	ldr	r2, [pc, #460]	@ (8001870 <HAL_RCC_OscConfig+0x474>)
 80016a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb11 	bl	8000cd0 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b2:	f7ff fb0d 	bl	8000cd0 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e10c      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001870 <HAL_RCC_OscConfig+0x474>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x2ea>
 80016d8:	4b64      	ldr	r3, [pc, #400]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016dc:	4a63      	ldr	r2, [pc, #396]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e4:	e01c      	b.n	8001720 <HAL_RCC_OscConfig+0x324>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x30c>
 80016ee:	4b5f      	ldr	r3, [pc, #380]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f2:	4a5e      	ldr	r2, [pc, #376]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016fa:	4b5c      	ldr	r3, [pc, #368]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fe:	4a5b      	ldr	r2, [pc, #364]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6713      	str	r3, [r2, #112]	@ 0x70
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0x324>
 8001708:	4b58      	ldr	r3, [pc, #352]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170c:	4a57      	ldr	r2, [pc, #348]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	@ 0x70
 8001714:	4b55      	ldr	r3, [pc, #340]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001718:	4a54      	ldr	r2, [pc, #336]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800171a:	f023 0304 	bic.w	r3, r3, #4
 800171e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d015      	beq.n	8001754 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fad2 	bl	8000cd0 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff face 	bl	8000cd0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e0cb      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001746:	4b49      	ldr	r3, [pc, #292]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0ee      	beq.n	8001730 <HAL_RCC_OscConfig+0x334>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff fabc 	bl	8000cd0 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175a:	e00a      	b.n	8001772 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7ff fab8 	bl	8000cd0 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0b5      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001772:	4b3e      	ldr	r3, [pc, #248]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ee      	bne.n	800175c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001784:	4b39      	ldr	r3, [pc, #228]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	4a38      	ldr	r2, [pc, #224]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800178a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800178e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80a1 	beq.w	80018dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800179a:	4b34      	ldr	r3, [pc, #208]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d05c      	beq.n	8001860 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d141      	bne.n	8001832 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ae:	4b31      	ldr	r3, [pc, #196]	@ (8001874 <HAL_RCC_OscConfig+0x478>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fa8c 	bl	8000cd0 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff fa88 	bl	8000cd0 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e087      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ce:	4b27      	ldr	r3, [pc, #156]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	019b      	lsls	r3, r3, #6
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	3b01      	subs	r3, #1
 80017f4:	041b      	lsls	r3, r3, #16
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	491b      	ldr	r1, [pc, #108]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_RCC_OscConfig+0x478>)
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180a:	f7ff fa61 	bl	8000cd0 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001812:	f7ff fa5d 	bl	8000cd0 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e05c      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001824:	4b11      	ldr	r3, [pc, #68]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x416>
 8001830:	e054      	b.n	80018dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <HAL_RCC_OscConfig+0x478>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fa4a 	bl	8000cd0 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff fa46 	bl	8000cd0 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e045      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x444>
 800185e:	e03d      	b.n	80018dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d107      	bne.n	8001878 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e038      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000
 8001874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_RCC_OscConfig+0x4ec>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d028      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d121      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d11a      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018a8:	4013      	ands	r3, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d111      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018be:	085b      	lsrs	r3, r3, #1
 80018c0:	3b01      	subs	r3, #1
 80018c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d107      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0cc      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001900:	4b68      	ldr	r3, [pc, #416]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d90c      	bls.n	8001928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b65      	ldr	r3, [pc, #404]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b63      	ldr	r3, [pc, #396]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0b8      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001940:	4b59      	ldr	r3, [pc, #356]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4a58      	ldr	r2, [pc, #352]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800194a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001958:	4b53      	ldr	r3, [pc, #332]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4a52      	ldr	r2, [pc, #328]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001964:	4b50      	ldr	r3, [pc, #320]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	494d      	ldr	r1, [pc, #308]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d044      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b47      	ldr	r3, [pc, #284]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d119      	bne.n	80019ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e07f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019aa:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e06f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ba:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e067      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ca:	4b37      	ldr	r3, [pc, #220]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f023 0203 	bic.w	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4934      	ldr	r1, [pc, #208]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019dc:	f7ff f978 	bl	8000cd0 <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e4:	f7ff f974 	bl	8000cd0 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e04f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 020c 	and.w	r2, r3, #12
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d1eb      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d20c      	bcs.n	8001a34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e032      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4916      	ldr	r1, [pc, #88]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	490e      	ldr	r1, [pc, #56]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a72:	f000 f821 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a76:	4602      	mov	r2, r0
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	490a      	ldr	r1, [pc, #40]	@ (8001aac <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	5ccb      	ldrb	r3, [r1, r3]
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	4a09      	ldr	r2, [pc, #36]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f8d8 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	08004254 	.word	0x08004254
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001abc:	b094      	sub	sp, #80	@ 0x50
 8001abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad0:	4b79      	ldr	r3, [pc, #484]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d00d      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x40>
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	f200 80e1 	bhi.w	8001ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x34>
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d003      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aea:	e0db      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b73      	ldr	r3, [pc, #460]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8001aee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001af0:	e0db      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001af2:	4b73      	ldr	r3, [pc, #460]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001af4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001af6:	e0d8      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af8:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b00:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b02:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d063      	beq.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	2200      	movs	r2, #0
 8001b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	462b      	mov	r3, r5
 8001b2e:	f04f 0000 	mov.w	r0, #0
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	0159      	lsls	r1, r3, #5
 8001b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3c:	0150      	lsls	r0, r2, #5
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4621      	mov	r1, r4
 8001b44:	1a51      	subs	r1, r2, r1
 8001b46:	6139      	str	r1, [r7, #16]
 8001b48:	4629      	mov	r1, r5
 8001b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b5c:	4659      	mov	r1, fp
 8001b5e:	018b      	lsls	r3, r1, #6
 8001b60:	4651      	mov	r1, sl
 8001b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b66:	4651      	mov	r1, sl
 8001b68:	018a      	lsls	r2, r1, #6
 8001b6a:	4651      	mov	r1, sl
 8001b6c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b70:	4659      	mov	r1, fp
 8001b72:	eb63 0901 	sbc.w	r9, r3, r1
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b8a:	4690      	mov	r8, r2
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	4623      	mov	r3, r4
 8001b90:	eb18 0303 	adds.w	r3, r8, r3
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	462b      	mov	r3, r5
 8001b98:	eb49 0303 	adc.w	r3, r9, r3
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001baa:	4629      	mov	r1, r5
 8001bac:	024b      	lsls	r3, r1, #9
 8001bae:	4621      	mov	r1, r4
 8001bb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	024a      	lsls	r2, r1, #9
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bc8:	f7fe fafe 	bl	80001c8 <__aeabi_uldivmod>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bd4:	e058      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd6:	4b38      	ldr	r3, [pc, #224]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	099b      	lsrs	r3, r3, #6
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	4611      	mov	r1, r2
 8001be2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bf0:	4642      	mov	r2, r8
 8001bf2:	464b      	mov	r3, r9
 8001bf4:	f04f 0000 	mov.w	r0, #0
 8001bf8:	f04f 0100 	mov.w	r1, #0
 8001bfc:	0159      	lsls	r1, r3, #5
 8001bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c02:	0150      	lsls	r0, r2, #5
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4641      	mov	r1, r8
 8001c0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c0e:	4649      	mov	r1, r9
 8001c10:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c28:	ebb2 040a 	subs.w	r4, r2, sl
 8001c2c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	00eb      	lsls	r3, r5, #3
 8001c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c3e:	00e2      	lsls	r2, r4, #3
 8001c40:	4614      	mov	r4, r2
 8001c42:	461d      	mov	r5, r3
 8001c44:	4643      	mov	r3, r8
 8001c46:	18e3      	adds	r3, r4, r3
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	464b      	mov	r3, r9
 8001c4c:	eb45 0303 	adc.w	r3, r5, r3
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c5e:	4629      	mov	r1, r5
 8001c60:	028b      	lsls	r3, r1, #10
 8001c62:	4621      	mov	r1, r4
 8001c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c68:	4621      	mov	r1, r4
 8001c6a:	028a      	lsls	r2, r1, #10
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c72:	2200      	movs	r2, #0
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	61fa      	str	r2, [r7, #28]
 8001c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7c:	f7fe faa4 	bl	80001c8 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	0c1b      	lsrs	r3, r3, #16
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	3301      	adds	r3, #1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ca2:	e002      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3750      	adds	r7, #80	@ 0x50
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	00f42400 	.word	0x00f42400
 8001cc0:	007a1200 	.word	0x007a1200

08001cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	@ (8001cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000000 	.word	0x20000000

08001cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ce0:	f7ff fff0 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	0a9b      	lsrs	r3, r3, #10
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4903      	ldr	r1, [pc, #12]	@ (8001d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	08004264 	.word	0x08004264

08001d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d08:	f7ff ffdc 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0b5b      	lsrs	r3, r3, #13
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4903      	ldr	r1, [pc, #12]	@ (8001d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	08004264 	.word	0x08004264

08001d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e041      	b.n	8001dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7fe fe52 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3304      	adds	r3, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f000 f9b6 	bl	80020dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d001      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e04e      	b.n	8001e82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a23      	ldr	r2, [pc, #140]	@ (8001e90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d022      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e0e:	d01d      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1f      	ldr	r2, [pc, #124]	@ (8001e94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d018      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1c      	ldr	r2, [pc, #112]	@ (8001e9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00e      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	@ (8001ea4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d111      	bne.n	8001e70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d010      	beq.n	8001e80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6e:	e007      	b.n	8001e80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40000c00 	.word	0x40000c00
 8001ea0:	40010400 	.word	0x40010400
 8001ea4:	40014000 	.word	0x40014000
 8001ea8:	40001800 	.word	0x40001800

08001eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d020      	beq.n	8001f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01b      	beq.n	8001f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0202 	mvn.w	r2, #2
 8001ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8d2 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8c4 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8d5 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d020      	beq.n	8001f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0204 	mvn.w	r2, #4
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8ac 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f89e 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8af 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d020      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01b      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0208 	mvn.w	r2, #8
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f886 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f878 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f889 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d020      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01b      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0210 	mvn.w	r2, #16
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f860 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f852 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f863 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0201 	mvn.w	r2, #1
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fc7a 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f982 	bl	8002340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00c      	beq.n	8002060 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f834 	bl	80020c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0220 	mvn.w	r2, #32
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f954 	bl	800232c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a46      	ldr	r2, [pc, #280]	@ (8002208 <TIM_Base_SetConfig+0x12c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d013      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020fa:	d00f      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a43      	ldr	r2, [pc, #268]	@ (800220c <TIM_Base_SetConfig+0x130>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00b      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a42      	ldr	r2, [pc, #264]	@ (8002210 <TIM_Base_SetConfig+0x134>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a41      	ldr	r2, [pc, #260]	@ (8002214 <TIM_Base_SetConfig+0x138>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a40      	ldr	r2, [pc, #256]	@ (8002218 <TIM_Base_SetConfig+0x13c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d108      	bne.n	800212e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a35      	ldr	r2, [pc, #212]	@ (8002208 <TIM_Base_SetConfig+0x12c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d02b      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800213c:	d027      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a32      	ldr	r2, [pc, #200]	@ (800220c <TIM_Base_SetConfig+0x130>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d023      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a31      	ldr	r2, [pc, #196]	@ (8002210 <TIM_Base_SetConfig+0x134>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01f      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a30      	ldr	r2, [pc, #192]	@ (8002214 <TIM_Base_SetConfig+0x138>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01b      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <TIM_Base_SetConfig+0x13c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d017      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2e      	ldr	r2, [pc, #184]	@ (800221c <TIM_Base_SetConfig+0x140>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2d      	ldr	r2, [pc, #180]	@ (8002220 <TIM_Base_SetConfig+0x144>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00f      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2c      	ldr	r2, [pc, #176]	@ (8002224 <TIM_Base_SetConfig+0x148>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00b      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2b      	ldr	r2, [pc, #172]	@ (8002228 <TIM_Base_SetConfig+0x14c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2a      	ldr	r2, [pc, #168]	@ (800222c <TIM_Base_SetConfig+0x150>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d003      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a29      	ldr	r2, [pc, #164]	@ (8002230 <TIM_Base_SetConfig+0x154>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d108      	bne.n	80021a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a10      	ldr	r2, [pc, #64]	@ (8002208 <TIM_Base_SetConfig+0x12c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d003      	beq.n	80021d4 <TIM_Base_SetConfig+0xf8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <TIM_Base_SetConfig+0x13c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d103      	bne.n	80021dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d105      	bne.n	80021fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f023 0201 	bic.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]
  }
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40010000 	.word	0x40010000
 800220c:	40000400 	.word	0x40000400
 8002210:	40000800 	.word	0x40000800
 8002214:	40000c00 	.word	0x40000c00
 8002218:	40010400 	.word	0x40010400
 800221c:	40014000 	.word	0x40014000
 8002220:	40014400 	.word	0x40014400
 8002224:	40014800 	.word	0x40014800
 8002228:	40001800 	.word	0x40001800
 800222c:	40001c00 	.word	0x40001c00
 8002230:	40002000 	.word	0x40002000

08002234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002248:	2302      	movs	r3, #2
 800224a:	e05a      	b.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a21      	ldr	r2, [pc, #132]	@ (8002310 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d022      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002298:	d01d      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1d      	ldr	r2, [pc, #116]	@ (8002314 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d018      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002318 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1a      	ldr	r2, [pc, #104]	@ (800231c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00e      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a18      	ldr	r2, [pc, #96]	@ (8002320 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a17      	ldr	r2, [pc, #92]	@ (8002324 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a15      	ldr	r2, [pc, #84]	@ (8002328 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d10c      	bne.n	80022f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40010000 	.word	0x40010000
 8002314:	40000400 	.word	0x40000400
 8002318:	40000800 	.word	0x40000800
 800231c:	40000c00 	.word	0x40000c00
 8002320:	40010400 	.word	0x40010400
 8002324:	40014000 	.word	0x40014000
 8002328:	40001800 	.word	0x40001800

0800232c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e042      	b.n	80023ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fb60 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	@ 0x24
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fcdb 	bl	8002d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	4613      	mov	r3, r2
 8002400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	d112      	bne.n	8002434 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_UART_Receive_IT+0x26>
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e00b      	b.n	8002436 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	461a      	mov	r2, r3
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 faba 	bl	80029a4 <UART_Start_Receive_IT>
 8002430:	4603      	mov	r3, r0
 8002432:	e000      	b.n	8002436 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b0ba      	sub	sp, #232	@ 0xe8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800247e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10f      	bne.n	80024a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_UART_IRQHandler+0x66>
 8002492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fb99 	bl	8002bd6 <UART_Receive_IT>
      return;
 80024a4:	e25b      	b.n	800295e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80de 	beq.w	800266c <HAL_UART_IRQHandler+0x22c>
 80024b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80d1 	beq.w	800266c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_UART_IRQHandler+0xae>
 80024d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_UART_IRQHandler+0xd2>
 80024fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f043 0202 	orr.w	r2, r3, #2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_UART_IRQHandler+0xf6>
 800251e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f043 0204 	orr.w	r2, r3, #4
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d011      	beq.n	8002566 <HAL_UART_IRQHandler+0x126>
 8002542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800254e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f043 0208 	orr.w	r2, r3, #8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 81f2 	beq.w	8002954 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_UART_IRQHandler+0x14e>
 800257c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fb24 	bl	8002bd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002598:	2b40      	cmp	r3, #64	@ 0x40
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <HAL_UART_IRQHandler+0x17a>
 80025b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d04f      	beq.n	800265a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fa2c 	bl	8002a18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ca:	2b40      	cmp	r3, #64	@ 0x40
 80025cc:	d141      	bne.n	8002652 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3314      	adds	r3, #20
 80025d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025dc:	e853 3f00 	ldrex	r3, [r3]
 80025e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80025e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3314      	adds	r3, #20
 80025f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800260a:	e841 2300 	strex	r3, r2, [r1]
 800260e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1d9      	bne.n	80025ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d013      	beq.n	800264a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002626:	4a7e      	ldr	r2, [pc, #504]	@ (8002820 <HAL_UART_IRQHandler+0x3e0>)
 8002628:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fcdb 	bl	8000fea <HAL_DMA_Abort_IT>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800263e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002644:	4610      	mov	r0, r2
 8002646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	e00e      	b.n	8002668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f994 	bl	8002978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e00a      	b.n	8002668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f990 	bl	8002978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	e006      	b.n	8002668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f98c 	bl	8002978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002666:	e175      	b.n	8002954 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002668:	bf00      	nop
    return;
 800266a:	e173      	b.n	8002954 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	2b01      	cmp	r3, #1
 8002672:	f040 814f 	bne.w	8002914 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8148 	beq.w	8002914 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8141 	beq.w	8002914 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b2:	2b40      	cmp	r3, #64	@ 0x40
 80026b4:	f040 80b6 	bne.w	8002824 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8145 	beq.w	8002958 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026d6:	429a      	cmp	r2, r3
 80026d8:	f080 813e 	bcs.w	8002958 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ee:	f000 8088 	beq.w	8002802 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	330c      	adds	r3, #12
 80026f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002700:	e853 3f00 	ldrex	r3, [r3]
 8002704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002708:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800270c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800271e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002722:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002726:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800272a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800272e:	e841 2300 	strex	r3, r2, [r1]
 8002732:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1d9      	bne.n	80026f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3314      	adds	r3, #20
 8002744:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002748:	e853 3f00 	ldrex	r3, [r3]
 800274c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800274e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3314      	adds	r3, #20
 800275e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002762:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002766:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002768:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800276a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800276e:	e841 2300 	strex	r3, r2, [r1]
 8002772:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e1      	bne.n	800273e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3314      	adds	r3, #20
 8002780:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002784:	e853 3f00 	ldrex	r3, [r3]
 8002788:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800278a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800278c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002790:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3314      	adds	r3, #20
 800279a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800279e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80027a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027a6:	e841 2300 	strex	r3, r2, [r1]
 80027aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1e3      	bne.n	800277a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	330c      	adds	r3, #12
 80027c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027ca:	e853 3f00 	ldrex	r3, [r3]
 80027ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80027d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027d2:	f023 0310 	bic.w	r3, r3, #16
 80027d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	330c      	adds	r3, #12
 80027e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80027e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027ec:	e841 2300 	strex	r3, r2, [r1]
 80027f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e3      	bne.n	80027c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fb84 	bl	8000f0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2202      	movs	r2, #2
 8002806:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002810:	b29b      	uxth	r3, r3
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	b29b      	uxth	r3, r3
 8002816:	4619      	mov	r1, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f8b7 	bl	800298c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800281e:	e09b      	b.n	8002958 <HAL_UART_IRQHandler+0x518>
 8002820:	08002adf 	.word	0x08002adf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800282c:	b29b      	uxth	r3, r3
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 808e 	beq.w	800295c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8089 	beq.w	800295c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	330c      	adds	r3, #12
 8002850:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002854:	e853 3f00 	ldrex	r3, [r3]
 8002858:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800285a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800285c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800286e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002870:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002872:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800287c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e3      	bne.n	800284a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	623b      	str	r3, [r7, #32]
   return(result);
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3314      	adds	r3, #20
 80028a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80028a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80028a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ae:	e841 2300 	strex	r3, r2, [r1]
 80028b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80028b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e3      	bne.n	8002882 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	330c      	adds	r3, #12
 80028ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	e853 3f00 	ldrex	r3, [r3]
 80028d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0310 	bic.w	r3, r3, #16
 80028de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80028ec:	61fa      	str	r2, [r7, #28]
 80028ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f0:	69b9      	ldr	r1, [r7, #24]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	e841 2300 	strex	r3, r2, [r1]
 80028f8:	617b      	str	r3, [r7, #20]
   return(result);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e3      	bne.n	80028c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002906:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800290a:	4619      	mov	r1, r3
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f83d 	bl	800298c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002912:	e023      	b.n	800295c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291c:	2b00      	cmp	r3, #0
 800291e:	d009      	beq.n	8002934 <HAL_UART_IRQHandler+0x4f4>
 8002920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f8ea 	bl	8002b06 <UART_Transmit_IT>
    return;
 8002932:	e014      	b.n	800295e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <HAL_UART_IRQHandler+0x51e>
 8002940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f92a 	bl	8002ba6 <UART_EndTransmit_IT>
    return;
 8002952:	e004      	b.n	800295e <HAL_UART_IRQHandler+0x51e>
    return;
 8002954:	bf00      	nop
 8002956:	e002      	b.n	800295e <HAL_UART_IRQHandler+0x51e>
      return;
 8002958:	bf00      	nop
 800295a:	e000      	b.n	800295e <HAL_UART_IRQHandler+0x51e>
      return;
 800295c:	bf00      	nop
  }
}
 800295e:	37e8      	adds	r7, #232	@ 0xe8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	88fa      	ldrh	r2, [r7, #6]
 80029bc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	88fa      	ldrh	r2, [r7, #6]
 80029c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2222      	movs	r2, #34	@ 0x22
 80029ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0220 	orr.w	r2, r2, #32
 8002a08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b095      	sub	sp, #84	@ 0x54
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	330c      	adds	r3, #12
 8002a26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a2a:	e853 3f00 	ldrex	r3, [r3]
 8002a2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a40:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a48:	e841 2300 	strex	r3, r2, [r1]
 8002a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1e5      	bne.n	8002a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3314      	adds	r3, #20
 8002a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	e853 3f00 	ldrex	r3, [r3]
 8002a62:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f023 0301 	bic.w	r3, r3, #1
 8002a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3314      	adds	r3, #20
 8002a72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a7c:	e841 2300 	strex	r3, r2, [r1]
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e5      	bne.n	8002a54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d119      	bne.n	8002ac4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	e853 3f00 	ldrex	r3, [r3]
 8002a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f023 0310 	bic.w	r3, r3, #16
 8002aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ab0:	61ba      	str	r2, [r7, #24]
 8002ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab4:	6979      	ldr	r1, [r7, #20]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	e841 2300 	strex	r3, r2, [r1]
 8002abc:	613b      	str	r3, [r7, #16]
   return(result);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e5      	bne.n	8002a90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ad2:	bf00      	nop
 8002ad4:	3754      	adds	r7, #84	@ 0x54
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff ff3d 	bl	8002978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b21      	cmp	r3, #33	@ 0x21
 8002b18:	d13e      	bne.n	8002b98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b22:	d114      	bne.n	8002b4e <UART_Transmit_IT+0x48>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d110      	bne.n	8002b4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	1c9a      	adds	r2, r3, #2
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	621a      	str	r2, [r3, #32]
 8002b4c:	e008      	b.n	8002b60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	1c59      	adds	r1, r3, #1
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6211      	str	r1, [r2, #32]
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10f      	bne.n	8002b94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e000      	b.n	8002b9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b98:	2302      	movs	r3, #2
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fecc 	bl	8002964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b08c      	sub	sp, #48	@ 0x30
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b22      	cmp	r3, #34	@ 0x22
 8002be8:	f040 80ae 	bne.w	8002d48 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bf4:	d117      	bne.n	8002c26 <UART_Receive_IT+0x50>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d113      	bne.n	8002c26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c06:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	1c9a      	adds	r2, r3, #2
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c24:	e026      	b.n	8002c74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c38:	d007      	beq.n	8002c4a <UART_Receive_IT+0x74>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10a      	bne.n	8002c58 <UART_Receive_IT+0x82>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e008      	b.n	8002c6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4619      	mov	r1, r3
 8002c82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d15d      	bne.n	8002d44 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0220 	bic.w	r2, r2, #32
 8002c96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ca6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d135      	bne.n	8002d3a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f023 0310 	bic.w	r3, r3, #16
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf4:	623a      	str	r2, [r7, #32]
 8002cf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	69f9      	ldr	r1, [r7, #28]
 8002cfa:	6a3a      	ldr	r2, [r7, #32]
 8002cfc:	e841 2300 	strex	r3, r2, [r1]
 8002d00:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e5      	bne.n	8002cd4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d10a      	bne.n	8002d2c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d30:	4619      	mov	r1, r3
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff fe2a 	bl	800298c <HAL_UARTEx_RxEventCallback>
 8002d38:	e002      	b.n	8002d40 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd fdd0 	bl	80008e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e002      	b.n	8002d4a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3730      	adds	r7, #48	@ 0x30
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d58:	b0c0      	sub	sp, #256	@ 0x100
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d70:	68d9      	ldr	r1, [r3, #12]
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	ea40 0301 	orr.w	r3, r0, r1
 8002d7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002dac:	f021 010c 	bic.w	r1, r1, #12
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dce:	6999      	ldr	r1, [r3, #24]
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	ea40 0301 	orr.w	r3, r0, r1
 8002dda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4b8f      	ldr	r3, [pc, #572]	@ (8003020 <UART_SetConfig+0x2cc>)
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d005      	beq.n	8002df4 <UART_SetConfig+0xa0>
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b8d      	ldr	r3, [pc, #564]	@ (8003024 <UART_SetConfig+0x2d0>)
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d104      	bne.n	8002dfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002df4:	f7fe ff86 	bl	8001d04 <HAL_RCC_GetPCLK2Freq>
 8002df8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002dfc:	e003      	b.n	8002e06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dfe:	f7fe ff6d 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 8002e02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e10:	f040 810c 	bne.w	800302c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e26:	4622      	mov	r2, r4
 8002e28:	462b      	mov	r3, r5
 8002e2a:	1891      	adds	r1, r2, r2
 8002e2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e2e:	415b      	adcs	r3, r3
 8002e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e36:	4621      	mov	r1, r4
 8002e38:	eb12 0801 	adds.w	r8, r2, r1
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	eb43 0901 	adc.w	r9, r3, r1
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e56:	4690      	mov	r8, r2
 8002e58:	4699      	mov	r9, r3
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	eb18 0303 	adds.w	r3, r8, r3
 8002e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e64:	462b      	mov	r3, r5
 8002e66:	eb49 0303 	adc.w	r3, r9, r3
 8002e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e82:	460b      	mov	r3, r1
 8002e84:	18db      	adds	r3, r3, r3
 8002e86:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e88:	4613      	mov	r3, r2
 8002e8a:	eb42 0303 	adc.w	r3, r2, r3
 8002e8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e98:	f7fd f996 	bl	80001c8 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4b61      	ldr	r3, [pc, #388]	@ (8003028 <UART_SetConfig+0x2d4>)
 8002ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	011c      	lsls	r4, r3, #4
 8002eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002eb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002eb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ebc:	4642      	mov	r2, r8
 8002ebe:	464b      	mov	r3, r9
 8002ec0:	1891      	adds	r1, r2, r2
 8002ec2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ec4:	415b      	adcs	r3, r3
 8002ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ec8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ecc:	4641      	mov	r1, r8
 8002ece:	eb12 0a01 	adds.w	sl, r2, r1
 8002ed2:	4649      	mov	r1, r9
 8002ed4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ee4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eec:	4692      	mov	sl, r2
 8002eee:	469b      	mov	fp, r3
 8002ef0:	4643      	mov	r3, r8
 8002ef2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002efa:	464b      	mov	r3, r9
 8002efc:	eb4b 0303 	adc.w	r3, fp, r3
 8002f00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	18db      	adds	r3, r3, r3
 8002f1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f1e:	4613      	mov	r3, r2
 8002f20:	eb42 0303 	adc.w	r3, r2, r3
 8002f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f2e:	f7fd f94b 	bl	80001c8 <__aeabi_uldivmod>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4611      	mov	r1, r2
 8002f38:	4b3b      	ldr	r3, [pc, #236]	@ (8003028 <UART_SetConfig+0x2d4>)
 8002f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	2264      	movs	r2, #100	@ 0x64
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	1acb      	subs	r3, r1, r3
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f4e:	4b36      	ldr	r3, [pc, #216]	@ (8003028 <UART_SetConfig+0x2d4>)
 8002f50:	fba3 2302 	umull	r2, r3, r3, r2
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f5c:	441c      	add	r4, r3
 8002f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f70:	4642      	mov	r2, r8
 8002f72:	464b      	mov	r3, r9
 8002f74:	1891      	adds	r1, r2, r2
 8002f76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f78:	415b      	adcs	r3, r3
 8002f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f80:	4641      	mov	r1, r8
 8002f82:	1851      	adds	r1, r2, r1
 8002f84:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f86:	4649      	mov	r1, r9
 8002f88:	414b      	adcs	r3, r1
 8002f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f98:	4659      	mov	r1, fp
 8002f9a:	00cb      	lsls	r3, r1, #3
 8002f9c:	4651      	mov	r1, sl
 8002f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fa2:	4651      	mov	r1, sl
 8002fa4:	00ca      	lsls	r2, r1, #3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	4642      	mov	r2, r8
 8002fae:	189b      	adds	r3, r3, r2
 8002fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	460a      	mov	r2, r1
 8002fb8:	eb42 0303 	adc.w	r3, r2, r3
 8002fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002fd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	18db      	adds	r3, r3, r3
 8002fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fda:	4613      	mov	r3, r2
 8002fdc:	eb42 0303 	adc.w	r3, r2, r3
 8002fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fe6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002fea:	f7fd f8ed 	bl	80001c8 <__aeabi_uldivmod>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <UART_SetConfig+0x2d4>)
 8002ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	2164      	movs	r1, #100	@ 0x64
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	3332      	adds	r3, #50	@ 0x32
 8003006:	4a08      	ldr	r2, [pc, #32]	@ (8003028 <UART_SetConfig+0x2d4>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	095b      	lsrs	r3, r3, #5
 800300e:	f003 0207 	and.w	r2, r3, #7
 8003012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4422      	add	r2, r4
 800301a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800301c:	e106      	b.n	800322c <UART_SetConfig+0x4d8>
 800301e:	bf00      	nop
 8003020:	40011000 	.word	0x40011000
 8003024:	40011400 	.word	0x40011400
 8003028:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800302c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003030:	2200      	movs	r2, #0
 8003032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003036:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800303a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800303e:	4642      	mov	r2, r8
 8003040:	464b      	mov	r3, r9
 8003042:	1891      	adds	r1, r2, r2
 8003044:	6239      	str	r1, [r7, #32]
 8003046:	415b      	adcs	r3, r3
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
 800304a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800304e:	4641      	mov	r1, r8
 8003050:	1854      	adds	r4, r2, r1
 8003052:	4649      	mov	r1, r9
 8003054:	eb43 0501 	adc.w	r5, r3, r1
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	00eb      	lsls	r3, r5, #3
 8003062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003066:	00e2      	lsls	r2, r4, #3
 8003068:	4614      	mov	r4, r2
 800306a:	461d      	mov	r5, r3
 800306c:	4643      	mov	r3, r8
 800306e:	18e3      	adds	r3, r4, r3
 8003070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003074:	464b      	mov	r3, r9
 8003076:	eb45 0303 	adc.w	r3, r5, r3
 800307a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800308a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800309a:	4629      	mov	r1, r5
 800309c:	008b      	lsls	r3, r1, #2
 800309e:	4621      	mov	r1, r4
 80030a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a4:	4621      	mov	r1, r4
 80030a6:	008a      	lsls	r2, r1, #2
 80030a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030ac:	f7fd f88c 	bl	80001c8 <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4b60      	ldr	r3, [pc, #384]	@ (8003238 <UART_SetConfig+0x4e4>)
 80030b6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	011c      	lsls	r4, r3, #4
 80030be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030d0:	4642      	mov	r2, r8
 80030d2:	464b      	mov	r3, r9
 80030d4:	1891      	adds	r1, r2, r2
 80030d6:	61b9      	str	r1, [r7, #24]
 80030d8:	415b      	adcs	r3, r3
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e0:	4641      	mov	r1, r8
 80030e2:	1851      	adds	r1, r2, r1
 80030e4:	6139      	str	r1, [r7, #16]
 80030e6:	4649      	mov	r1, r9
 80030e8:	414b      	adcs	r3, r1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f8:	4659      	mov	r1, fp
 80030fa:	00cb      	lsls	r3, r1, #3
 80030fc:	4651      	mov	r1, sl
 80030fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003102:	4651      	mov	r1, sl
 8003104:	00ca      	lsls	r2, r1, #3
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	4603      	mov	r3, r0
 800310c:	4642      	mov	r2, r8
 800310e:	189b      	adds	r3, r3, r2
 8003110:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003114:	464b      	mov	r3, r9
 8003116:	460a      	mov	r2, r1
 8003118:	eb42 0303 	adc.w	r3, r2, r3
 800311c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	67bb      	str	r3, [r7, #120]	@ 0x78
 800312a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003138:	4649      	mov	r1, r9
 800313a:	008b      	lsls	r3, r1, #2
 800313c:	4641      	mov	r1, r8
 800313e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003142:	4641      	mov	r1, r8
 8003144:	008a      	lsls	r2, r1, #2
 8003146:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800314a:	f7fd f83d 	bl	80001c8 <__aeabi_uldivmod>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4611      	mov	r1, r2
 8003154:	4b38      	ldr	r3, [pc, #224]	@ (8003238 <UART_SetConfig+0x4e4>)
 8003156:	fba3 2301 	umull	r2, r3, r3, r1
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2264      	movs	r2, #100	@ 0x64
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	1acb      	subs	r3, r1, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	3332      	adds	r3, #50	@ 0x32
 8003168:	4a33      	ldr	r2, [pc, #204]	@ (8003238 <UART_SetConfig+0x4e4>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003174:	441c      	add	r4, r3
 8003176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800317a:	2200      	movs	r2, #0
 800317c:	673b      	str	r3, [r7, #112]	@ 0x70
 800317e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003180:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003184:	4642      	mov	r2, r8
 8003186:	464b      	mov	r3, r9
 8003188:	1891      	adds	r1, r2, r2
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	415b      	adcs	r3, r3
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003194:	4641      	mov	r1, r8
 8003196:	1851      	adds	r1, r2, r1
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	4649      	mov	r1, r9
 800319c:	414b      	adcs	r3, r1
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031ac:	4659      	mov	r1, fp
 80031ae:	00cb      	lsls	r3, r1, #3
 80031b0:	4651      	mov	r1, sl
 80031b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031b6:	4651      	mov	r1, sl
 80031b8:	00ca      	lsls	r2, r1, #3
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	4642      	mov	r2, r8
 80031c2:	189b      	adds	r3, r3, r2
 80031c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031c6:	464b      	mov	r3, r9
 80031c8:	460a      	mov	r2, r1
 80031ca:	eb42 0303 	adc.w	r3, r2, r3
 80031ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80031da:	667a      	str	r2, [r7, #100]	@ 0x64
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80031e8:	4649      	mov	r1, r9
 80031ea:	008b      	lsls	r3, r1, #2
 80031ec:	4641      	mov	r1, r8
 80031ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031f2:	4641      	mov	r1, r8
 80031f4:	008a      	lsls	r2, r1, #2
 80031f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80031fa:	f7fc ffe5 	bl	80001c8 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <UART_SetConfig+0x4e4>)
 8003204:	fba3 1302 	umull	r1, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	2164      	movs	r1, #100	@ 0x64
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	3332      	adds	r3, #50	@ 0x32
 8003216:	4a08      	ldr	r2, [pc, #32]	@ (8003238 <UART_SetConfig+0x4e4>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	f003 020f 	and.w	r2, r3, #15
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4422      	add	r2, r4
 800322a:	609a      	str	r2, [r3, #8]
}
 800322c:	bf00      	nop
 800322e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003232:	46bd      	mov	sp, r7
 8003234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003238:	51eb851f 	.word	0x51eb851f

0800323c <_7SEG_GPIO_Init>:
 */

#include "7seg.h"

void _7SEG_GPIO_Init()
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	@ 0x28
 8003240:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	4b6b      	ldr	r3, [pc, #428]	@ (80033f4 <_7SEG_GPIO_Init+0x1b8>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	4a6a      	ldr	r2, [pc, #424]	@ (80033f4 <_7SEG_GPIO_Init+0x1b8>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6313      	str	r3, [r2, #48]	@ 0x30
 8003252:	4b68      	ldr	r3, [pc, #416]	@ (80033f4 <_7SEG_GPIO_Init+0x1b8>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	4b64      	ldr	r3, [pc, #400]	@ (80033f4 <_7SEG_GPIO_Init+0x1b8>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	4a63      	ldr	r2, [pc, #396]	@ (80033f4 <_7SEG_GPIO_Init+0x1b8>)
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	6313      	str	r3, [r2, #48]	@ 0x30
 800326e:	4b61      	ldr	r3, [pc, #388]	@ (80033f4 <_7SEG_GPIO_Init+0x1b8>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	4b5d      	ldr	r3, [pc, #372]	@ (80033f4 <_7SEG_GPIO_Init+0x1b8>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	4a5c      	ldr	r2, [pc, #368]	@ (80033f4 <_7SEG_GPIO_Init+0x1b8>)
 8003284:	f043 0308 	orr.w	r3, r3, #8
 8003288:	6313      	str	r3, [r2, #48]	@ 0x30
 800328a:	4b5a      	ldr	r3, [pc, #360]	@ (80033f4 <_7SEG_GPIO_Init+0x1b8>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	607b      	str	r3, [r7, #4]
 800329a:	4b56      	ldr	r3, [pc, #344]	@ (80033f4 <_7SEG_GPIO_Init+0x1b8>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	4a55      	ldr	r2, [pc, #340]	@ (80033f4 <_7SEG_GPIO_Init+0x1b8>)
 80032a0:	f043 0310 	orr.w	r3, r3, #16
 80032a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a6:	4b53      	ldr	r3, [pc, #332]	@ (80033f4 <_7SEG_GPIO_Init+0x1b8>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 80032b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80032b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b8:	2301      	movs	r3, #1
 80032ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	4619      	mov	r1, r3
 80032ca:	484b      	ldr	r0, [pc, #300]	@ (80033f8 <_7SEG_GPIO_Init+0x1bc>)
 80032cc:	f7fd feb0 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 80032d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032d4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 80032d6:	f107 0314 	add.w	r3, r7, #20
 80032da:	4619      	mov	r1, r3
 80032dc:	4847      	ldr	r0, [pc, #284]	@ (80033fc <_7SEG_GPIO_Init+0x1c0>)
 80032de:	f7fd fea7 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 80032e2:	2340      	movs	r3, #64	@ 0x40
 80032e4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 80032e6:	f107 0314 	add.w	r3, r7, #20
 80032ea:	4619      	mov	r1, r3
 80032ec:	4842      	ldr	r0, [pc, #264]	@ (80033f8 <_7SEG_GPIO_Init+0x1bc>)
 80032ee:	f7fd fe9f 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 80032f2:	2320      	movs	r3, #32
 80032f4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 80032f6:	f107 0314 	add.w	r3, r7, #20
 80032fa:	4619      	mov	r1, r3
 80032fc:	483e      	ldr	r0, [pc, #248]	@ (80033f8 <_7SEG_GPIO_Init+0x1bc>)
 80032fe:	f7fd fe97 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8003302:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003306:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	4619      	mov	r1, r3
 800330e:	483c      	ldr	r0, [pc, #240]	@ (8003400 <_7SEG_GPIO_Init+0x1c4>)
 8003310:	f7fd fe8e 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8003314:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003318:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 800331a:	f107 0314 	add.w	r3, r7, #20
 800331e:	4619      	mov	r1, r3
 8003320:	4837      	ldr	r0, [pc, #220]	@ (8003400 <_7SEG_GPIO_Init+0x1c4>)
 8003322:	f7fd fe85 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 8003326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800332a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4619      	mov	r1, r3
 8003332:	4831      	ldr	r0, [pc, #196]	@ (80033f8 <_7SEG_GPIO_Init+0x1bc>)
 8003334:	f7fd fe7c 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	4619      	mov	r1, r3
 8003342:	482d      	ldr	r0, [pc, #180]	@ (80033f8 <_7SEG_GPIO_Init+0x1bc>)
 8003344:	f7fd fe74 	bl	8001030 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 8003348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800334c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 800334e:	f107 0314 	add.w	r3, r7, #20
 8003352:	4619      	mov	r1, r3
 8003354:	482b      	ldr	r0, [pc, #172]	@ (8003404 <_7SEG_GPIO_Init+0x1c8>)
 8003356:	f7fd fe6b 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 800335a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800335e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	4619      	mov	r1, r3
 8003366:	4827      	ldr	r0, [pc, #156]	@ (8003404 <_7SEG_GPIO_Init+0x1c8>)
 8003368:	f7fd fe62 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 800336c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003370:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8003372:	f107 0314 	add.w	r3, r7, #20
 8003376:	4619      	mov	r1, r3
 8003378:	4822      	ldr	r0, [pc, #136]	@ (8003404 <_7SEG_GPIO_Init+0x1c8>)
 800337a:	f7fd fe59 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 800337e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003382:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 8003384:	f107 0314 	add.w	r3, r7, #20
 8003388:	4619      	mov	r1, r3
 800338a:	481e      	ldr	r0, [pc, #120]	@ (8003404 <_7SEG_GPIO_Init+0x1c8>)
 800338c:	f7fd fe50 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 8003390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003394:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 8003396:	f107 0314 	add.w	r3, r7, #20
 800339a:	4619      	mov	r1, r3
 800339c:	4819      	ldr	r0, [pc, #100]	@ (8003404 <_7SEG_GPIO_Init+0x1c8>)
 800339e:	f7fd fe47 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 80033a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	4619      	mov	r1, r3
 80033ae:	4815      	ldr	r0, [pc, #84]	@ (8003404 <_7SEG_GPIO_Init+0x1c8>)
 80033b0:	f7fd fe3e 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 80033b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 80033ba:	f107 0314 	add.w	r3, r7, #20
 80033be:	4619      	mov	r1, r3
 80033c0:	4810      	ldr	r0, [pc, #64]	@ (8003404 <_7SEG_GPIO_Init+0x1c8>)
 80033c2:	f7fd fe35 	bl	8001030 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 80033c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4619      	mov	r1, r3
 80033d2:	480c      	ldr	r0, [pc, #48]	@ (8003404 <_7SEG_GPIO_Init+0x1c8>)
 80033d4:	f7fd fe2c 	bl	8001030 <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 80033d8:	2201      	movs	r2, #1
 80033da:	2100      	movs	r1, #0
 80033dc:	2000      	movs	r0, #0
 80033de:	f000 f813 	bl	8003408 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 80033e2:	2201      	movs	r2, #1
 80033e4:	2100      	movs	r1, #0
 80033e6:	2001      	movs	r0, #1
 80033e8:	f000 f80e 	bl	8003408 <_7SEG_SetNumber>
}
 80033ec:	bf00      	nop
 80033ee:	3728      	adds	r7, #40	@ 0x28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020c00 	.word	0x40020c00
 80033fc:	40020000 	.word	0x40020000
 8003400:	40020800 	.word	0x40020800
 8003404:	40021000 	.word	0x40021000

08003408 <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f040 81dc 	bne.w	80037d4 <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	4bcb      	ldr	r3, [pc, #812]	@ (800374c <_7SEG_SetNumber+0x344>)
 8003420:	fb83 2301 	smull	r2, r3, r3, r1
 8003424:	109a      	asrs	r2, r3, #2
 8003426:	17cb      	asrs	r3, r1, #31
 8003428:	1ad2      	subs	r2, r2, r3
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	1aca      	subs	r2, r1, r3
 8003434:	2a09      	cmp	r2, #9
 8003436:	f200 81ba 	bhi.w	80037ae <_7SEG_SetNumber+0x3a6>
 800343a:	a301      	add	r3, pc, #4	@ (adr r3, 8003440 <_7SEG_SetNumber+0x38>)
 800343c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003440:	08003469 	.word	0x08003469
 8003444:	080034bb 	.word	0x080034bb
 8003448:	0800350d 	.word	0x0800350d
 800344c:	0800355f 	.word	0x0800355f
 8003450:	080035b1 	.word	0x080035b1
 8003454:	08003603 	.word	0x08003603
 8003458:	08003655 	.word	0x08003655
 800345c:	080036a7 	.word	0x080036a7
 8003460:	080036f9 	.word	0x080036f9
 8003464:	0800375d 	.word	0x0800375d
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 8003468:	2200      	movs	r2, #0
 800346a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800346e:	48b8      	ldr	r0, [pc, #736]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003470:	f7fd ff92 	bl	8001398 <HAL_GPIO_WritePin>
 8003474:	2200      	movs	r2, #0
 8003476:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800347a:	48b6      	ldr	r0, [pc, #728]	@ (8003754 <_7SEG_SetNumber+0x34c>)
 800347c:	f7fd ff8c 	bl	8001398 <HAL_GPIO_WritePin>
 8003480:	2200      	movs	r2, #0
 8003482:	2140      	movs	r1, #64	@ 0x40
 8003484:	48b2      	ldr	r0, [pc, #712]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003486:	f7fd ff87 	bl	8001398 <HAL_GPIO_WritePin>
 800348a:	2200      	movs	r2, #0
 800348c:	2120      	movs	r1, #32
 800348e:	48b0      	ldr	r0, [pc, #704]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003490:	f7fd ff82 	bl	8001398 <HAL_GPIO_WritePin>
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800349a:	48af      	ldr	r0, [pc, #700]	@ (8003758 <_7SEG_SetNumber+0x350>)
 800349c:	f7fd ff7c 	bl	8001398 <HAL_GPIO_WritePin>
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034a6:	48ac      	ldr	r0, [pc, #688]	@ (8003758 <_7SEG_SetNumber+0x350>)
 80034a8:	f7fd ff76 	bl	8001398 <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 80034ac:	2201      	movs	r2, #1
 80034ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034b2:	48a7      	ldr	r0, [pc, #668]	@ (8003750 <_7SEG_SetNumber+0x348>)
 80034b4:	f7fd ff70 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 80034b8:	e179      	b.n	80037ae <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 80034ba:	2200      	movs	r2, #0
 80034bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034c0:	48a4      	ldr	r0, [pc, #656]	@ (8003754 <_7SEG_SetNumber+0x34c>)
 80034c2:	f7fd ff69 	bl	8001398 <HAL_GPIO_WritePin>
 80034c6:	2200      	movs	r2, #0
 80034c8:	2140      	movs	r1, #64	@ 0x40
 80034ca:	48a1      	ldr	r0, [pc, #644]	@ (8003750 <_7SEG_SetNumber+0x348>)
 80034cc:	f7fd ff64 	bl	8001398 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 80034d0:	2201      	movs	r2, #1
 80034d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80034d6:	489e      	ldr	r0, [pc, #632]	@ (8003750 <_7SEG_SetNumber+0x348>)
 80034d8:	f7fd ff5e 	bl	8001398 <HAL_GPIO_WritePin>
 80034dc:	2201      	movs	r2, #1
 80034de:	2120      	movs	r1, #32
 80034e0:	489b      	ldr	r0, [pc, #620]	@ (8003750 <_7SEG_SetNumber+0x348>)
 80034e2:	f7fd ff59 	bl	8001398 <HAL_GPIO_WritePin>
 80034e6:	2201      	movs	r2, #1
 80034e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80034ec:	489a      	ldr	r0, [pc, #616]	@ (8003758 <_7SEG_SetNumber+0x350>)
 80034ee:	f7fd ff53 	bl	8001398 <HAL_GPIO_WritePin>
 80034f2:	2201      	movs	r2, #1
 80034f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034f8:	4897      	ldr	r0, [pc, #604]	@ (8003758 <_7SEG_SetNumber+0x350>)
 80034fa:	f7fd ff4d 	bl	8001398 <HAL_GPIO_WritePin>
 80034fe:	2201      	movs	r2, #1
 8003500:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003504:	4892      	ldr	r0, [pc, #584]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003506:	f7fd ff47 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 800350a:	e150      	b.n	80037ae <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 800350c:	2200      	movs	r2, #0
 800350e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003512:	488f      	ldr	r0, [pc, #572]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003514:	f7fd ff40 	bl	8001398 <HAL_GPIO_WritePin>
 8003518:	2200      	movs	r2, #0
 800351a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800351e:	488d      	ldr	r0, [pc, #564]	@ (8003754 <_7SEG_SetNumber+0x34c>)
 8003520:	f7fd ff3a 	bl	8001398 <HAL_GPIO_WritePin>
 8003524:	2200      	movs	r2, #0
 8003526:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800352a:	4889      	ldr	r0, [pc, #548]	@ (8003750 <_7SEG_SetNumber+0x348>)
 800352c:	f7fd ff34 	bl	8001398 <HAL_GPIO_WritePin>
 8003530:	2200      	movs	r2, #0
 8003532:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003536:	4888      	ldr	r0, [pc, #544]	@ (8003758 <_7SEG_SetNumber+0x350>)
 8003538:	f7fd ff2e 	bl	8001398 <HAL_GPIO_WritePin>
 800353c:	2200      	movs	r2, #0
 800353e:	2120      	movs	r1, #32
 8003540:	4883      	ldr	r0, [pc, #524]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003542:	f7fd ff29 	bl	8001398 <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 8003546:	2201      	movs	r2, #1
 8003548:	2140      	movs	r1, #64	@ 0x40
 800354a:	4881      	ldr	r0, [pc, #516]	@ (8003750 <_7SEG_SetNumber+0x348>)
 800354c:	f7fd ff24 	bl	8001398 <HAL_GPIO_WritePin>
 8003550:	2201      	movs	r2, #1
 8003552:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003556:	4880      	ldr	r0, [pc, #512]	@ (8003758 <_7SEG_SetNumber+0x350>)
 8003558:	f7fd ff1e 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 800355c:	e127      	b.n	80037ae <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 800355e:	2200      	movs	r2, #0
 8003560:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003564:	487a      	ldr	r0, [pc, #488]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003566:	f7fd ff17 	bl	8001398 <HAL_GPIO_WritePin>
 800356a:	2200      	movs	r2, #0
 800356c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003570:	4878      	ldr	r0, [pc, #480]	@ (8003754 <_7SEG_SetNumber+0x34c>)
 8003572:	f7fd ff11 	bl	8001398 <HAL_GPIO_WritePin>
 8003576:	2200      	movs	r2, #0
 8003578:	2140      	movs	r1, #64	@ 0x40
 800357a:	4875      	ldr	r0, [pc, #468]	@ (8003750 <_7SEG_SetNumber+0x348>)
 800357c:	f7fd ff0c 	bl	8001398 <HAL_GPIO_WritePin>
 8003580:	2200      	movs	r2, #0
 8003582:	2120      	movs	r1, #32
 8003584:	4872      	ldr	r0, [pc, #456]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003586:	f7fd ff07 	bl	8001398 <HAL_GPIO_WritePin>
 800358a:	2200      	movs	r2, #0
 800358c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003590:	486f      	ldr	r0, [pc, #444]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003592:	f7fd ff01 	bl	8001398 <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 8003596:	2201      	movs	r2, #1
 8003598:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800359c:	486e      	ldr	r0, [pc, #440]	@ (8003758 <_7SEG_SetNumber+0x350>)
 800359e:	f7fd fefb 	bl	8001398 <HAL_GPIO_WritePin>
 80035a2:	2201      	movs	r2, #1
 80035a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035a8:	486b      	ldr	r0, [pc, #428]	@ (8003758 <_7SEG_SetNumber+0x350>)
 80035aa:	f7fd fef5 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 80035ae:	e0fe      	b.n	80037ae <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 80035b0:	2200      	movs	r2, #0
 80035b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035b6:	4868      	ldr	r0, [pc, #416]	@ (8003758 <_7SEG_SetNumber+0x350>)
 80035b8:	f7fd feee 	bl	8001398 <HAL_GPIO_WritePin>
 80035bc:	2200      	movs	r2, #0
 80035be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035c2:	4863      	ldr	r0, [pc, #396]	@ (8003750 <_7SEG_SetNumber+0x348>)
 80035c4:	f7fd fee8 	bl	8001398 <HAL_GPIO_WritePin>
 80035c8:	2200      	movs	r2, #0
 80035ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035ce:	4861      	ldr	r0, [pc, #388]	@ (8003754 <_7SEG_SetNumber+0x34c>)
 80035d0:	f7fd fee2 	bl	8001398 <HAL_GPIO_WritePin>
 80035d4:	2200      	movs	r2, #0
 80035d6:	2140      	movs	r1, #64	@ 0x40
 80035d8:	485d      	ldr	r0, [pc, #372]	@ (8003750 <_7SEG_SetNumber+0x348>)
 80035da:	f7fd fedd 	bl	8001398 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 80035de:	2201      	movs	r2, #1
 80035e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80035e4:	485a      	ldr	r0, [pc, #360]	@ (8003750 <_7SEG_SetNumber+0x348>)
 80035e6:	f7fd fed7 	bl	8001398 <HAL_GPIO_WritePin>
 80035ea:	2201      	movs	r2, #1
 80035ec:	2120      	movs	r1, #32
 80035ee:	4858      	ldr	r0, [pc, #352]	@ (8003750 <_7SEG_SetNumber+0x348>)
 80035f0:	f7fd fed2 	bl	8001398 <HAL_GPIO_WritePin>
 80035f4:	2201      	movs	r2, #1
 80035f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80035fa:	4857      	ldr	r0, [pc, #348]	@ (8003758 <_7SEG_SetNumber+0x350>)
 80035fc:	f7fd fecc 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 8003600:	e0d5      	b.n	80037ae <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 8003602:	2200      	movs	r2, #0
 8003604:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003608:	4851      	ldr	r0, [pc, #324]	@ (8003750 <_7SEG_SetNumber+0x348>)
 800360a:	f7fd fec5 	bl	8001398 <HAL_GPIO_WritePin>
 800360e:	2200      	movs	r2, #0
 8003610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003614:	4850      	ldr	r0, [pc, #320]	@ (8003758 <_7SEG_SetNumber+0x350>)
 8003616:	f7fd febf 	bl	8001398 <HAL_GPIO_WritePin>
 800361a:	2200      	movs	r2, #0
 800361c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003620:	484b      	ldr	r0, [pc, #300]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003622:	f7fd feb9 	bl	8001398 <HAL_GPIO_WritePin>
 8003626:	2200      	movs	r2, #0
 8003628:	2140      	movs	r1, #64	@ 0x40
 800362a:	4849      	ldr	r0, [pc, #292]	@ (8003750 <_7SEG_SetNumber+0x348>)
 800362c:	f7fd feb4 	bl	8001398 <HAL_GPIO_WritePin>
 8003630:	2200      	movs	r2, #0
 8003632:	2120      	movs	r1, #32
 8003634:	4846      	ldr	r0, [pc, #280]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003636:	f7fd feaf 	bl	8001398 <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 800363a:	2201      	movs	r2, #1
 800363c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003640:	4844      	ldr	r0, [pc, #272]	@ (8003754 <_7SEG_SetNumber+0x34c>)
 8003642:	f7fd fea9 	bl	8001398 <HAL_GPIO_WritePin>
 8003646:	2201      	movs	r2, #1
 8003648:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800364c:	4842      	ldr	r0, [pc, #264]	@ (8003758 <_7SEG_SetNumber+0x350>)
 800364e:	f7fd fea3 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 8003652:	e0ac      	b.n	80037ae <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8003654:	2200      	movs	r2, #0
 8003656:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800365a:	483d      	ldr	r0, [pc, #244]	@ (8003750 <_7SEG_SetNumber+0x348>)
 800365c:	f7fd fe9c 	bl	8001398 <HAL_GPIO_WritePin>
 8003660:	2200      	movs	r2, #0
 8003662:	2140      	movs	r1, #64	@ 0x40
 8003664:	483a      	ldr	r0, [pc, #232]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003666:	f7fd fe97 	bl	8001398 <HAL_GPIO_WritePin>
 800366a:	2200      	movs	r2, #0
 800366c:	2120      	movs	r1, #32
 800366e:	4838      	ldr	r0, [pc, #224]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003670:	f7fd fe92 	bl	8001398 <HAL_GPIO_WritePin>
 8003674:	2200      	movs	r2, #0
 8003676:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800367a:	4837      	ldr	r0, [pc, #220]	@ (8003758 <_7SEG_SetNumber+0x350>)
 800367c:	f7fd fe8c 	bl	8001398 <HAL_GPIO_WritePin>
 8003680:	2200      	movs	r2, #0
 8003682:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003686:	4834      	ldr	r0, [pc, #208]	@ (8003758 <_7SEG_SetNumber+0x350>)
 8003688:	f7fd fe86 	bl	8001398 <HAL_GPIO_WritePin>
 800368c:	2200      	movs	r2, #0
 800368e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003692:	482f      	ldr	r0, [pc, #188]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003694:	f7fd fe80 	bl	8001398 <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 8003698:	2201      	movs	r2, #1
 800369a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800369e:	482d      	ldr	r0, [pc, #180]	@ (8003754 <_7SEG_SetNumber+0x34c>)
 80036a0:	f7fd fe7a 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 80036a4:	e083      	b.n	80037ae <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 80036a6:	2200      	movs	r2, #0
 80036a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036ac:	482a      	ldr	r0, [pc, #168]	@ (8003758 <_7SEG_SetNumber+0x350>)
 80036ae:	f7fd fe73 	bl	8001398 <HAL_GPIO_WritePin>
 80036b2:	2200      	movs	r2, #0
 80036b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80036b8:	4825      	ldr	r0, [pc, #148]	@ (8003750 <_7SEG_SetNumber+0x348>)
 80036ba:	f7fd fe6d 	bl	8001398 <HAL_GPIO_WritePin>
 80036be:	2200      	movs	r2, #0
 80036c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036c4:	4823      	ldr	r0, [pc, #140]	@ (8003754 <_7SEG_SetNumber+0x34c>)
 80036c6:	f7fd fe67 	bl	8001398 <HAL_GPIO_WritePin>
 80036ca:	2200      	movs	r2, #0
 80036cc:	2140      	movs	r1, #64	@ 0x40
 80036ce:	4820      	ldr	r0, [pc, #128]	@ (8003750 <_7SEG_SetNumber+0x348>)
 80036d0:	f7fd fe62 	bl	8001398 <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 80036d4:	2201      	movs	r2, #1
 80036d6:	2120      	movs	r1, #32
 80036d8:	481d      	ldr	r0, [pc, #116]	@ (8003750 <_7SEG_SetNumber+0x348>)
 80036da:	f7fd fe5d 	bl	8001398 <HAL_GPIO_WritePin>
 80036de:	2201      	movs	r2, #1
 80036e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036e4:	481c      	ldr	r0, [pc, #112]	@ (8003758 <_7SEG_SetNumber+0x350>)
 80036e6:	f7fd fe57 	bl	8001398 <HAL_GPIO_WritePin>
 80036ea:	2201      	movs	r2, #1
 80036ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036f0:	4817      	ldr	r0, [pc, #92]	@ (8003750 <_7SEG_SetNumber+0x348>)
 80036f2:	f7fd fe51 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 80036f6:	e05a      	b.n	80037ae <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 80036f8:	2200      	movs	r2, #0
 80036fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80036fe:	4814      	ldr	r0, [pc, #80]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003700:	f7fd fe4a 	bl	8001398 <HAL_GPIO_WritePin>
 8003704:	2200      	movs	r2, #0
 8003706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800370a:	4812      	ldr	r0, [pc, #72]	@ (8003754 <_7SEG_SetNumber+0x34c>)
 800370c:	f7fd fe44 	bl	8001398 <HAL_GPIO_WritePin>
 8003710:	2200      	movs	r2, #0
 8003712:	2140      	movs	r1, #64	@ 0x40
 8003714:	480e      	ldr	r0, [pc, #56]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003716:	f7fd fe3f 	bl	8001398 <HAL_GPIO_WritePin>
 800371a:	2200      	movs	r2, #0
 800371c:	2120      	movs	r1, #32
 800371e:	480c      	ldr	r0, [pc, #48]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003720:	f7fd fe3a 	bl	8001398 <HAL_GPIO_WritePin>
 8003724:	2200      	movs	r2, #0
 8003726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800372a:	480b      	ldr	r0, [pc, #44]	@ (8003758 <_7SEG_SetNumber+0x350>)
 800372c:	f7fd fe34 	bl	8001398 <HAL_GPIO_WritePin>
 8003730:	2200      	movs	r2, #0
 8003732:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003736:	4808      	ldr	r0, [pc, #32]	@ (8003758 <_7SEG_SetNumber+0x350>)
 8003738:	f7fd fe2e 	bl	8001398 <HAL_GPIO_WritePin>
 800373c:	2200      	movs	r2, #0
 800373e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003742:	4803      	ldr	r0, [pc, #12]	@ (8003750 <_7SEG_SetNumber+0x348>)
 8003744:	f7fd fe28 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 8003748:	e031      	b.n	80037ae <_7SEG_SetNumber+0x3a6>
 800374a:	bf00      	nop
 800374c:	66666667 	.word	0x66666667
 8003750:	40020c00 	.word	0x40020c00
 8003754:	40020000 	.word	0x40020000
 8003758:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 800375c:	2200      	movs	r2, #0
 800375e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003762:	48c8      	ldr	r0, [pc, #800]	@ (8003a84 <_7SEG_SetNumber+0x67c>)
 8003764:	f7fd fe18 	bl	8001398 <HAL_GPIO_WritePin>
 8003768:	2200      	movs	r2, #0
 800376a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800376e:	48c6      	ldr	r0, [pc, #792]	@ (8003a88 <_7SEG_SetNumber+0x680>)
 8003770:	f7fd fe12 	bl	8001398 <HAL_GPIO_WritePin>
 8003774:	2200      	movs	r2, #0
 8003776:	2140      	movs	r1, #64	@ 0x40
 8003778:	48c2      	ldr	r0, [pc, #776]	@ (8003a84 <_7SEG_SetNumber+0x67c>)
 800377a:	f7fd fe0d 	bl	8001398 <HAL_GPIO_WritePin>
 800377e:	2200      	movs	r2, #0
 8003780:	2120      	movs	r1, #32
 8003782:	48c0      	ldr	r0, [pc, #768]	@ (8003a84 <_7SEG_SetNumber+0x67c>)
 8003784:	f7fd fe08 	bl	8001398 <HAL_GPIO_WritePin>
 8003788:	2200      	movs	r2, #0
 800378a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800378e:	48bf      	ldr	r0, [pc, #764]	@ (8003a8c <_7SEG_SetNumber+0x684>)
 8003790:	f7fd fe02 	bl	8001398 <HAL_GPIO_WritePin>
 8003794:	2200      	movs	r2, #0
 8003796:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800379a:	48ba      	ldr	r0, [pc, #744]	@ (8003a84 <_7SEG_SetNumber+0x67c>)
 800379c:	f7fd fdfc 	bl	8001398 <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 80037a0:	2201      	movs	r2, #1
 80037a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037a6:	48b9      	ldr	r0, [pc, #740]	@ (8003a8c <_7SEG_SetNumber+0x684>)
 80037a8:	f7fd fdf6 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 80037ac:	bf00      	nop
		}

		if(dp == ON)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 80037b4:	2200      	movs	r2, #0
 80037b6:	2180      	movs	r1, #128	@ 0x80
 80037b8:	48b2      	ldr	r0, [pc, #712]	@ (8003a84 <_7SEG_SetNumber+0x67c>)
 80037ba:	f7fd fded 	bl	8001398 <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 80037be:	e1ff      	b.n	8003bc0 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 81fc 	bne.w	8003bc0 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 80037c8:	2201      	movs	r2, #1
 80037ca:	2180      	movs	r1, #128	@ 0x80
 80037cc:	48ad      	ldr	r0, [pc, #692]	@ (8003a84 <_7SEG_SetNumber+0x67c>)
 80037ce:	f7fd fde3 	bl	8001398 <HAL_GPIO_WritePin>
}
 80037d2:	e1f5      	b.n	8003bc0 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	f040 81f2 	bne.w	8003bc0 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	4bac      	ldr	r3, [pc, #688]	@ (8003a90 <_7SEG_SetNumber+0x688>)
 80037e0:	fb83 2301 	smull	r2, r3, r3, r1
 80037e4:	109a      	asrs	r2, r3, #2
 80037e6:	17cb      	asrs	r3, r1, #31
 80037e8:	1ad2      	subs	r2, r2, r3
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	1aca      	subs	r2, r1, r3
 80037f4:	2a09      	cmp	r2, #9
 80037f6:	f200 81d0 	bhi.w	8003b9a <_7SEG_SetNumber+0x792>
 80037fa:	a301      	add	r3, pc, #4	@ (adr r3, 8003800 <_7SEG_SetNumber+0x3f8>)
 80037fc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003800:	08003829 	.word	0x08003829
 8003804:	0800387f 	.word	0x0800387f
 8003808:	080038d5 	.word	0x080038d5
 800380c:	0800392b 	.word	0x0800392b
 8003810:	08003981 	.word	0x08003981
 8003814:	080039d7 	.word	0x080039d7
 8003818:	08003a2d 	.word	0x08003a2d
 800381c:	08003a99 	.word	0x08003a99
 8003820:	08003aef 	.word	0x08003aef
 8003824:	08003b45 	.word	0x08003b45
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8003828:	2200      	movs	r2, #0
 800382a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800382e:	4899      	ldr	r0, [pc, #612]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003830:	f7fd fdb2 	bl	8001398 <HAL_GPIO_WritePin>
 8003834:	2200      	movs	r2, #0
 8003836:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800383a:	4896      	ldr	r0, [pc, #600]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 800383c:	f7fd fdac 	bl	8001398 <HAL_GPIO_WritePin>
 8003840:	2200      	movs	r2, #0
 8003842:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003846:	4893      	ldr	r0, [pc, #588]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003848:	f7fd fda6 	bl	8001398 <HAL_GPIO_WritePin>
 800384c:	2200      	movs	r2, #0
 800384e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003852:	4890      	ldr	r0, [pc, #576]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003854:	f7fd fda0 	bl	8001398 <HAL_GPIO_WritePin>
 8003858:	2200      	movs	r2, #0
 800385a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800385e:	488d      	ldr	r0, [pc, #564]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003860:	f7fd fd9a 	bl	8001398 <HAL_GPIO_WritePin>
 8003864:	2200      	movs	r2, #0
 8003866:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800386a:	488a      	ldr	r0, [pc, #552]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 800386c:	f7fd fd94 	bl	8001398 <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8003870:	2201      	movs	r2, #1
 8003872:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003876:	4887      	ldr	r0, [pc, #540]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003878:	f7fd fd8e 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 800387c:	e18d      	b.n	8003b9a <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 800387e:	2200      	movs	r2, #0
 8003880:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003884:	4883      	ldr	r0, [pc, #524]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003886:	f7fd fd87 	bl	8001398 <HAL_GPIO_WritePin>
 800388a:	2200      	movs	r2, #0
 800388c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003890:	4880      	ldr	r0, [pc, #512]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003892:	f7fd fd81 	bl	8001398 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8003896:	2201      	movs	r2, #1
 8003898:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800389c:	487d      	ldr	r0, [pc, #500]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 800389e:	f7fd fd7b 	bl	8001398 <HAL_GPIO_WritePin>
 80038a2:	2201      	movs	r2, #1
 80038a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038a8:	487a      	ldr	r0, [pc, #488]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80038aa:	f7fd fd75 	bl	8001398 <HAL_GPIO_WritePin>
 80038ae:	2201      	movs	r2, #1
 80038b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038b4:	4877      	ldr	r0, [pc, #476]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80038b6:	f7fd fd6f 	bl	8001398 <HAL_GPIO_WritePin>
 80038ba:	2201      	movs	r2, #1
 80038bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038c0:	4874      	ldr	r0, [pc, #464]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80038c2:	f7fd fd69 	bl	8001398 <HAL_GPIO_WritePin>
 80038c6:	2201      	movs	r2, #1
 80038c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038cc:	4871      	ldr	r0, [pc, #452]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80038ce:	f7fd fd63 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 80038d2:	e162      	b.n	8003b9a <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 80038d4:	2200      	movs	r2, #0
 80038d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038da:	486e      	ldr	r0, [pc, #440]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80038dc:	f7fd fd5c 	bl	8001398 <HAL_GPIO_WritePin>
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80038e6:	486b      	ldr	r0, [pc, #428]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80038e8:	f7fd fd56 	bl	8001398 <HAL_GPIO_WritePin>
 80038ec:	2200      	movs	r2, #0
 80038ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038f2:	4868      	ldr	r0, [pc, #416]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80038f4:	f7fd fd50 	bl	8001398 <HAL_GPIO_WritePin>
 80038f8:	2200      	movs	r2, #0
 80038fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038fe:	4865      	ldr	r0, [pc, #404]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003900:	f7fd fd4a 	bl	8001398 <HAL_GPIO_WritePin>
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800390a:	4862      	ldr	r0, [pc, #392]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 800390c:	f7fd fd44 	bl	8001398 <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8003910:	2201      	movs	r2, #1
 8003912:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003916:	485f      	ldr	r0, [pc, #380]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003918:	f7fd fd3e 	bl	8001398 <HAL_GPIO_WritePin>
 800391c:	2201      	movs	r2, #1
 800391e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003922:	485c      	ldr	r0, [pc, #368]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003924:	f7fd fd38 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 8003928:	e137      	b.n	8003b9a <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 800392a:	2200      	movs	r2, #0
 800392c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003930:	4858      	ldr	r0, [pc, #352]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003932:	f7fd fd31 	bl	8001398 <HAL_GPIO_WritePin>
 8003936:	2200      	movs	r2, #0
 8003938:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800393c:	4855      	ldr	r0, [pc, #340]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 800393e:	f7fd fd2b 	bl	8001398 <HAL_GPIO_WritePin>
 8003942:	2200      	movs	r2, #0
 8003944:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003948:	4852      	ldr	r0, [pc, #328]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 800394a:	f7fd fd25 	bl	8001398 <HAL_GPIO_WritePin>
 800394e:	2200      	movs	r2, #0
 8003950:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003954:	484f      	ldr	r0, [pc, #316]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003956:	f7fd fd1f 	bl	8001398 <HAL_GPIO_WritePin>
 800395a:	2200      	movs	r2, #0
 800395c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003960:	484c      	ldr	r0, [pc, #304]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003962:	f7fd fd19 	bl	8001398 <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8003966:	2201      	movs	r2, #1
 8003968:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800396c:	4849      	ldr	r0, [pc, #292]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 800396e:	f7fd fd13 	bl	8001398 <HAL_GPIO_WritePin>
 8003972:	2201      	movs	r2, #1
 8003974:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003978:	4846      	ldr	r0, [pc, #280]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 800397a:	f7fd fd0d 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 800397e:	e10c      	b.n	8003b9a <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8003980:	2200      	movs	r2, #0
 8003982:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003986:	4843      	ldr	r0, [pc, #268]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003988:	f7fd fd06 	bl	8001398 <HAL_GPIO_WritePin>
 800398c:	2200      	movs	r2, #0
 800398e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003992:	4840      	ldr	r0, [pc, #256]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003994:	f7fd fd00 	bl	8001398 <HAL_GPIO_WritePin>
 8003998:	2200      	movs	r2, #0
 800399a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800399e:	483d      	ldr	r0, [pc, #244]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80039a0:	f7fd fcfa 	bl	8001398 <HAL_GPIO_WritePin>
 80039a4:	2200      	movs	r2, #0
 80039a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039aa:	483a      	ldr	r0, [pc, #232]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80039ac:	f7fd fcf4 	bl	8001398 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 80039b0:	2201      	movs	r2, #1
 80039b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039b6:	4837      	ldr	r0, [pc, #220]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80039b8:	f7fd fcee 	bl	8001398 <HAL_GPIO_WritePin>
 80039bc:	2201      	movs	r2, #1
 80039be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039c2:	4834      	ldr	r0, [pc, #208]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80039c4:	f7fd fce8 	bl	8001398 <HAL_GPIO_WritePin>
 80039c8:	2201      	movs	r2, #1
 80039ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039ce:	4831      	ldr	r0, [pc, #196]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80039d0:	f7fd fce2 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 80039d4:	e0e1      	b.n	8003b9a <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 80039d6:	2200      	movs	r2, #0
 80039d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039dc:	482d      	ldr	r0, [pc, #180]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80039de:	f7fd fcdb 	bl	8001398 <HAL_GPIO_WritePin>
 80039e2:	2200      	movs	r2, #0
 80039e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039e8:	482a      	ldr	r0, [pc, #168]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80039ea:	f7fd fcd5 	bl	8001398 <HAL_GPIO_WritePin>
 80039ee:	2200      	movs	r2, #0
 80039f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80039f4:	4827      	ldr	r0, [pc, #156]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 80039f6:	f7fd fccf 	bl	8001398 <HAL_GPIO_WritePin>
 80039fa:	2200      	movs	r2, #0
 80039fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a00:	4824      	ldr	r0, [pc, #144]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003a02:	f7fd fcc9 	bl	8001398 <HAL_GPIO_WritePin>
 8003a06:	2200      	movs	r2, #0
 8003a08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a0c:	4821      	ldr	r0, [pc, #132]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003a0e:	f7fd fcc3 	bl	8001398 <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8003a12:	2201      	movs	r2, #1
 8003a14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a18:	481e      	ldr	r0, [pc, #120]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003a1a:	f7fd fcbd 	bl	8001398 <HAL_GPIO_WritePin>
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a24:	481b      	ldr	r0, [pc, #108]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003a26:	f7fd fcb7 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 8003a2a:	e0b6      	b.n	8003b9a <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a32:	4818      	ldr	r0, [pc, #96]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003a34:	f7fd fcb0 	bl	8001398 <HAL_GPIO_WritePin>
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a3e:	4815      	ldr	r0, [pc, #84]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003a40:	f7fd fcaa 	bl	8001398 <HAL_GPIO_WritePin>
 8003a44:	2200      	movs	r2, #0
 8003a46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a4a:	4812      	ldr	r0, [pc, #72]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003a4c:	f7fd fca4 	bl	8001398 <HAL_GPIO_WritePin>
 8003a50:	2200      	movs	r2, #0
 8003a52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a56:	480f      	ldr	r0, [pc, #60]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003a58:	f7fd fc9e 	bl	8001398 <HAL_GPIO_WritePin>
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a62:	480c      	ldr	r0, [pc, #48]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003a64:	f7fd fc98 	bl	8001398 <HAL_GPIO_WritePin>
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a6e:	4809      	ldr	r0, [pc, #36]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003a70:	f7fd fc92 	bl	8001398 <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8003a74:	2201      	movs	r2, #1
 8003a76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a7a:	4806      	ldr	r0, [pc, #24]	@ (8003a94 <_7SEG_SetNumber+0x68c>)
 8003a7c:	f7fd fc8c 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 8003a80:	e08b      	b.n	8003b9a <_7SEG_SetNumber+0x792>
 8003a82:	bf00      	nop
 8003a84:	40020c00 	.word	0x40020c00
 8003a88:	40020000 	.word	0x40020000
 8003a8c:	40020800 	.word	0x40020800
 8003a90:	66666667 	.word	0x66666667
 8003a94:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a9e:	484a      	ldr	r0, [pc, #296]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003aa0:	f7fd fc7a 	bl	8001398 <HAL_GPIO_WritePin>
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003aaa:	4847      	ldr	r0, [pc, #284]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003aac:	f7fd fc74 	bl	8001398 <HAL_GPIO_WritePin>
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ab6:	4844      	ldr	r0, [pc, #272]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003ab8:	f7fd fc6e 	bl	8001398 <HAL_GPIO_WritePin>
 8003abc:	2200      	movs	r2, #0
 8003abe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ac2:	4841      	ldr	r0, [pc, #260]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003ac4:	f7fd fc68 	bl	8001398 <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ace:	483e      	ldr	r0, [pc, #248]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003ad0:	f7fd fc62 	bl	8001398 <HAL_GPIO_WritePin>
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ada:	483b      	ldr	r0, [pc, #236]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003adc:	f7fd fc5c 	bl	8001398 <HAL_GPIO_WritePin>
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ae6:	4838      	ldr	r0, [pc, #224]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003ae8:	f7fd fc56 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 8003aec:	e055      	b.n	8003b9a <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8003aee:	2200      	movs	r2, #0
 8003af0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003af4:	4834      	ldr	r0, [pc, #208]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003af6:	f7fd fc4f 	bl	8001398 <HAL_GPIO_WritePin>
 8003afa:	2200      	movs	r2, #0
 8003afc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b00:	4831      	ldr	r0, [pc, #196]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b02:	f7fd fc49 	bl	8001398 <HAL_GPIO_WritePin>
 8003b06:	2200      	movs	r2, #0
 8003b08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b0c:	482e      	ldr	r0, [pc, #184]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b0e:	f7fd fc43 	bl	8001398 <HAL_GPIO_WritePin>
 8003b12:	2200      	movs	r2, #0
 8003b14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b18:	482b      	ldr	r0, [pc, #172]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b1a:	f7fd fc3d 	bl	8001398 <HAL_GPIO_WritePin>
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b24:	4828      	ldr	r0, [pc, #160]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b26:	f7fd fc37 	bl	8001398 <HAL_GPIO_WritePin>
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b30:	4825      	ldr	r0, [pc, #148]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b32:	f7fd fc31 	bl	8001398 <HAL_GPIO_WritePin>
 8003b36:	2200      	movs	r2, #0
 8003b38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b3c:	4822      	ldr	r0, [pc, #136]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b3e:	f7fd fc2b 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 8003b42:	e02a      	b.n	8003b9a <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8003b44:	2200      	movs	r2, #0
 8003b46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b4a:	481f      	ldr	r0, [pc, #124]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b4c:	f7fd fc24 	bl	8001398 <HAL_GPIO_WritePin>
 8003b50:	2200      	movs	r2, #0
 8003b52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b56:	481c      	ldr	r0, [pc, #112]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b58:	f7fd fc1e 	bl	8001398 <HAL_GPIO_WritePin>
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b62:	4819      	ldr	r0, [pc, #100]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b64:	f7fd fc18 	bl	8001398 <HAL_GPIO_WritePin>
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b6e:	4816      	ldr	r0, [pc, #88]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b70:	f7fd fc12 	bl	8001398 <HAL_GPIO_WritePin>
 8003b74:	2200      	movs	r2, #0
 8003b76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b7a:	4813      	ldr	r0, [pc, #76]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b7c:	f7fd fc0c 	bl	8001398 <HAL_GPIO_WritePin>
 8003b80:	2200      	movs	r2, #0
 8003b82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b86:	4810      	ldr	r0, [pc, #64]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b88:	f7fd fc06 	bl	8001398 <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b92:	480d      	ldr	r0, [pc, #52]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003b94:	f7fd fc00 	bl	8001398 <HAL_GPIO_WritePin>
				break;
 8003b98:	bf00      	nop
		if(dp == ON)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d106      	bne.n	8003bae <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003ba6:	4808      	ldr	r0, [pc, #32]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003ba8:	f7fd fbf6 	bl	8001398 <HAL_GPIO_WritePin>
}
 8003bac:	e008      	b.n	8003bc0 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d105      	bne.n	8003bc0 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003bba:	4803      	ldr	r0, [pc, #12]	@ (8003bc8 <_7SEG_SetNumber+0x7c0>)
 8003bbc:	f7fd fbec 	bl	8001398 <HAL_GPIO_WritePin>
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40021000 	.word	0x40021000

08003bcc <update>:


#include "button.h"

static void update(Button* this)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(this->GPIOx, this->GPIO_Pin) == GPIO_PIN_SET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	889b      	ldrh	r3, [r3, #4]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f7fd fbc2 	bl	8001368 <HAL_GPIO_ReadPin>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d10a      	bne.n	8003c00 <update+0x34>
	{
		if (this->_is_pressed == false) this->_is_pressed = true;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	799b      	ldrb	r3, [r3, #6]
 8003bee:	f083 0301 	eor.w	r3, r3, #1
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <update+0x42>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		if (this->_is_pressed == true) this->_is_pressed = false;
	}
}
 8003bfe:	e006      	b.n	8003c0e <update+0x42>
		if (this->_is_pressed == true) this->_is_pressed = false;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	799b      	ldrb	r3, [r3, #6]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <update+0x42>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	719a      	strb	r2, [r3, #6]
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <is_pressed>:

static bool is_pressed(Button* this)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
	return this->_is_pressed;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	799b      	ldrb	r3, [r3, #6]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <get_button_1>:
static Button button_2 = { BUTTON_2_GPIO_Port, BUTTON_2_Pin, false, update, is_pressed };
static Button button_3 = { BUTTON_3_GPIO_Port, BUTTON_3_Pin, false, update, is_pressed };
static Button button_4 = { BUTTON_4_GPIO_Port, BUTTON_4_Pin, false, update, is_pressed };

Button* get_button_1(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
	return &button_1;
 8003c34:	4b02      	ldr	r3, [pc, #8]	@ (8003c40 <get_button_1+0x10>)
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	2000000c 	.word	0x2000000c

08003c44 <get_button_2>:

Button* get_button_2(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
	return &button_2;
 8003c48:	4b02      	ldr	r3, [pc, #8]	@ (8003c54 <get_button_2+0x10>)
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	2000001c 	.word	0x2000001c

08003c58 <get_button_3>:

Button* get_button_3(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
	return &button_3;
 8003c5c:	4b02      	ldr	r3, [pc, #8]	@ (8003c68 <get_button_3+0x10>)
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	2000002c 	.word	0x2000002c

08003c6c <get_button_4>:

Button* get_button_4(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
	return &button_4;
 8003c70:	4b02      	ldr	r3, [pc, #8]	@ (8003c7c <get_button_4+0x10>)
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	2000003c 	.word	0x2000003c

08003c80 <turn_on_left>:
Led right_red   = { .GPIOx = RIGHT_RED_GPIO_Port,   .GPIO_Pin = RIGHT_RED_Pin,   .previous_button = false, .operate = turn_off_right };
Led right_green = { .GPIOx = RIGHT_GREEN_GPIO_Port, .GPIO_Pin = RIGHT_GREEN_Pin, .previous_button = false, .operate = turn_off_right };
Led right_blue  = { .GPIOx = RIGHT_BLUE_GPIO_Port,  .GPIO_Pin = RIGHT_BLUE_Pin,  .previous_button = false, .operate = turn_off_right };

static void turn_on_left(Led* this, Button* button)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
	TURN_ON_LED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	889b      	ldrh	r3, [r3, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	4619      	mov	r1, r3
 8003c96:	f7fd fb7f 	bl	8001398 <HAL_GPIO_WritePin>

	if (this->previous_button == false && button->is_pressed(button) == true)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	799b      	ldrb	r3, [r3, #6]
 8003c9e:	f083 0301 	eor.w	r3, r3, #1
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <turn_on_left+0x3c>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	6838      	ldr	r0, [r7, #0]
 8003cae:	4798      	blx	r3
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <turn_on_left+0x3c>
	{
		this->operate = turn_off_left;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a06      	ldr	r2, [pc, #24]	@ (8003cd4 <turn_on_left+0x54>)
 8003cba:	609a      	str	r2, [r3, #8]
	}

	this->previous_button = button->is_pressed(button);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	6838      	ldr	r0, [r7, #0]
 8003cc2:	4798      	blx	r3
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	719a      	strb	r2, [r3, #6]
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	08003cd9 	.word	0x08003cd9

08003cd8 <turn_off_left>:

static void turn_off_left(Led* this, Button* button)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
	TURN_OFF_LED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	889b      	ldrh	r3, [r3, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	4619      	mov	r1, r3
 8003cee:	f7fd fb53 	bl	8001398 <HAL_GPIO_WritePin>

	if (this->previous_button == false && button->is_pressed(button) == true)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	799b      	ldrb	r3, [r3, #6]
 8003cf6:	f083 0301 	eor.w	r3, r3, #1
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d009      	beq.n	8003d14 <turn_off_left+0x3c>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	6838      	ldr	r0, [r7, #0]
 8003d06:	4798      	blx	r3
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <turn_off_left+0x3c>
	{
		this->operate = turn_on_left;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a06      	ldr	r2, [pc, #24]	@ (8003d2c <turn_off_left+0x54>)
 8003d12:	609a      	str	r2, [r3, #8]
	}

	this->previous_button = button->is_pressed(button);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	6838      	ldr	r0, [r7, #0]
 8003d1a:	4798      	blx	r3
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	461a      	mov	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	719a      	strb	r2, [r3, #6]
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	08003c81 	.word	0x08003c81

08003d30 <turn_on_right>:

static void turn_on_right(Led* this, Button* button)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
	TURN_ON_LED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	889b      	ldrh	r3, [r3, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	4619      	mov	r1, r3
 8003d46:	f7fd fb27 	bl	8001398 <HAL_GPIO_WritePin>

	if (this->previous_button == true && button->is_pressed(button) == false)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	799b      	ldrb	r3, [r3, #6]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00c      	beq.n	8003d6c <turn_on_right+0x3c>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	6838      	ldr	r0, [r7, #0]
 8003d58:	4798      	blx	r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f083 0301 	eor.w	r3, r3, #1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <turn_on_right+0x3c>
	{
		this->operate = turn_off_right;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a06      	ldr	r2, [pc, #24]	@ (8003d84 <turn_on_right+0x54>)
 8003d6a:	609a      	str	r2, [r3, #8]
	}

	this->previous_button = button->is_pressed(button);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	6838      	ldr	r0, [r7, #0]
 8003d72:	4798      	blx	r3
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	719a      	strb	r2, [r3, #6]
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	08003d89 	.word	0x08003d89

08003d88 <turn_off_right>:

static void turn_off_right(Led* this, Button* button)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
	TURN_OFF_LED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	889b      	ldrh	r3, [r3, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f7fd fafb 	bl	8001398 <HAL_GPIO_WritePin>

	if (this->previous_button == true && button->is_pressed(button) == false)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	799b      	ldrb	r3, [r3, #6]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00c      	beq.n	8003dc4 <turn_off_right+0x3c>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	6838      	ldr	r0, [r7, #0]
 8003db0:	4798      	blx	r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	f083 0301 	eor.w	r3, r3, #1
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <turn_off_right+0x3c>
	{
		this->operate = turn_on_right;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a06      	ldr	r2, [pc, #24]	@ (8003ddc <turn_off_right+0x54>)
 8003dc2:	609a      	str	r2, [r3, #8]
	}

	this->previous_button = button->is_pressed(button);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	6838      	ldr	r0, [r7, #0]
 8003dca:	4798      	blx	r3
 8003dcc:	4603      	mov	r3, r0
 8003dce:	461a      	mov	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	719a      	strb	r2, [r3, #6]
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	08003d31 	.word	0x08003d31

08003de0 <get_left_red>:

Led* get_left_red(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
	return &left_red;
 8003de4:	4b02      	ldr	r3, [pc, #8]	@ (8003df0 <get_left_red+0x10>)
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	2000004c 	.word	0x2000004c

08003df4 <get_left_green>:

Led* get_left_green(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
	return &left_green;
 8003df8:	4b02      	ldr	r3, [pc, #8]	@ (8003e04 <get_left_green+0x10>)
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	20000058 	.word	0x20000058

08003e08 <get_left_blue>:

Led* get_left_blue(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
	return &left_blue;
 8003e0c:	4b02      	ldr	r3, [pc, #8]	@ (8003e18 <get_left_blue+0x10>)
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	20000064 	.word	0x20000064

08003e1c <get_right_red>:

Led* get_right_red (void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
	return &right_red ;
 8003e20:	4b02      	ldr	r3, [pc, #8]	@ (8003e2c <get_right_red+0x10>)
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20000070 	.word	0x20000070

08003e30 <stop>:
static void run(SevenSegment* this);

SevenSegment segment = { .operate = stop };

static void stop(SevenSegment* this)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	Button* button_2 = GET_INSTANCE(button_2);
 8003e38:	f7ff ff04 	bl	8003c44 <get_button_2>
 8003e3c:	60f8      	str	r0, [r7, #12]
	Timer* timer = GET_INSTANCE(timer);
 8003e3e:	f000 f991 	bl	8004164 <get_timer>
 8003e42:	60b8      	str	r0, [r7, #8]
	static bool previous_button_state = false;

	DGT1_DP_ON;
 8003e44:	2200      	movs	r2, #0
 8003e46:	2180      	movs	r1, #128	@ 0x80
 8003e48:	481f      	ldr	r0, [pc, #124]	@ (8003ec8 <stop+0x98>)
 8003e4a:	f7fd faa5 	bl	8001398 <HAL_GPIO_WritePin>
	DGT2_DP_OFF;
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e54:	481d      	ldr	r0, [pc, #116]	@ (8003ecc <stop+0x9c>)
 8003e56:	f7fd fa9f 	bl	8001398 <HAL_GPIO_WritePin>

	timer->set_count(timer, 0);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	2100      	movs	r1, #0
 8003e60:	68b8      	ldr	r0, [r7, #8]
 8003e62:	4798      	blx	r3

	_7SEG_SetNumber(DGT1, timer->get_seconds(timer), ON);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	68b8      	ldr	r0, [r7, #8]
 8003e6a:	4798      	blx	r3
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2201      	movs	r2, #1
 8003e70:	4619      	mov	r1, r3
 8003e72:	2000      	movs	r0, #0
 8003e74:	f7ff fac8 	bl	8003408 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, timer->get_milliseconds(timer), OFF);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	68b8      	ldr	r0, [r7, #8]
 8003e7e:	4798      	blx	r3
 8003e80:	4603      	mov	r3, r0
 8003e82:	2200      	movs	r2, #0
 8003e84:	4619      	mov	r1, r3
 8003e86:	2001      	movs	r0, #1
 8003e88:	f7ff fabe 	bl	8003408 <_7SEG_SetNumber>

	if (previous_button_state == false && button_2->is_pressed(button_2) == true)
 8003e8c:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <stop+0xa0>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	f083 0301 	eor.w	r3, r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <stop+0x7e>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	4798      	blx	r3
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <stop+0x7e>
	{
		this->operate = run;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed4 <stop+0xa4>)
 8003eac:	601a      	str	r2, [r3, #0]
	}

	previous_button_state = button_2->is_pressed(button_2);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	4798      	blx	r3
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b05      	ldr	r3, [pc, #20]	@ (8003ed0 <stop+0xa0>)
 8003ebc:	701a      	strb	r2, [r3, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40020c00 	.word	0x40020c00
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	20000174 	.word	0x20000174
 8003ed4:	08003f9d 	.word	0x08003f9d

08003ed8 <pause>:

static void pause(SevenSegment* this)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	Button* button_2 = GET_INSTANCE(button_2);
 8003ee0:	f7ff feb0 	bl	8003c44 <get_button_2>
 8003ee4:	6178      	str	r0, [r7, #20]
	Button* button_3 = GET_INSTANCE(button_3);
 8003ee6:	f7ff feb7 	bl	8003c58 <get_button_3>
 8003eea:	6138      	str	r0, [r7, #16]
	Timer* timer = GET_INSTANCE(timer);
 8003eec:	f000 f93a 	bl	8004164 <get_timer>
 8003ef0:	60f8      	str	r0, [r7, #12]
	static bool previous_button_state_2 = false;
	static bool previous_button_state_3 = false;

	DGT1_DP_ON;
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2180      	movs	r1, #128	@ 0x80
 8003ef6:	4824      	ldr	r0, [pc, #144]	@ (8003f88 <pause+0xb0>)
 8003ef8:	f7fd fa4e 	bl	8001398 <HAL_GPIO_WritePin>

	if (previous_button_state_2 == false && button_2->is_pressed(button_2) == true)
 8003efc:	4b23      	ldr	r3, [pc, #140]	@ (8003f8c <pause+0xb4>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	f083 0301 	eor.w	r3, r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d013      	beq.n	8003f32 <pause+0x5a>
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	6978      	ldr	r0, [r7, #20]
 8003f10:	4798      	blx	r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00c      	beq.n	8003f32 <pause+0x5a>
	{
		timer->set_count(timer, timer->get_recorded_count(timer));
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68dc      	ldr	r4, [r3, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	4798      	blx	r3
 8003f24:	4603      	mov	r3, r0
 8003f26:	4619      	mov	r1, r3
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	47a0      	blx	r4
		this->operate = run;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a18      	ldr	r2, [pc, #96]	@ (8003f90 <pause+0xb8>)
 8003f30:	601a      	str	r2, [r3, #0]
	}

	if (previous_button_state_3 == false && button_3->is_pressed(button_3) == true)
 8003f32:	4b18      	ldr	r3, [pc, #96]	@ (8003f94 <pause+0xbc>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	f083 0301 	eor.w	r3, r3, #1
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00e      	beq.n	8003f5e <pause+0x86>
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	6938      	ldr	r0, [r7, #16]
 8003f46:	4798      	blx	r3
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <pause+0x86>
	{
		timer->set_count(timer, 0);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2100      	movs	r1, #0
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	4798      	blx	r3
		this->operate = stop;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8003f98 <pause+0xc0>)
 8003f5c:	601a      	str	r2, [r3, #0]
	}

	previous_button_state_2 = button_2->is_pressed(button_2);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	6978      	ldr	r0, [r7, #20]
 8003f64:	4798      	blx	r3
 8003f66:	4603      	mov	r3, r0
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b08      	ldr	r3, [pc, #32]	@ (8003f8c <pause+0xb4>)
 8003f6c:	701a      	strb	r2, [r3, #0]
	previous_button_state_3 = button_3->is_pressed(button_3);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	6938      	ldr	r0, [r7, #16]
 8003f74:	4798      	blx	r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <pause+0xbc>)
 8003f7c:	701a      	strb	r2, [r3, #0]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd90      	pop	{r4, r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40020c00 	.word	0x40020c00
 8003f8c:	20000175 	.word	0x20000175
 8003f90:	08003f9d 	.word	0x08003f9d
 8003f94:	20000176 	.word	0x20000176
 8003f98:	08003e31 	.word	0x08003e31

08003f9c <run>:

static void run(SevenSegment* this)
{
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	Button* button_2 = GET_INSTANCE(button_2);
 8003fa4:	f7ff fe4e 	bl	8003c44 <get_button_2>
 8003fa8:	60f8      	str	r0, [r7, #12]
	Timer* timer = GET_INSTANCE(timer);
 8003faa:	f000 f8db 	bl	8004164 <get_timer>
 8003fae:	60b8      	str	r0, [r7, #8]
	static bool previous_button_state = false;

	_7SEG_SetNumber(DGT1, timer->get_seconds(timer), timer->get_milliseconds(timer) < 5 ? ON : OFF);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	68b8      	ldr	r0, [r7, #8]
 8003fb6:	4798      	blx	r3
 8003fb8:	4603      	mov	r3, r0
 8003fba:	461c      	mov	r4, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	68b8      	ldr	r0, [r7, #8]
 8003fc2:	4798      	blx	r3
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	bf94      	ite	ls
 8003fca:	2301      	movls	r3, #1
 8003fcc:	2300      	movhi	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f7ff fa17 	bl	8003408 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, timer->get_milliseconds(timer), OFF);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	68b8      	ldr	r0, [r7, #8]
 8003fe0:	4798      	blx	r3
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f7ff fa0d 	bl	8003408 <_7SEG_SetNumber>

	if (previous_button_state == false && button_2->is_pressed(button_2) == true)
 8003fee:	4b10      	ldr	r3, [pc, #64]	@ (8004030 <run+0x94>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	f083 0301 	eor.w	r3, r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00d      	beq.n	8004018 <run+0x7c>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	4798      	blx	r3
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d006      	beq.n	8004018 <run+0x7c>
	{
		timer->record_count(timer);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	68b8      	ldr	r0, [r7, #8]
 8004010:	4798      	blx	r3
		this->operate = pause;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a07      	ldr	r2, [pc, #28]	@ (8004034 <run+0x98>)
 8004016:	601a      	str	r2, [r3, #0]
	}

	previous_button_state = button_2->is_pressed(button_2);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	4798      	blx	r3
 8004020:	4603      	mov	r3, r0
 8004022:	461a      	mov	r2, r3
 8004024:	4b02      	ldr	r3, [pc, #8]	@ (8004030 <run+0x94>)
 8004026:	701a      	strb	r2, [r3, #0]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	bd90      	pop	{r4, r7, pc}
 8004030:	20000177 	.word	0x20000177
 8004034:	08003ed9 	.word	0x08003ed9

08004038 <get_segment>:

SevenSegment* get_segment(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
	return &segment;
 800403c:	4b02      	ldr	r3, [pc, #8]	@ (8004048 <get_segment+0x10>)
}
 800403e:	4618      	mov	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	2000007c 	.word	0x2000007c

0800404c <count_up>:


#include "timer.h"

static void count_up(Timer* this)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	this->count++;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	601a      	str	r2, [r3, #0]
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <set_count>:

static void set_count(Timer* this, uint32_t count)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
	this->count = count;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	601a      	str	r2, [r3, #0]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <record_count>:

static void record_count(Timer* this)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
	this->recorded_count = this->count;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	605a      	str	r2, [r3, #4]
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <get_recorded_count>:

static uint32_t get_recorded_count(Timer* this)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
	return this->recorded_count;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <get_milliseconds>:

static uint8_t get_milliseconds(Timer* this)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	return this->count % 10;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6819      	ldr	r1, [r3, #0]
 80040c8:	4b07      	ldr	r3, [pc, #28]	@ (80040e8 <get_milliseconds+0x2c>)
 80040ca:	fba3 2301 	umull	r2, r3, r3, r1
 80040ce:	08da      	lsrs	r2, r3, #3
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	1aca      	subs	r2, r1, r3
 80040da:	b2d3      	uxtb	r3, r2
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	cccccccd 	.word	0xcccccccd

080040ec <get_senconds>:

static uint8_t get_senconds(Timer* this)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	return this->count / 10;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a05      	ldr	r2, [pc, #20]	@ (8004110 <get_senconds+0x24>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	08db      	lsrs	r3, r3, #3
 8004100:	b2db      	uxtb	r3, r3
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	cccccccd 	.word	0xcccccccd

08004114 <get_minutes>:

static uint8_t get_minutes(Timer* this)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	return this->count / 60000;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a05      	ldr	r2, [pc, #20]	@ (8004138 <get_minutes+0x24>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	0b9b      	lsrs	r3, r3, #14
 8004128:	b2db      	uxtb	r3, r3
}
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	45e7b273 	.word	0x45e7b273

0800413c <get_hours>:

static uint8_t get_hours(Timer* this)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	return this->count / 3600000;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a05      	ldr	r2, [pc, #20]	@ (8004160 <get_hours+0x24>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	0d5b      	lsrs	r3, r3, #21
 8004150:	b2db      	uxtb	r3, r3
}
 8004152:	4618      	mov	r0, r3
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	95217cb1 	.word	0x95217cb1

08004164 <get_timer>:
		get_minutes,
		get_hours
};

Timer* get_timer(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
	return &timer;
 8004168:	4b02      	ldr	r3, [pc, #8]	@ (8004174 <get_timer+0x10>)
}
 800416a:	4618      	mov	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	20000080 	.word	0x20000080

08004178 <receive>:
#include "uart.h"

extern UART_HandleTypeDef huart3;

static void receive(Uart* this)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(this->huart, this->pData, this->Size);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	891b      	ldrh	r3, [r3, #8]
 800418c:	461a      	mov	r2, r3
 800418e:	f7fe f931 	bl	80023f4 <HAL_UART_Receive_IT>
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <get_data>:

static uint8_t get_data(Uart* this)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
	return *this->pData;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	781b      	ldrb	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <reset_data>:

static void reset_data(Uart* this)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	*(this->pData) = 0;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <get_uart>:
static uint8_t data;

static Uart uart = { &huart3, &data, 1, NULL, receive, get_data, reset_data };

Uart* get_uart(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
	return &uart;
 80041d4:	4b02      	ldr	r3, [pc, #8]	@ (80041e0 <get_uart+0x10>)
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	200000a8 	.word	0x200000a8

080041e4 <memset>:
 80041e4:	4402      	add	r2, r0
 80041e6:	4603      	mov	r3, r0
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d100      	bne.n	80041ee <memset+0xa>
 80041ec:	4770      	bx	lr
 80041ee:	f803 1b01 	strb.w	r1, [r3], #1
 80041f2:	e7f9      	b.n	80041e8 <memset+0x4>

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4d0d      	ldr	r5, [pc, #52]	@ (800422c <__libc_init_array+0x38>)
 80041f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004230 <__libc_init_array+0x3c>)
 80041fa:	1b64      	subs	r4, r4, r5
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	2600      	movs	r6, #0
 8004200:	42a6      	cmp	r6, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	4d0b      	ldr	r5, [pc, #44]	@ (8004234 <__libc_init_array+0x40>)
 8004206:	4c0c      	ldr	r4, [pc, #48]	@ (8004238 <__libc_init_array+0x44>)
 8004208:	f000 f818 	bl	800423c <_init>
 800420c:	1b64      	subs	r4, r4, r5
 800420e:	10a4      	asrs	r4, r4, #2
 8004210:	2600      	movs	r6, #0
 8004212:	42a6      	cmp	r6, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	f855 3b04 	ldr.w	r3, [r5], #4
 800421c:	4798      	blx	r3
 800421e:	3601      	adds	r6, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	f855 3b04 	ldr.w	r3, [r5], #4
 8004226:	4798      	blx	r3
 8004228:	3601      	adds	r6, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	08004274 	.word	0x08004274
 8004230:	08004274 	.word	0x08004274
 8004234:	08004274 	.word	0x08004274
 8004238:	08004278 	.word	0x08004278

0800423c <_init>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr

08004248 <_fini>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr
