
Challenge 3. Stopwatch - Display Time on CLCD and Save and Display Lap Times.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000457c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004704  08004704  00005704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800471c  0800471c  000060ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800471c  0800471c  0000571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004724  08004724  000060ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004724  08004724  00005724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004728  08004728  00005728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  0800472c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000060ac  2**0
                  CONTENTS
 10 .bss          000000c4  200000ac  200000ac  000060ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000170  20000170  000060ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5fe  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027f0  00000000  00000000  000156da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00017ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b19  00000000  00000000  00018d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e86  00000000  00000000  00019849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000120d6  00000000  00000000  0003b6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc3bf  00000000  00000000  0004d7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119b64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a78  00000000  00000000  00119ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  0011d620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ac 	.word	0x200000ac
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046ec 	.word	0x080046ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b0 	.word	0x200000b0
 80001c4:	080046ec 	.word	0x080046ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fcc1 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f83f 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f933 	bl	8000730 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004ca:	f000 f907 	bl	80006dc <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80004ce:	f000 f8cf 	bl	8000670 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004d2:	f000 f8a1 	bl	8000618 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80004d6:	481a      	ldr	r0, [pc, #104]	@ (8000540 <main+0x88>)
 80004d8:	f001 fdbc 	bl	8002054 <HAL_TIM_Base_Start_IT>
  _7SEG_GPIO_Init();
 80004dc:	f002 fff2 	bl	80034c4 <_7SEG_GPIO_Init>
  CLCD_GPIO_Init();
 80004e0:	f000 fb74 	bl	8000bcc <CLCD_GPIO_Init>
  CLCD_Init();
 80004e4:	f000 fc8c 	bl	8000e00 <CLCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  DigitalClock* clock = GET_INSTANCE(clock);
 80004e8:	f003 ff20 	bl	800432c <get_clock>
 80004ec:	6178      	str	r0, [r7, #20]
  SevenSegment* segment = GET_INSTANCE(segment);
 80004ee:	f004 f86b 	bl	80045c8 <get_segment>
 80004f2:	6138      	str	r0, [r7, #16]

	Button* button_1 = GET_INSTANCE(button_1);
 80004f4:	f004 f8a6 	bl	8004644 <get_button_1>
 80004f8:	60f8      	str	r0, [r7, #12]
	Button* button_2 = GET_INSTANCE(button_2);
 80004fa:	f004 f8ad 	bl	8004658 <get_button_2>
 80004fe:	60b8      	str	r0, [r7, #8]
	Button* button_3 = GET_INSTANCE(button_3);
 8000500:	f004 f8b4 	bl	800466c <get_button_3>
 8000504:	6078      	str	r0, [r7, #4]
	Button* button_4 = GET_INSTANCE(button_4);
 8000506:	f004 f8bb 	bl	8004680 <get_button_4>
 800050a:	6038      	str	r0, [r7, #0]

  while (1)
  {

	button_1->update(button_1);
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	68f8      	ldr	r0, [r7, #12]
 8000512:	4798      	blx	r3
	button_2->update(button_2);
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	68b8      	ldr	r0, [r7, #8]
 800051a:	4798      	blx	r3
		button_3->update(button_3);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	4798      	blx	r3
	button_4->update(button_4);
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	6838      	ldr	r0, [r7, #0]
 800052a:	4798      	blx	r3

	  clock->operate(clock);
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	6978      	ldr	r0, [r7, #20]
 8000532:	4798      	blx	r3
	  segment->operate(segment);
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	6938      	ldr	r0, [r7, #16]
 800053a:	4798      	blx	r3
	button_1->update(button_1);
 800053c:	bf00      	nop
 800053e:	e7e5      	b.n	800050c <main+0x54>
 8000540:	200000c8 	.word	0x200000c8

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	@ 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	@ 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f004 f89e 	bl	8004694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b28      	ldr	r3, [pc, #160]	@ (8000610 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	4a27      	ldr	r2, [pc, #156]	@ (8000610 <SystemClock_Config+0xcc>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	@ 0x40
 8000578:	4b25      	ldr	r3, [pc, #148]	@ (8000610 <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b22      	ldr	r3, [pc, #136]	@ (8000614 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a21      	ldr	r2, [pc, #132]	@ (8000614 <SystemClock_Config+0xd0>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1f      	ldr	r3, [pc, #124]	@ (8000614 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b8:	23a8      	movs	r3, #168	@ 0xa8
 80005ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 f85b 	bl	8001684 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d4:	f000 f9c7 	bl	8000966 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2105      	movs	r1, #5
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fabc 	bl	8001b74 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000602:	f000 f9b0 	bl	8000966 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	@ 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	2036      	movs	r0, #54	@ 0x36
 8000622:	f000 fd80 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000626:	2036      	movs	r0, #54	@ 0x36
 8000628:	f000 fd99 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	2027      	movs	r0, #39	@ 0x27
 8000632:	f000 fd78 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000636:	2027      	movs	r0, #39	@ 0x27
 8000638:	f000 fd91 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2100      	movs	r1, #0
 8000640:	2009      	movs	r0, #9
 8000642:	f000 fd70 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000646:	2009      	movs	r0, #9
 8000648:	f000 fd89 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	200a      	movs	r0, #10
 8000652:	f000 fd68 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000656:	200a      	movs	r0, #10
 8000658:	f000 fd81 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	2028      	movs	r0, #40	@ 0x28
 8000662:	f000 fd60 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000666:	2028      	movs	r0, #40	@ 0x28
 8000668:	f000 fd79 	bl	800115e <HAL_NVIC_EnableIRQ>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000676:	463b      	mov	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800067e:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <MX_TIM6_Init+0x64>)
 8000680:	4a15      	ldr	r2, [pc, #84]	@ (80006d8 <MX_TIM6_Init+0x68>)
 8000682:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84 - 1;
 8000684:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <MX_TIM6_Init+0x64>)
 8000686:	2253      	movs	r2, #83	@ 0x53
 8000688:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068a:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_TIM6_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8000690:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_TIM6_Init+0x64>)
 8000692:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000696:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000698:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_TIM6_Init+0x64>)
 800069a:	2280      	movs	r2, #128	@ 0x80
 800069c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800069e:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <MX_TIM6_Init+0x64>)
 80006a0:	f001 fc88 	bl	8001fb4 <HAL_TIM_Base_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80006aa:	f000 f95c 	bl	8000966 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	@ (80006d4 <MX_TIM6_Init+0x64>)
 80006bc:	f001 fefe 	bl	80024bc <HAL_TIMEx_MasterConfigSynchronization>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80006c6:	f000 f94e 	bl	8000966 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000c8 	.word	0x200000c8
 80006d8:	40001000 	.word	0x40001000

080006dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART3_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <MX_USART3_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_USART3_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART3_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USART3_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART3_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART3_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USART3_UART_Init+0x4c>)
 8000714:	f001 ff62 	bl	80025dc <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f922 	bl	8000966 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000110 	.word	0x20000110
 800072c:	40004800 	.word	0x40004800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	@ 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b66      	ldr	r3, [pc, #408]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a65      	ldr	r2, [pc, #404]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b63      	ldr	r3, [pc, #396]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b5f      	ldr	r3, [pc, #380]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a5e      	ldr	r2, [pc, #376]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b5c      	ldr	r3, [pc, #368]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b58      	ldr	r3, [pc, #352]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a57      	ldr	r2, [pc, #348]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b55      	ldr	r3, [pc, #340]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b51      	ldr	r3, [pc, #324]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a50      	ldr	r2, [pc, #320]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b4e      	ldr	r3, [pc, #312]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b4a      	ldr	r3, [pc, #296]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a49      	ldr	r2, [pc, #292]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b47      	ldr	r3, [pc, #284]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b43      	ldr	r3, [pc, #268]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a42      	ldr	r2, [pc, #264]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b40      	ldr	r3, [pc, #256]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CLCD_3_Pin|CLCD_3E4_Pin|CLCD_4_Pin|CLCD_5_Pin
 80007ee:	2200      	movs	r2, #0
 80007f0:	21f7      	movs	r1, #247	@ 0xf7
 80007f2:	483d      	ldr	r0, [pc, #244]	@ (80008e8 <MX_GPIO_Init+0x1b8>)
 80007f4:	f000 ff14 	bl	8001620 <HAL_GPIO_WritePin>
                          |CLCD_6_Pin|CLCD_1_Pin|CLCD_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RIGHT_BLUE_Pin|RIGHT_GREEN_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2121      	movs	r1, #33	@ 0x21
 80007fc:	483b      	ldr	r0, [pc, #236]	@ (80008ec <MX_GPIO_Init+0x1bc>)
 80007fe:	f000 ff0f 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEFT_RED_Pin|LEFT_GREEN_Pin|LEFT_BLUE_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000808:	4839      	ldr	r0, [pc, #228]	@ (80008f0 <MX_GPIO_Init+0x1c0>)
 800080a:	f000 ff09 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RIGHT_RED_GPIO_Port, RIGHT_RED_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	2140      	movs	r1, #64	@ 0x40
 8000812:	4838      	ldr	r0, [pc, #224]	@ (80008f4 <MX_GPIO_Init+0x1c4>)
 8000814:	f000 ff04 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLCD_3_Pin CLCD_3E4_Pin CLCD_4_Pin CLCD_5_Pin
                           CLCD_6_Pin CLCD_1_Pin CLCD_2_Pin */
  GPIO_InitStruct.Pin = CLCD_3_Pin|CLCD_3E4_Pin|CLCD_4_Pin|CLCD_5_Pin
 8000818:	23f7      	movs	r3, #247	@ 0xf7
 800081a:	61fb      	str	r3, [r7, #28]
                          |CLCD_6_Pin|CLCD_1_Pin|CLCD_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	482e      	ldr	r0, [pc, #184]	@ (80008e8 <MX_GPIO_Init+0x1b8>)
 8000830:	f000 fd42 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 8000834:	2308      	movs	r3, #8
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000838:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4827      	ldr	r0, [pc, #156]	@ (80008e8 <MX_GPIO_Init+0x1b8>)
 800084a:	f000 fd35 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin;
 800084e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000854:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_2_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4823      	ldr	r0, [pc, #140]	@ (80008f4 <MX_GPIO_Init+0x1c4>)
 8000866:	f000 fd27 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_BLUE_Pin RIGHT_GREEN_Pin */
  GPIO_InitStruct.Pin = RIGHT_BLUE_Pin|RIGHT_GREEN_Pin;
 800086a:	2321      	movs	r3, #33	@ 0x21
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000872:	2301      	movs	r3, #1
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000876:	2302      	movs	r3, #2
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	481a      	ldr	r0, [pc, #104]	@ (80008ec <MX_GPIO_Init+0x1bc>)
 8000882:	f000 fd19 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_3_Pin;
 8000886:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800088c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <MX_GPIO_Init+0x1c0>)
 800089e:	f000 fd0b 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_RED_Pin LEFT_GREEN_Pin LEFT_BLUE_Pin */
  GPIO_InitStruct.Pin = LEFT_RED_Pin|LEFT_GREEN_Pin|LEFT_BLUE_Pin;
 80008a2:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b0:	2302      	movs	r3, #2
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <MX_GPIO_Init+0x1c0>)
 80008bc:	f000 fcfc 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_RED_Pin */
  GPIO_InitStruct.Pin = RIGHT_RED_Pin;
 80008c0:	2340      	movs	r3, #64	@ 0x40
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008cc:	2302      	movs	r3, #2
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4807      	ldr	r0, [pc, #28]	@ (80008f4 <MX_GPIO_Init+0x1c4>)
 80008d8:	f000 fcee 	bl	80012b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3730      	adds	r7, #48	@ 0x30
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40020c00 	.word	0x40020c00
 80008f4:	40020800 	.word	0x40020800

080008f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	Uart* uart = GET_INSTANCE(uart);
 8000900:	f003 fc2c 	bl	800415c <get_uart>
 8000904:	60f8      	str	r0, [r7, #12]

	if (huart->Instance == USART3)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <HAL_UART_RxCpltCallback+0x28>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d103      	bne.n	8000918 <HAL_UART_RxCpltCallback+0x20>
	{
		uart->receive(uart);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	4798      	blx	r3
	}
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40004800 	.word	0x40004800

08000924 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	Timer* timer = GET_INSTANCE(timer);
 800092c:	f003 fbe0 	bl	80040f0 <get_timer>
 8000930:	60f8      	str	r0, [r7, #12]

	if (htim->Instance == TIM6)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a05      	ldr	r2, [pc, #20]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d103      	bne.n	8000944 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		timer->count_up(timer);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	4798      	blx	r3
	}
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40001000 	.word	0x40001000

08000950 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
//
//	if (GPIO_Pin == BUTTON_1_Pin) button_1->update(button_1);
//	if (GPIO_Pin == BUTTON_2_Pin) button_2->update(button_2);
//	if (GPIO_Pin == BUTTON_3_Pin) button_3->update(button_3);
//	if (GPIO_Pin == BUTTON_4_Pin) button_4->update(button_4);
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096a:	b672      	cpsid	i
}
 800096c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096e:	bf00      	nop
 8000970:	e7fd      	b.n	800096e <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	@ (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000988:	6453      	str	r3, [r2, #68]	@ 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	@ (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <HAL_TIM_Base_MspInit+0x3c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d10d      	bne.n	80009f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <HAL_TIM_Base_MspInit+0x40>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	4a09      	ldr	r2, [pc, #36]	@ (8000a04 <HAL_TIM_Base_MspInit+0x40>)
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e6:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <HAL_TIM_Base_MspInit+0x40>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40001000 	.word	0x40001000
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a19      	ldr	r2, [pc, #100]	@ (8000a8c <HAL_UART_MspInit+0x84>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d12c      	bne.n	8000a84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <HAL_UART_MspInit+0x88>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a17      	ldr	r2, [pc, #92]	@ (8000a90 <HAL_UART_MspInit+0x88>)
 8000a34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <HAL_UART_MspInit+0x88>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <HAL_UART_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a10      	ldr	r2, [pc, #64]	@ (8000a90 <HAL_UART_MspInit+0x88>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <HAL_UART_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a74:	2307      	movs	r3, #7
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <HAL_UART_MspInit+0x8c>)
 8000a80:	f000 fc1a 	bl	80012b8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	@ 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004800 	.word	0x40004800
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020c00 	.word	0x40020c00

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <MemManage_Handler+0x4>

08000ab0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <UsageFault_Handler+0x4>

08000ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aee:	f000 f9fb 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8000afa:	2008      	movs	r0, #8
 8000afc:	f000 fdaa 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_3_Pin);
 8000b08:	2010      	movs	r0, #16
 8000b0a:	f000 fda3 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <USART3_IRQHandler+0x10>)
 8000b1a:	f001 fdd5 	bl	80026c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000110 	.word	0x20000110

08000b28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_4_Pin);
 8000b2c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000b30:	f000 fd90 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8000b34:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000b38:	f000 fd8c 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <TIM6_DAC_IRQHandler+0x10>)
 8000b46:	f001 faf5 	bl	8002134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000c8 	.word	0x200000c8

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b7c:	f7ff ffea 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	@ (8000bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f003 fd7d 	bl	80046a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fc85 	bl	80004b8 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000bbc:	0800472c 	.word	0x0800472c
  ldr r2, =_sbss
 8000bc0:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000bc4:	20000170 	.word	0x20000170

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <CLCD_GPIO_Init>:
 */

#include "CLCD.h"

void CLCD_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <CLCD_GPIO_Init+0x98>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a22      	ldr	r2, [pc, #136]	@ (8000c64 <CLCD_GPIO_Init+0x98>)
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <CLCD_GPIO_Init+0x98>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
	
	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4819      	ldr	r0, [pc, #100]	@ (8000c68 <CLCD_GPIO_Init+0x9c>)
 8000c04:	f000 fb58 	bl	80012b8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4815      	ldr	r0, [pc, #84]	@ (8000c68 <CLCD_GPIO_Init+0x9c>)
 8000c12:	f000 fb51 	bl	80012b8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 8000c16:	2304      	movs	r3, #4
 8000c18:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4812      	ldr	r0, [pc, #72]	@ (8000c68 <CLCD_GPIO_Init+0x9c>)
 8000c20:	f000 fb4a 	bl	80012b8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 8000c24:	2310      	movs	r3, #16
 8000c26:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480e      	ldr	r0, [pc, #56]	@ (8000c68 <CLCD_GPIO_Init+0x9c>)
 8000c2e:	f000 fb43 	bl	80012b8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 8000c32:	2320      	movs	r3, #32
 8000c34:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480b      	ldr	r0, [pc, #44]	@ (8000c68 <CLCD_GPIO_Init+0x9c>)
 8000c3c:	f000 fb3c 	bl	80012b8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 8000c40:	2340      	movs	r3, #64	@ 0x40
 8000c42:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4807      	ldr	r0, [pc, #28]	@ (8000c68 <CLCD_GPIO_Init+0x9c>)
 8000c4a:	f000 fb35 	bl	80012b8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 8000c4e:	2380      	movs	r3, #128	@ 0x80
 8000c50:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <CLCD_GPIO_Init+0x9c>)
 8000c58:	f000 fb2e 	bl	80012b8 <HAL_GPIO_Init>
}
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40021000 	.word	0x40021000

08000c6c <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da04      	bge.n	8000c88 <CLCD_Write_Instruction+0x1c>
 8000c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c86:	e003      	b.n	8000c90 <CLCD_Write_Instruction+0x24>
 8000c88:	4b5c      	ldr	r3, [pc, #368]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c90:	4a5a      	ldr	r2, [pc, #360]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000c92:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d004      	beq.n	8000ca8 <CLCD_Write_Instruction+0x3c>
 8000c9e:	4b57      	ldr	r3, [pc, #348]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ca6:	e003      	b.n	8000cb0 <CLCD_Write_Instruction+0x44>
 8000ca8:	4b54      	ldr	r3, [pc, #336]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000cb0:	4a52      	ldr	r2, [pc, #328]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000cb2:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d004      	beq.n	8000cc8 <CLCD_Write_Instruction+0x5c>
 8000cbe:	4b4f      	ldr	r3, [pc, #316]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f043 0320 	orr.w	r3, r3, #32
 8000cc6:	e003      	b.n	8000cd0 <CLCD_Write_Instruction+0x64>
 8000cc8:	4b4c      	ldr	r3, [pc, #304]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	f023 0320 	bic.w	r3, r3, #32
 8000cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000cd2:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d004      	beq.n	8000ce8 <CLCD_Write_Instruction+0x7c>
 8000cde:	4b47      	ldr	r3, [pc, #284]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	e003      	b.n	8000cf0 <CLCD_Write_Instruction+0x84>
 8000ce8:	4b44      	ldr	r3, [pc, #272]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	f023 0310 	bic.w	r3, r3, #16
 8000cf0:	4a42      	ldr	r2, [pc, #264]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000cf2:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 8000cf4:	4b41      	ldr	r3, [pc, #260]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	4a40      	ldr	r2, [pc, #256]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000cfa:	f023 0301 	bic.w	r3, r3, #1
 8000cfe:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8000d00:	4b3e      	ldr	r3, [pc, #248]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	4a3d      	ldr	r2, [pc, #244]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d06:	f023 0302 	bic.w	r3, r3, #2
 8000d0a:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	4a3a      	ldr	r2, [pc, #232]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d12:	f023 0304 	bic.w	r3, r3, #4
 8000d16:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 8000d18:	4b38      	ldr	r3, [pc, #224]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	4a37      	ldr	r2, [pc, #220]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000d24:	4b35      	ldr	r3, [pc, #212]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	4a34      	ldr	r2, [pc, #208]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d2a:	f023 0304 	bic.w	r3, r3, #4
 8000d2e:	6153      	str	r3, [r2, #20]
	
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d004      	beq.n	8000d44 <CLCD_Write_Instruction+0xd8>
 8000d3a:	4b30      	ldr	r3, [pc, #192]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d42:	e003      	b.n	8000d4c <CLCD_Write_Instruction+0xe0>
 8000d44:	4b2d      	ldr	r3, [pc, #180]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d4e:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d004      	beq.n	8000d64 <CLCD_Write_Instruction+0xf8>
 8000d5a:	4b28      	ldr	r3, [pc, #160]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d62:	e003      	b.n	8000d6c <CLCD_Write_Instruction+0x100>
 8000d64:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d6c:	4a23      	ldr	r2, [pc, #140]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d6e:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <CLCD_Write_Instruction+0x118>
 8000d7a:	4b20      	ldr	r3, [pc, #128]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f043 0320 	orr.w	r3, r3, #32
 8000d82:	e003      	b.n	8000d8c <CLCD_Write_Instruction+0x120>
 8000d84:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	f023 0320 	bic.w	r3, r3, #32
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d8e:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d004      	beq.n	8000da4 <CLCD_Write_Instruction+0x138>
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	e003      	b.n	8000dac <CLCD_Write_Instruction+0x140>
 8000da4:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	f023 0310 	bic.w	r3, r3, #16
 8000dac:	4a13      	ldr	r2, [pc, #76]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000dae:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	4a11      	ldr	r2, [pc, #68]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000db6:	f023 0301 	bic.w	r3, r3, #1
 8000dba:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000dc2:	f023 0302 	bic.w	r3, r3, #2
 8000dc6:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000dce:	f023 0304 	bic.w	r3, r3, #4
 8000dd2:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 8000dd4:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	4a08      	ldr	r2, [pc, #32]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <CLCD_Write_Instruction+0x190>)
 8000de6:	f023 0304 	bic.w	r3, r3, #4
 8000dea:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f000 f89b 	bl	8000f28 <HAL_Delay>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000

08000e00 <CLCD_Init>:
	}
	while(str[++i]!='\0');
}

void CLCD_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000e04:	2064      	movs	r0, #100	@ 0x64
 8000e06:	f000 f88f 	bl	8000f28 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8000e0a:	2028      	movs	r0, #40	@ 0x28
 8000e0c:	f7ff ff2e 	bl	8000c6c <CLCD_Write_Instruction>
	HAL_Delay(10);
 8000e10:	200a      	movs	r0, #10
 8000e12:	f000 f889 	bl	8000f28 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8000e16:	2028      	movs	r0, #40	@ 0x28
 8000e18:	f7ff ff28 	bl	8000c6c <CLCD_Write_Instruction>
	HAL_Delay(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f000 f883 	bl	8000f28 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8000e22:	200c      	movs	r0, #12
 8000e24:	f7ff ff22 	bl	8000c6c <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 8000e28:	2006      	movs	r0, #6
 8000e2a:	f7ff ff1f 	bl	8000c6c <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f7ff ff1c 	bl	8000c6c <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8000e34:	2001      	movs	r0, #1
 8000e36:	f7ff ff19 	bl	8000c6c <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f7ff ff16 	bl	8000c6c <CLCD_Write_Instruction>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <HAL_Init+0x40>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <HAL_Init+0x40>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	@ (8000e84 <HAL_Init+0x40>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f94f 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	200f      	movs	r0, #15
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fd7c 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f967 	bl	800117a <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f92f 	bl	8001126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000158 	.word	0x20000158

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000158 	.word	0x20000158

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	@ (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	@ (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	@ (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff8e 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	@ (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff29 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff3e 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff8e 	bl	8001064 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5d 	bl	8001010 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff31 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffa2 	bl	80010cc <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff feb6 	bl	8000f10 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d008      	beq.n	80011c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2280      	movs	r2, #128	@ 0x80
 80011b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e052      	b.n	800126a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0216 	bic.w	r2, r2, #22
 80011d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	695a      	ldr	r2, [r3, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d103      	bne.n	80011f4 <HAL_DMA_Abort+0x62>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d007      	beq.n	8001204 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0208 	bic.w	r2, r2, #8
 8001202:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0201 	bic.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001214:	e013      	b.n	800123e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001216:	f7ff fe7b 	bl	8000f10 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b05      	cmp	r3, #5
 8001222:	d90c      	bls.n	800123e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2220      	movs	r2, #32
 8001228:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2203      	movs	r2, #3
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e015      	b.n	800126a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1e4      	bne.n	8001216 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001250:	223f      	movs	r2, #63	@ 0x3f
 8001252:	409a      	lsls	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d004      	beq.n	8001290 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2280      	movs	r2, #128	@ 0x80
 800128a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e00c      	b.n	80012aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2205      	movs	r2, #5
 8001294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0201 	bic.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	e16b      	b.n	80015ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f040 815a 	bne.w	80015a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d005      	beq.n	800130a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	2b02      	cmp	r3, #2
 8001308:	d130      	bne.n	800136c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 0201 	and.w	r2, r3, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b03      	cmp	r3, #3
 8001376:	d017      	beq.n	80013a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d123      	bne.n	80013fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	08da      	lsrs	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3208      	adds	r2, #8
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0203 	and.w	r2, r3, #3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80b4 	beq.w	80015a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b60      	ldr	r3, [pc, #384]	@ (80015c4 <HAL_GPIO_Init+0x30c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	4a5f      	ldr	r2, [pc, #380]	@ (80015c4 <HAL_GPIO_Init+0x30c>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800144c:	6453      	str	r3, [r2, #68]	@ 0x44
 800144e:	4b5d      	ldr	r3, [pc, #372]	@ (80015c4 <HAL_GPIO_Init+0x30c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145a:	4a5b      	ldr	r2, [pc, #364]	@ (80015c8 <HAL_GPIO_Init+0x310>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a52      	ldr	r2, [pc, #328]	@ (80015cc <HAL_GPIO_Init+0x314>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d02b      	beq.n	80014de <HAL_GPIO_Init+0x226>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a51      	ldr	r2, [pc, #324]	@ (80015d0 <HAL_GPIO_Init+0x318>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d025      	beq.n	80014da <HAL_GPIO_Init+0x222>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a50      	ldr	r2, [pc, #320]	@ (80015d4 <HAL_GPIO_Init+0x31c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d01f      	beq.n	80014d6 <HAL_GPIO_Init+0x21e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4f      	ldr	r2, [pc, #316]	@ (80015d8 <HAL_GPIO_Init+0x320>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d019      	beq.n	80014d2 <HAL_GPIO_Init+0x21a>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4e      	ldr	r2, [pc, #312]	@ (80015dc <HAL_GPIO_Init+0x324>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d013      	beq.n	80014ce <HAL_GPIO_Init+0x216>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4d      	ldr	r2, [pc, #308]	@ (80015e0 <HAL_GPIO_Init+0x328>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00d      	beq.n	80014ca <HAL_GPIO_Init+0x212>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4c      	ldr	r2, [pc, #304]	@ (80015e4 <HAL_GPIO_Init+0x32c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d007      	beq.n	80014c6 <HAL_GPIO_Init+0x20e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4b      	ldr	r2, [pc, #300]	@ (80015e8 <HAL_GPIO_Init+0x330>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d101      	bne.n	80014c2 <HAL_GPIO_Init+0x20a>
 80014be:	2307      	movs	r3, #7
 80014c0:	e00e      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014c2:	2308      	movs	r3, #8
 80014c4:	e00c      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014c6:	2306      	movs	r3, #6
 80014c8:	e00a      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014ca:	2305      	movs	r3, #5
 80014cc:	e008      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014ce:	2304      	movs	r3, #4
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e004      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e002      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014de:	2300      	movs	r3, #0
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	f002 0203 	and.w	r2, r2, #3
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	4093      	lsls	r3, r2
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f0:	4935      	ldr	r1, [pc, #212]	@ (80015c8 <HAL_GPIO_Init+0x310>)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fe:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <HAL_GPIO_Init+0x334>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001522:	4a32      	ldr	r2, [pc, #200]	@ (80015ec <HAL_GPIO_Init+0x334>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001528:	4b30      	ldr	r3, [pc, #192]	@ (80015ec <HAL_GPIO_Init+0x334>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800154c:	4a27      	ldr	r2, [pc, #156]	@ (80015ec <HAL_GPIO_Init+0x334>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001552:	4b26      	ldr	r3, [pc, #152]	@ (80015ec <HAL_GPIO_Init+0x334>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001576:	4a1d      	ldr	r2, [pc, #116]	@ (80015ec <HAL_GPIO_Init+0x334>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_GPIO_Init+0x334>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a0:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <HAL_GPIO_Init+0x334>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3301      	adds	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	f67f ae90 	bls.w	80012d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3724      	adds	r7, #36	@ 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40013800 	.word	0x40013800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40021400 	.word	0x40021400
 80015e4:	40021800 	.word	0x40021800
 80015e8:	40021c00 	.word	0x40021c00
 80015ec:	40013c00 	.word	0x40013c00

080015f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	4013      	ands	r3, r2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e001      	b.n	8001612 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800163c:	e003      	b.n	8001646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff f96c 	bl	8000950 <HAL_GPIO_EXTI_Callback>
  }
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40013c00 	.word	0x40013c00

08001684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e267      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d075      	beq.n	800178e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016a2:	4b88      	ldr	r3, [pc, #544]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d00c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ae:	4b85      	ldr	r3, [pc, #532]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d112      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ba:	4b82      	ldr	r3, [pc, #520]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016c6:	d10b      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	4b7e      	ldr	r3, [pc, #504]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d05b      	beq.n	800178c <HAL_RCC_OscConfig+0x108>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d157      	bne.n	800178c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e242      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0x74>
 80016ea:	4b76      	ldr	r3, [pc, #472]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a75      	ldr	r2, [pc, #468]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e01d      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b70      	ldr	r3, [pc, #448]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a6f      	ldr	r2, [pc, #444]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b6d      	ldr	r3, [pc, #436]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6c      	ldr	r2, [pc, #432]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 800171c:	4b69      	ldr	r3, [pc, #420]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a68      	ldr	r2, [pc, #416]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b66      	ldr	r3, [pc, #408]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a65      	ldr	r2, [pc, #404]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fbe8 	bl	8000f10 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fbe4 	bl	8000f10 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	@ 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e207      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b5b      	ldr	r3, [pc, #364]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0xc0>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fbd4 	bl	8000f10 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fbd0 	bl	8000f10 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	@ 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e1f3      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	4b51      	ldr	r3, [pc, #324]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0xe8>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d063      	beq.n	8001862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800179a:	4b4a      	ldr	r3, [pc, #296]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a6:	4b47      	ldr	r3, [pc, #284]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d11c      	bne.n	80017ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b2:	4b44      	ldr	r3, [pc, #272]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d116      	bne.n	80017ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x152>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e1c7      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4b3b      	ldr	r3, [pc, #236]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4937      	ldr	r1, [pc, #220]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	e03a      	b.n	8001862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f4:	4b34      	ldr	r3, [pc, #208]	@ (80018c8 <HAL_RCC_OscConfig+0x244>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fb89 	bl	8000f10 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff fb85 	bl	8000f10 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1a8      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	4b2b      	ldr	r3, [pc, #172]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4925      	ldr	r1, [pc, #148]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
 8001834:	e015      	b.n	8001862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001836:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <HAL_RCC_OscConfig+0x244>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fb68 	bl	8000f10 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff fb64 	bl	8000f10 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e187      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d036      	beq.n	80018dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d016      	beq.n	80018a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <HAL_RCC_OscConfig+0x248>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fb48 	bl	8000f10 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fb44 	bl	8000f10 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e167      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x200>
 80018a2:	e01b      	b.n	80018dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <HAL_RCC_OscConfig+0x248>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fb31 	bl	8000f10 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	e00e      	b.n	80018d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b2:	f7ff fb2d 	bl	8000f10 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d907      	bls.n	80018d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e150      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
 80018c4:	40023800 	.word	0x40023800
 80018c8:	42470000 	.word	0x42470000
 80018cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d0:	4b88      	ldr	r3, [pc, #544]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1ea      	bne.n	80018b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 8097 	beq.w	8001a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ee:	4b81      	ldr	r3, [pc, #516]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10f      	bne.n	800191a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b7d      	ldr	r3, [pc, #500]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	4a7c      	ldr	r2, [pc, #496]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	@ 0x40
 800190a:	4b7a      	ldr	r3, [pc, #488]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b77      	ldr	r3, [pc, #476]	@ (8001af8 <HAL_RCC_OscConfig+0x474>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d118      	bne.n	8001958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001926:	4b74      	ldr	r3, [pc, #464]	@ (8001af8 <HAL_RCC_OscConfig+0x474>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a73      	ldr	r2, [pc, #460]	@ (8001af8 <HAL_RCC_OscConfig+0x474>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001932:	f7ff faed 	bl	8000f10 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193a:	f7ff fae9 	bl	8000f10 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e10c      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	4b6a      	ldr	r3, [pc, #424]	@ (8001af8 <HAL_RCC_OscConfig+0x474>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x2ea>
 8001960:	4b64      	ldr	r3, [pc, #400]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001964:	4a63      	ldr	r2, [pc, #396]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6713      	str	r3, [r2, #112]	@ 0x70
 800196c:	e01c      	b.n	80019a8 <HAL_RCC_OscConfig+0x324>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b05      	cmp	r3, #5
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x30c>
 8001976:	4b5f      	ldr	r3, [pc, #380]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197a:	4a5e      	ldr	r2, [pc, #376]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6713      	str	r3, [r2, #112]	@ 0x70
 8001982:	4b5c      	ldr	r3, [pc, #368]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001986:	4a5b      	ldr	r2, [pc, #364]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6713      	str	r3, [r2, #112]	@ 0x70
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0x324>
 8001990:	4b58      	ldr	r3, [pc, #352]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001994:	4a57      	ldr	r2, [pc, #348]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	6713      	str	r3, [r2, #112]	@ 0x70
 800199c:	4b55      	ldr	r3, [pc, #340]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a0:	4a54      	ldr	r2, [pc, #336]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 80019a2:	f023 0304 	bic.w	r3, r3, #4
 80019a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d015      	beq.n	80019dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff faae 	bl	8000f10 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b8:	f7ff faaa 	bl	8000f10 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e0cb      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ce:	4b49      	ldr	r3, [pc, #292]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0ee      	beq.n	80019b8 <HAL_RCC_OscConfig+0x334>
 80019da:	e014      	b.n	8001a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff fa98 	bl	8000f10 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7ff fa94 	bl	8000f10 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e0b5      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fa:	4b3e      	ldr	r3, [pc, #248]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ee      	bne.n	80019e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0c:	4b39      	ldr	r3, [pc, #228]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	4a38      	ldr	r2, [pc, #224]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80a1 	beq.w	8001b64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a22:	4b34      	ldr	r3, [pc, #208]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d05c      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d141      	bne.n	8001aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b31      	ldr	r3, [pc, #196]	@ (8001afc <HAL_RCC_OscConfig+0x478>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fa68 	bl	8000f10 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff fa64 	bl	8000f10 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e087      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	4b27      	ldr	r3, [pc, #156]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	019b      	lsls	r3, r3, #6
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a78:	085b      	lsrs	r3, r3, #1
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	041b      	lsls	r3, r3, #16
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	491b      	ldr	r1, [pc, #108]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <HAL_RCC_OscConfig+0x478>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fa3d 	bl	8000f10 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff fa39 	bl	8000f10 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e05c      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x416>
 8001ab8:	e054      	b.n	8001b64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <HAL_RCC_OscConfig+0x478>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fa26 	bl	8000f10 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff fa22 	bl	8000f10 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e045      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x444>
 8001ae6:	e03d      	b.n	8001b64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e038      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40007000 	.word	0x40007000
 8001afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <HAL_RCC_OscConfig+0x4ec>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d028      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d121      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d11a      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b30:	4013      	ands	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d111      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0cc      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b88:	4b68      	ldr	r3, [pc, #416]	@ (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d90c      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b65      	ldr	r3, [pc, #404]	@ (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b63      	ldr	r3, [pc, #396]	@ (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0b8      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc8:	4b59      	ldr	r3, [pc, #356]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a58      	ldr	r2, [pc, #352]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be0:	4b53      	ldr	r3, [pc, #332]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a52      	ldr	r2, [pc, #328]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	4b50      	ldr	r3, [pc, #320]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	494d      	ldr	r1, [pc, #308]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d044      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b47      	ldr	r3, [pc, #284]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d119      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e07f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	4b3f      	ldr	r3, [pc, #252]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e06f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c42:	4b3b      	ldr	r3, [pc, #236]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e067      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b37      	ldr	r3, [pc, #220]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4934      	ldr	r1, [pc, #208]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c64:	f7ff f954 	bl	8000f10 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7ff f950 	bl	8000f10 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e04f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b2b      	ldr	r3, [pc, #172]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c94:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d20c      	bcs.n	8001cbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b22      	ldr	r3, [pc, #136]	@ (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e032      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4916      	ldr	r1, [pc, #88]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	490e      	ldr	r1, [pc, #56]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cfa:	f000 f821 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	490a      	ldr	r1, [pc, #40]	@ (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	5ccb      	ldrb	r3, [r1, r3]
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	4a09      	ldr	r2, [pc, #36]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d16:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f8b4 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00
 8001d30:	40023800 	.word	0x40023800
 8001d34:	08004704 	.word	0x08004704
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d44:	b094      	sub	sp, #80	@ 0x50
 8001d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d58:	4b79      	ldr	r3, [pc, #484]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d00d      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x40>
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	f200 80e1 	bhi.w	8001f2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x34>
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d72:	e0db      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d74:	4b73      	ldr	r3, [pc, #460]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d78:	e0db      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d7a:	4b73      	ldr	r3, [pc, #460]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d7e:	e0d8      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d80:	4b6f      	ldr	r3, [pc, #444]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d063      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d96:	4b6a      	ldr	r3, [pc, #424]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	099b      	lsrs	r3, r3, #6
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001da0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001daa:	2300      	movs	r3, #0
 8001dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001db2:	4622      	mov	r2, r4
 8001db4:	462b      	mov	r3, r5
 8001db6:	f04f 0000 	mov.w	r0, #0
 8001dba:	f04f 0100 	mov.w	r1, #0
 8001dbe:	0159      	lsls	r1, r3, #5
 8001dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc4:	0150      	lsls	r0, r2, #5
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4621      	mov	r1, r4
 8001dcc:	1a51      	subs	r1, r2, r1
 8001dce:	6139      	str	r1, [r7, #16]
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001de4:	4659      	mov	r1, fp
 8001de6:	018b      	lsls	r3, r1, #6
 8001de8:	4651      	mov	r1, sl
 8001dea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dee:	4651      	mov	r1, sl
 8001df0:	018a      	lsls	r2, r1, #6
 8001df2:	4651      	mov	r1, sl
 8001df4:	ebb2 0801 	subs.w	r8, r2, r1
 8001df8:	4659      	mov	r1, fp
 8001dfa:	eb63 0901 	sbc.w	r9, r3, r1
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e12:	4690      	mov	r8, r2
 8001e14:	4699      	mov	r9, r3
 8001e16:	4623      	mov	r3, r4
 8001e18:	eb18 0303 	adds.w	r3, r8, r3
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	462b      	mov	r3, r5
 8001e20:	eb49 0303 	adc.w	r3, r9, r3
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e32:	4629      	mov	r1, r5
 8001e34:	024b      	lsls	r3, r1, #9
 8001e36:	4621      	mov	r1, r4
 8001e38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	024a      	lsls	r2, r1, #9
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e46:	2200      	movs	r2, #0
 8001e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e50:	f7fe f9ba 	bl	80001c8 <__aeabi_uldivmod>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4613      	mov	r3, r2
 8001e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e5c:	e058      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	4b38      	ldr	r3, [pc, #224]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	2200      	movs	r2, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	4611      	mov	r1, r2
 8001e6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e78:	4642      	mov	r2, r8
 8001e7a:	464b      	mov	r3, r9
 8001e7c:	f04f 0000 	mov.w	r0, #0
 8001e80:	f04f 0100 	mov.w	r1, #0
 8001e84:	0159      	lsls	r1, r3, #5
 8001e86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e8a:	0150      	lsls	r0, r2, #5
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4641      	mov	r1, r8
 8001e92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e96:	4649      	mov	r1, r9
 8001e98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ea8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eb0:	ebb2 040a 	subs.w	r4, r2, sl
 8001eb4:	eb63 050b 	sbc.w	r5, r3, fp
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	00eb      	lsls	r3, r5, #3
 8001ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec6:	00e2      	lsls	r2, r4, #3
 8001ec8:	4614      	mov	r4, r2
 8001eca:	461d      	mov	r5, r3
 8001ecc:	4643      	mov	r3, r8
 8001ece:	18e3      	adds	r3, r4, r3
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	464b      	mov	r3, r9
 8001ed4:	eb45 0303 	adc.w	r3, r5, r3
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	028b      	lsls	r3, r1, #10
 8001eea:	4621      	mov	r1, r4
 8001eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	028a      	lsls	r2, r1, #10
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001efa:	2200      	movs	r2, #0
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	61fa      	str	r2, [r7, #28]
 8001f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f04:	f7fe f960 	bl	80001c8 <__aeabi_uldivmod>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	0c1b      	lsrs	r3, r3, #16
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3750      	adds	r7, #80	@ 0x50
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	00f42400 	.word	0x00f42400
 8001f48:	007a1200 	.word	0x007a1200

08001f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f50:	4b03      	ldr	r3, [pc, #12]	@ (8001f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000000 	.word	0x20000000

08001f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f68:	f7ff fff0 	bl	8001f4c <HAL_RCC_GetHCLKFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	0a9b      	lsrs	r3, r3, #10
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	4903      	ldr	r1, [pc, #12]	@ (8001f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	08004714 	.word	0x08004714

08001f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f90:	f7ff ffdc 	bl	8001f4c <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0b5b      	lsrs	r3, r3, #13
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4903      	ldr	r1, [pc, #12]	@ (8001fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	08004714 	.word	0x08004714

08001fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e041      	b.n	800204a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fcf2 	bl	80009c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f000 f9b6 	bl	8002364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d001      	beq.n	800206c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e04e      	b.n	800210a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a23      	ldr	r2, [pc, #140]	@ (8002118 <HAL_TIM_Base_Start_IT+0xc4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d022      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x80>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002096:	d01d      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x80>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1f      	ldr	r2, [pc, #124]	@ (800211c <HAL_TIM_Base_Start_IT+0xc8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d018      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x80>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002120 <HAL_TIM_Base_Start_IT+0xcc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d013      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x80>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002124 <HAL_TIM_Base_Start_IT+0xd0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00e      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x80>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002128 <HAL_TIM_Base_Start_IT+0xd4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d009      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x80>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a19      	ldr	r2, [pc, #100]	@ (800212c <HAL_TIM_Base_Start_IT+0xd8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d004      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x80>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a18      	ldr	r2, [pc, #96]	@ (8002130 <HAL_TIM_Base_Start_IT+0xdc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d111      	bne.n	80020f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d010      	beq.n	8002108 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f6:	e007      	b.n	8002108 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40010400 	.word	0x40010400
 800212c:	40014000 	.word	0x40014000
 8002130:	40001800 	.word	0x40001800

08002134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d020      	beq.n	8002198 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01b      	beq.n	8002198 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0202 	mvn.w	r2, #2
 8002168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f8d2 	bl	8002328 <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f8c4 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f8d5 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d020      	beq.n	80021e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01b      	beq.n	80021e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0204 	mvn.w	r2, #4
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f8ac 	bl	8002328 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f89e 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f8af 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d020      	beq.n	8002230 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01b      	beq.n	8002230 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0208 	mvn.w	r2, #8
 8002200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2204      	movs	r2, #4
 8002206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f886 	bl	8002328 <HAL_TIM_IC_CaptureCallback>
 800221c:	e005      	b.n	800222a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f878 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f889 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d020      	beq.n	800227c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01b      	beq.n	800227c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0210 	mvn.w	r2, #16
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2208      	movs	r2, #8
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f860 	bl	8002328 <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f852 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f863 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00c      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0201 	mvn.w	r2, #1
 8002298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe fb42 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00c      	beq.n	80022c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80022bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f982 	bl	80025c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00c      	beq.n	80022e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f834 	bl	8002350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00c      	beq.n	800230c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0220 	mvn.w	r2, #32
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f954 	bl	80025b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a46      	ldr	r2, [pc, #280]	@ (8002490 <TIM_Base_SetConfig+0x12c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d013      	beq.n	80023a4 <TIM_Base_SetConfig+0x40>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002382:	d00f      	beq.n	80023a4 <TIM_Base_SetConfig+0x40>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a43      	ldr	r2, [pc, #268]	@ (8002494 <TIM_Base_SetConfig+0x130>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d00b      	beq.n	80023a4 <TIM_Base_SetConfig+0x40>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a42      	ldr	r2, [pc, #264]	@ (8002498 <TIM_Base_SetConfig+0x134>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d007      	beq.n	80023a4 <TIM_Base_SetConfig+0x40>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a41      	ldr	r2, [pc, #260]	@ (800249c <TIM_Base_SetConfig+0x138>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d003      	beq.n	80023a4 <TIM_Base_SetConfig+0x40>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a40      	ldr	r2, [pc, #256]	@ (80024a0 <TIM_Base_SetConfig+0x13c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d108      	bne.n	80023b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a35      	ldr	r2, [pc, #212]	@ (8002490 <TIM_Base_SetConfig+0x12c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d02b      	beq.n	8002416 <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c4:	d027      	beq.n	8002416 <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a32      	ldr	r2, [pc, #200]	@ (8002494 <TIM_Base_SetConfig+0x130>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d023      	beq.n	8002416 <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a31      	ldr	r2, [pc, #196]	@ (8002498 <TIM_Base_SetConfig+0x134>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a30      	ldr	r2, [pc, #192]	@ (800249c <TIM_Base_SetConfig+0x138>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01b      	beq.n	8002416 <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a2f      	ldr	r2, [pc, #188]	@ (80024a0 <TIM_Base_SetConfig+0x13c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d017      	beq.n	8002416 <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a2e      	ldr	r2, [pc, #184]	@ (80024a4 <TIM_Base_SetConfig+0x140>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a2d      	ldr	r2, [pc, #180]	@ (80024a8 <TIM_Base_SetConfig+0x144>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00f      	beq.n	8002416 <TIM_Base_SetConfig+0xb2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a2c      	ldr	r2, [pc, #176]	@ (80024ac <TIM_Base_SetConfig+0x148>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00b      	beq.n	8002416 <TIM_Base_SetConfig+0xb2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a2b      	ldr	r2, [pc, #172]	@ (80024b0 <TIM_Base_SetConfig+0x14c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <TIM_Base_SetConfig+0xb2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a2a      	ldr	r2, [pc, #168]	@ (80024b4 <TIM_Base_SetConfig+0x150>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d003      	beq.n	8002416 <TIM_Base_SetConfig+0xb2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a29      	ldr	r2, [pc, #164]	@ (80024b8 <TIM_Base_SetConfig+0x154>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d108      	bne.n	8002428 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800241c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a10      	ldr	r2, [pc, #64]	@ (8002490 <TIM_Base_SetConfig+0x12c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d003      	beq.n	800245c <TIM_Base_SetConfig+0xf8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a12      	ldr	r2, [pc, #72]	@ (80024a0 <TIM_Base_SetConfig+0x13c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d103      	bne.n	8002464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f023 0201 	bic.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	611a      	str	r2, [r3, #16]
  }
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40010000 	.word	0x40010000
 8002494:	40000400 	.word	0x40000400
 8002498:	40000800 	.word	0x40000800
 800249c:	40000c00 	.word	0x40000c00
 80024a0:	40010400 	.word	0x40010400
 80024a4:	40014000 	.word	0x40014000
 80024a8:	40014400 	.word	0x40014400
 80024ac:	40014800 	.word	0x40014800
 80024b0:	40001800 	.word	0x40001800
 80024b4:	40001c00 	.word	0x40001c00
 80024b8:	40002000 	.word	0x40002000

080024bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e05a      	b.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a21      	ldr	r2, [pc, #132]	@ (8002598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d022      	beq.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002520:	d01d      	beq.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1d      	ldr	r2, [pc, #116]	@ (800259c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d018      	beq.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1b      	ldr	r2, [pc, #108]	@ (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1a      	ldr	r2, [pc, #104]	@ (80025a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00e      	beq.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a18      	ldr	r2, [pc, #96]	@ (80025a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a17      	ldr	r2, [pc, #92]	@ (80025ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a15      	ldr	r2, [pc, #84]	@ (80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10c      	bne.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	4313      	orrs	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40010000 	.word	0x40010000
 800259c:	40000400 	.word	0x40000400
 80025a0:	40000800 	.word	0x40000800
 80025a4:	40000c00 	.word	0x40000c00
 80025a8:	40010400 	.word	0x40010400
 80025ac:	40014000 	.word	0x40014000
 80025b0:	40001800 	.word	0x40001800

080025b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e042      	b.n	8002674 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fa00 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	@ 0x24
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800261e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fcdb 	bl	8002fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b20      	cmp	r3, #32
 8002694:	d112      	bne.n	80026bc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_UART_Receive_IT+0x26>
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00b      	b.n	80026be <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 faba 	bl	8002c2c <UART_Start_Receive_IT>
 80026b8:	4603      	mov	r3, r0
 80026ba:	e000      	b.n	80026be <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
  }
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b0ba      	sub	sp, #232	@ 0xe8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800270e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_UART_IRQHandler+0x66>
 800271a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fb99 	bl	8002e5e <UART_Receive_IT>
      return;
 800272c:	e25b      	b.n	8002be6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800272e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80de 	beq.w	80028f4 <HAL_UART_IRQHandler+0x22c>
 8002738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d106      	bne.n	8002752 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002748:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80d1 	beq.w	80028f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_UART_IRQHandler+0xae>
 800275e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_UART_IRQHandler+0xd2>
 8002782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	f043 0202 	orr.w	r2, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800279a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_UART_IRQHandler+0xf6>
 80027a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	f043 0204 	orr.w	r2, r3, #4
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d011      	beq.n	80027ee <HAL_UART_IRQHandler+0x126>
 80027ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d105      	bne.n	80027e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	f043 0208 	orr.w	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 81f2 	beq.w	8002bdc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_UART_IRQHandler+0x14e>
 8002804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fb24 	bl	8002e5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002820:	2b40      	cmp	r3, #64	@ 0x40
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <HAL_UART_IRQHandler+0x17a>
 800283a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800283e:	2b00      	cmp	r3, #0
 8002840:	d04f      	beq.n	80028e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fa2c 	bl	8002ca0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002852:	2b40      	cmp	r3, #64	@ 0x40
 8002854:	d141      	bne.n	80028da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3314      	adds	r3, #20
 800285c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002860:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002864:	e853 3f00 	ldrex	r3, [r3]
 8002868:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800286c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3314      	adds	r3, #20
 800287e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002882:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800288e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002892:	e841 2300 	strex	r3, r2, [r1]
 8002896:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800289a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1d9      	bne.n	8002856 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d013      	beq.n	80028d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ae:	4a7e      	ldr	r2, [pc, #504]	@ (8002aa8 <HAL_UART_IRQHandler+0x3e0>)
 80028b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fcdb 	bl	8001272 <HAL_DMA_Abort_IT>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d016      	beq.n	80028f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028cc:	4610      	mov	r0, r2
 80028ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d0:	e00e      	b.n	80028f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f994 	bl	8002c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d8:	e00a      	b.n	80028f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f990 	bl	8002c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e0:	e006      	b.n	80028f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f98c 	bl	8002c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80028ee:	e175      	b.n	8002bdc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f0:	bf00      	nop
    return;
 80028f2:	e173      	b.n	8002bdc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	f040 814f 	bne.w	8002b9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8148 	beq.w	8002b9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800290c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8141 	beq.w	8002b9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293a:	2b40      	cmp	r3, #64	@ 0x40
 800293c:	f040 80b6 	bne.w	8002aac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800294c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8145 	beq.w	8002be0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800295a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800295e:	429a      	cmp	r2, r3
 8002960:	f080 813e 	bcs.w	8002be0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800296a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002976:	f000 8088 	beq.w	8002a8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	330c      	adds	r3, #12
 8002980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002984:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002988:	e853 3f00 	ldrex	r3, [r3]
 800298c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002990:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002998:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	330c      	adds	r3, #12
 80029a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80029a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029b6:	e841 2300 	strex	r3, r2, [r1]
 80029ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80029be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1d9      	bne.n	800297a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3314      	adds	r3, #20
 80029cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d0:	e853 3f00 	ldrex	r3, [r3]
 80029d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80029d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80029ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80029f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029f6:	e841 2300 	strex	r3, r2, [r1]
 80029fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80029fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1e1      	bne.n	80029c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3314      	adds	r3, #20
 8002a08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3314      	adds	r3, #20
 8002a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e3      	bne.n	8002a02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a52:	e853 3f00 	ldrex	r3, [r3]
 8002a56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a5a:	f023 0310 	bic.w	r3, r3, #16
 8002a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	330c      	adds	r3, #12
 8002a68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002a6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a74:	e841 2300 	strex	r3, r2, [r1]
 8002a78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e3      	bne.n	8002a48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fb84 	bl	8001192 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f8b7 	bl	8002c14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002aa6:	e09b      	b.n	8002be0 <HAL_UART_IRQHandler+0x518>
 8002aa8:	08002d67 	.word	0x08002d67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 808e 	beq.w	8002be4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8089 	beq.w	8002be4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	330c      	adds	r3, #12
 8002af2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002af6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002af8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002afc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e3      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3314      	adds	r3, #20
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	623b      	str	r3, [r7, #32]
   return(result);
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3314      	adds	r3, #20
 8002b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b36:	e841 2300 	strex	r3, r2, [r1]
 8002b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e3      	bne.n	8002b0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	330c      	adds	r3, #12
 8002b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	e853 3f00 	ldrex	r3, [r3]
 8002b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0310 	bic.w	r3, r3, #16
 8002b66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002b74:	61fa      	str	r2, [r7, #28]
 8002b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b78:	69b9      	ldr	r1, [r7, #24]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	e841 2300 	strex	r3, r2, [r1]
 8002b80:	617b      	str	r3, [r7, #20]
   return(result);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1e3      	bne.n	8002b50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b92:	4619      	mov	r1, r3
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f83d 	bl	8002c14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b9a:	e023      	b.n	8002be4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <HAL_UART_IRQHandler+0x4f4>
 8002ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f8ea 	bl	8002d8e <UART_Transmit_IT>
    return;
 8002bba:	e014      	b.n	8002be6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00e      	beq.n	8002be6 <HAL_UART_IRQHandler+0x51e>
 8002bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f92a 	bl	8002e2e <UART_EndTransmit_IT>
    return;
 8002bda:	e004      	b.n	8002be6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002bdc:	bf00      	nop
 8002bde:	e002      	b.n	8002be6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002be0:	bf00      	nop
 8002be2:	e000      	b.n	8002be6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002be4:	bf00      	nop
  }
}
 8002be6:	37e8      	adds	r7, #232	@ 0xe8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	4613      	mov	r3, r2
 8002c38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2222      	movs	r2, #34	@ 0x22
 8002c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0220 	orr.w	r2, r2, #32
 8002c90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b095      	sub	sp, #84	@ 0x54
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	330c      	adds	r3, #12
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb2:	e853 3f00 	ldrex	r3, [r3]
 8002cb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ccc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cd0:	e841 2300 	strex	r3, r2, [r1]
 8002cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e5      	bne.n	8002ca8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3314      	adds	r3, #20
 8002ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3314      	adds	r3, #20
 8002cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d04:	e841 2300 	strex	r3, r2, [r1]
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e5      	bne.n	8002cdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d119      	bne.n	8002d4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f023 0310 	bic.w	r3, r3, #16
 8002d2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d38:	61ba      	str	r2, [r7, #24]
 8002d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3c:	6979      	ldr	r1, [r7, #20]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	613b      	str	r3, [r7, #16]
   return(result);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e5      	bne.n	8002d18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d5a:	bf00      	nop
 8002d5c:	3754      	adds	r7, #84	@ 0x54
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff ff3d 	bl	8002c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b21      	cmp	r3, #33	@ 0x21
 8002da0:	d13e      	bne.n	8002e20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002daa:	d114      	bne.n	8002dd6 <UART_Transmit_IT+0x48>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d110      	bne.n	8002dd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	1c9a      	adds	r2, r3, #2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	621a      	str	r2, [r3, #32]
 8002dd4:	e008      	b.n	8002de8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	1c59      	adds	r1, r3, #1
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6211      	str	r1, [r2, #32]
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4619      	mov	r1, r3
 8002df6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10f      	bne.n	8002e1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e000      	b.n	8002e22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e20:	2302      	movs	r3, #2
  }
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff fecc 	bl	8002bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b08c      	sub	sp, #48	@ 0x30
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b22      	cmp	r3, #34	@ 0x22
 8002e70:	f040 80ae 	bne.w	8002fd0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e7c:	d117      	bne.n	8002eae <UART_Receive_IT+0x50>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d113      	bne.n	8002eae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea6:	1c9a      	adds	r2, r3, #2
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eac:	e026      	b.n	8002efc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ec0:	d007      	beq.n	8002ed2 <UART_Receive_IT+0x74>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <UART_Receive_IT+0x82>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e008      	b.n	8002ef2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d15d      	bne.n	8002fcc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0220 	bic.w	r2, r2, #32
 8002f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d135      	bne.n	8002fc2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f023 0310 	bic.w	r3, r3, #16
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7c:	623a      	str	r2, [r7, #32]
 8002f7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	69f9      	ldr	r1, [r7, #28]
 8002f82:	6a3a      	ldr	r2, [r7, #32]
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e5      	bne.n	8002f5c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b10      	cmp	r3, #16
 8002f9c:	d10a      	bne.n	8002fb4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff fe2a 	bl	8002c14 <HAL_UARTEx_RxEventCallback>
 8002fc0:	e002      	b.n	8002fc8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd fc98 	bl	80008f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e002      	b.n	8002fd2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e000      	b.n	8002fd2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3730      	adds	r7, #48	@ 0x30
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe0:	b0c0      	sub	sp, #256	@ 0x100
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff8:	68d9      	ldr	r1, [r3, #12]
 8002ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	ea40 0301 	orr.w	r3, r0, r1
 8003004:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	431a      	orrs	r2, r3
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	431a      	orrs	r2, r3
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003034:	f021 010c 	bic.w	r1, r1, #12
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003042:	430b      	orrs	r3, r1
 8003044:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003056:	6999      	ldr	r1, [r3, #24]
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	ea40 0301 	orr.w	r3, r0, r1
 8003062:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b8f      	ldr	r3, [pc, #572]	@ (80032a8 <UART_SetConfig+0x2cc>)
 800306c:	429a      	cmp	r2, r3
 800306e:	d005      	beq.n	800307c <UART_SetConfig+0xa0>
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4b8d      	ldr	r3, [pc, #564]	@ (80032ac <UART_SetConfig+0x2d0>)
 8003078:	429a      	cmp	r2, r3
 800307a:	d104      	bne.n	8003086 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800307c:	f7fe ff86 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 8003080:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003084:	e003      	b.n	800308e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003086:	f7fe ff6d 	bl	8001f64 <HAL_RCC_GetPCLK1Freq>
 800308a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800308e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003098:	f040 810c 	bne.w	80032b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800309c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030a0:	2200      	movs	r2, #0
 80030a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030ae:	4622      	mov	r2, r4
 80030b0:	462b      	mov	r3, r5
 80030b2:	1891      	adds	r1, r2, r2
 80030b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030b6:	415b      	adcs	r3, r3
 80030b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030be:	4621      	mov	r1, r4
 80030c0:	eb12 0801 	adds.w	r8, r2, r1
 80030c4:	4629      	mov	r1, r5
 80030c6:	eb43 0901 	adc.w	r9, r3, r1
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030de:	4690      	mov	r8, r2
 80030e0:	4699      	mov	r9, r3
 80030e2:	4623      	mov	r3, r4
 80030e4:	eb18 0303 	adds.w	r3, r8, r3
 80030e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030ec:	462b      	mov	r3, r5
 80030ee:	eb49 0303 	adc.w	r3, r9, r3
 80030f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003102:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003106:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800310a:	460b      	mov	r3, r1
 800310c:	18db      	adds	r3, r3, r3
 800310e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003110:	4613      	mov	r3, r2
 8003112:	eb42 0303 	adc.w	r3, r2, r3
 8003116:	657b      	str	r3, [r7, #84]	@ 0x54
 8003118:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800311c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003120:	f7fd f852 	bl	80001c8 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4b61      	ldr	r3, [pc, #388]	@ (80032b0 <UART_SetConfig+0x2d4>)
 800312a:	fba3 2302 	umull	r2, r3, r3, r2
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	011c      	lsls	r4, r3, #4
 8003132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003136:	2200      	movs	r2, #0
 8003138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800313c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003140:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003144:	4642      	mov	r2, r8
 8003146:	464b      	mov	r3, r9
 8003148:	1891      	adds	r1, r2, r2
 800314a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800314c:	415b      	adcs	r3, r3
 800314e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003150:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003154:	4641      	mov	r1, r8
 8003156:	eb12 0a01 	adds.w	sl, r2, r1
 800315a:	4649      	mov	r1, r9
 800315c:	eb43 0b01 	adc.w	fp, r3, r1
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800316c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003174:	4692      	mov	sl, r2
 8003176:	469b      	mov	fp, r3
 8003178:	4643      	mov	r3, r8
 800317a:	eb1a 0303 	adds.w	r3, sl, r3
 800317e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003182:	464b      	mov	r3, r9
 8003184:	eb4b 0303 	adc.w	r3, fp, r3
 8003188:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003198:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800319c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031a0:	460b      	mov	r3, r1
 80031a2:	18db      	adds	r3, r3, r3
 80031a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80031a6:	4613      	mov	r3, r2
 80031a8:	eb42 0303 	adc.w	r3, r2, r3
 80031ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031b6:	f7fd f807 	bl	80001c8 <__aeabi_uldivmod>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4611      	mov	r1, r2
 80031c0:	4b3b      	ldr	r3, [pc, #236]	@ (80032b0 <UART_SetConfig+0x2d4>)
 80031c2:	fba3 2301 	umull	r2, r3, r3, r1
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2264      	movs	r2, #100	@ 0x64
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	1acb      	subs	r3, r1, r3
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031d6:	4b36      	ldr	r3, [pc, #216]	@ (80032b0 <UART_SetConfig+0x2d4>)
 80031d8:	fba3 2302 	umull	r2, r3, r3, r2
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031e4:	441c      	add	r4, r3
 80031e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031f8:	4642      	mov	r2, r8
 80031fa:	464b      	mov	r3, r9
 80031fc:	1891      	adds	r1, r2, r2
 80031fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003200:	415b      	adcs	r3, r3
 8003202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003208:	4641      	mov	r1, r8
 800320a:	1851      	adds	r1, r2, r1
 800320c:	6339      	str	r1, [r7, #48]	@ 0x30
 800320e:	4649      	mov	r1, r9
 8003210:	414b      	adcs	r3, r1
 8003212:	637b      	str	r3, [r7, #52]	@ 0x34
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003220:	4659      	mov	r1, fp
 8003222:	00cb      	lsls	r3, r1, #3
 8003224:	4651      	mov	r1, sl
 8003226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322a:	4651      	mov	r1, sl
 800322c:	00ca      	lsls	r2, r1, #3
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	4603      	mov	r3, r0
 8003234:	4642      	mov	r2, r8
 8003236:	189b      	adds	r3, r3, r2
 8003238:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800323c:	464b      	mov	r3, r9
 800323e:	460a      	mov	r2, r1
 8003240:	eb42 0303 	adc.w	r3, r2, r3
 8003244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003254:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003258:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800325c:	460b      	mov	r3, r1
 800325e:	18db      	adds	r3, r3, r3
 8003260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003262:	4613      	mov	r3, r2
 8003264:	eb42 0303 	adc.w	r3, r2, r3
 8003268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800326a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800326e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003272:	f7fc ffa9 	bl	80001c8 <__aeabi_uldivmod>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4b0d      	ldr	r3, [pc, #52]	@ (80032b0 <UART_SetConfig+0x2d4>)
 800327c:	fba3 1302 	umull	r1, r3, r3, r2
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	2164      	movs	r1, #100	@ 0x64
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	3332      	adds	r3, #50	@ 0x32
 800328e:	4a08      	ldr	r2, [pc, #32]	@ (80032b0 <UART_SetConfig+0x2d4>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	f003 0207 	and.w	r2, r3, #7
 800329a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4422      	add	r2, r4
 80032a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032a4:	e106      	b.n	80034b4 <UART_SetConfig+0x4d8>
 80032a6:	bf00      	nop
 80032a8:	40011000 	.word	0x40011000
 80032ac:	40011400 	.word	0x40011400
 80032b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032b8:	2200      	movs	r2, #0
 80032ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032c6:	4642      	mov	r2, r8
 80032c8:	464b      	mov	r3, r9
 80032ca:	1891      	adds	r1, r2, r2
 80032cc:	6239      	str	r1, [r7, #32]
 80032ce:	415b      	adcs	r3, r3
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032d6:	4641      	mov	r1, r8
 80032d8:	1854      	adds	r4, r2, r1
 80032da:	4649      	mov	r1, r9
 80032dc:	eb43 0501 	adc.w	r5, r3, r1
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	00eb      	lsls	r3, r5, #3
 80032ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ee:	00e2      	lsls	r2, r4, #3
 80032f0:	4614      	mov	r4, r2
 80032f2:	461d      	mov	r5, r3
 80032f4:	4643      	mov	r3, r8
 80032f6:	18e3      	adds	r3, r4, r3
 80032f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032fc:	464b      	mov	r3, r9
 80032fe:	eb45 0303 	adc.w	r3, r5, r3
 8003302:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003312:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003322:	4629      	mov	r1, r5
 8003324:	008b      	lsls	r3, r1, #2
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800332c:	4621      	mov	r1, r4
 800332e:	008a      	lsls	r2, r1, #2
 8003330:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003334:	f7fc ff48 	bl	80001c8 <__aeabi_uldivmod>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4b60      	ldr	r3, [pc, #384]	@ (80034c0 <UART_SetConfig+0x4e4>)
 800333e:	fba3 2302 	umull	r2, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	011c      	lsls	r4, r3, #4
 8003346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800334a:	2200      	movs	r2, #0
 800334c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003350:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003354:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003358:	4642      	mov	r2, r8
 800335a:	464b      	mov	r3, r9
 800335c:	1891      	adds	r1, r2, r2
 800335e:	61b9      	str	r1, [r7, #24]
 8003360:	415b      	adcs	r3, r3
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003368:	4641      	mov	r1, r8
 800336a:	1851      	adds	r1, r2, r1
 800336c:	6139      	str	r1, [r7, #16]
 800336e:	4649      	mov	r1, r9
 8003370:	414b      	adcs	r3, r1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003380:	4659      	mov	r1, fp
 8003382:	00cb      	lsls	r3, r1, #3
 8003384:	4651      	mov	r1, sl
 8003386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800338a:	4651      	mov	r1, sl
 800338c:	00ca      	lsls	r2, r1, #3
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	4603      	mov	r3, r0
 8003394:	4642      	mov	r2, r8
 8003396:	189b      	adds	r3, r3, r2
 8003398:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800339c:	464b      	mov	r3, r9
 800339e:	460a      	mov	r2, r1
 80033a0:	eb42 0303 	adc.w	r3, r2, r3
 80033a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033c0:	4649      	mov	r1, r9
 80033c2:	008b      	lsls	r3, r1, #2
 80033c4:	4641      	mov	r1, r8
 80033c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ca:	4641      	mov	r1, r8
 80033cc:	008a      	lsls	r2, r1, #2
 80033ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033d2:	f7fc fef9 	bl	80001c8 <__aeabi_uldivmod>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4611      	mov	r1, r2
 80033dc:	4b38      	ldr	r3, [pc, #224]	@ (80034c0 <UART_SetConfig+0x4e4>)
 80033de:	fba3 2301 	umull	r2, r3, r3, r1
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2264      	movs	r2, #100	@ 0x64
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	1acb      	subs	r3, r1, r3
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	3332      	adds	r3, #50	@ 0x32
 80033f0:	4a33      	ldr	r2, [pc, #204]	@ (80034c0 <UART_SetConfig+0x4e4>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033fc:	441c      	add	r4, r3
 80033fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003402:	2200      	movs	r2, #0
 8003404:	673b      	str	r3, [r7, #112]	@ 0x70
 8003406:	677a      	str	r2, [r7, #116]	@ 0x74
 8003408:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800340c:	4642      	mov	r2, r8
 800340e:	464b      	mov	r3, r9
 8003410:	1891      	adds	r1, r2, r2
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	415b      	adcs	r3, r3
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800341c:	4641      	mov	r1, r8
 800341e:	1851      	adds	r1, r2, r1
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	4649      	mov	r1, r9
 8003424:	414b      	adcs	r3, r1
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003434:	4659      	mov	r1, fp
 8003436:	00cb      	lsls	r3, r1, #3
 8003438:	4651      	mov	r1, sl
 800343a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800343e:	4651      	mov	r1, sl
 8003440:	00ca      	lsls	r2, r1, #3
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	4603      	mov	r3, r0
 8003448:	4642      	mov	r2, r8
 800344a:	189b      	adds	r3, r3, r2
 800344c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800344e:	464b      	mov	r3, r9
 8003450:	460a      	mov	r2, r1
 8003452:	eb42 0303 	adc.w	r3, r2, r3
 8003456:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	663b      	str	r3, [r7, #96]	@ 0x60
 8003462:	667a      	str	r2, [r7, #100]	@ 0x64
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003470:	4649      	mov	r1, r9
 8003472:	008b      	lsls	r3, r1, #2
 8003474:	4641      	mov	r1, r8
 8003476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800347a:	4641      	mov	r1, r8
 800347c:	008a      	lsls	r2, r1, #2
 800347e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003482:	f7fc fea1 	bl	80001c8 <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <UART_SetConfig+0x4e4>)
 800348c:	fba3 1302 	umull	r1, r3, r3, r2
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	2164      	movs	r1, #100	@ 0x64
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	3332      	adds	r3, #50	@ 0x32
 800349e:	4a08      	ldr	r2, [pc, #32]	@ (80034c0 <UART_SetConfig+0x4e4>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4422      	add	r2, r4
 80034b2:	609a      	str	r2, [r3, #8]
}
 80034b4:	bf00      	nop
 80034b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034ba:	46bd      	mov	sp, r7
 80034bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034c0:	51eb851f 	.word	0x51eb851f

080034c4 <_7SEG_GPIO_Init>:
 */

#include "7seg.h"

void _7SEG_GPIO_Init()
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	@ 0x28
 80034c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	4b6b      	ldr	r3, [pc, #428]	@ (800367c <_7SEG_GPIO_Init+0x1b8>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	4a6a      	ldr	r2, [pc, #424]	@ (800367c <_7SEG_GPIO_Init+0x1b8>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034da:	4b68      	ldr	r3, [pc, #416]	@ (800367c <_7SEG_GPIO_Init+0x1b8>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b64      	ldr	r3, [pc, #400]	@ (800367c <_7SEG_GPIO_Init+0x1b8>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4a63      	ldr	r2, [pc, #396]	@ (800367c <_7SEG_GPIO_Init+0x1b8>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4b61      	ldr	r3, [pc, #388]	@ (800367c <_7SEG_GPIO_Init+0x1b8>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	4b5d      	ldr	r3, [pc, #372]	@ (800367c <_7SEG_GPIO_Init+0x1b8>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	4a5c      	ldr	r2, [pc, #368]	@ (800367c <_7SEG_GPIO_Init+0x1b8>)
 800350c:	f043 0308 	orr.w	r3, r3, #8
 8003510:	6313      	str	r3, [r2, #48]	@ 0x30
 8003512:	4b5a      	ldr	r3, [pc, #360]	@ (800367c <_7SEG_GPIO_Init+0x1b8>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	607b      	str	r3, [r7, #4]
 8003522:	4b56      	ldr	r3, [pc, #344]	@ (800367c <_7SEG_GPIO_Init+0x1b8>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	4a55      	ldr	r2, [pc, #340]	@ (800367c <_7SEG_GPIO_Init+0x1b8>)
 8003528:	f043 0310 	orr.w	r3, r3, #16
 800352c:	6313      	str	r3, [r2, #48]	@ 0x30
 800352e:	4b53      	ldr	r3, [pc, #332]	@ (800367c <_7SEG_GPIO_Init+0x1b8>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	607b      	str	r3, [r7, #4]
 8003538:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 800353a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800353e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003540:	2301      	movs	r3, #1
 8003542:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003548:	2300      	movs	r3, #0
 800354a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	4619      	mov	r1, r3
 8003552:	484b      	ldr	r0, [pc, #300]	@ (8003680 <_7SEG_GPIO_Init+0x1bc>)
 8003554:	f7fd feb0 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 8003558:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800355c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 800355e:	f107 0314 	add.w	r3, r7, #20
 8003562:	4619      	mov	r1, r3
 8003564:	4847      	ldr	r0, [pc, #284]	@ (8003684 <_7SEG_GPIO_Init+0x1c0>)
 8003566:	f7fd fea7 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 800356a:	2340      	movs	r3, #64	@ 0x40
 800356c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4619      	mov	r1, r3
 8003574:	4842      	ldr	r0, [pc, #264]	@ (8003680 <_7SEG_GPIO_Init+0x1bc>)
 8003576:	f7fd fe9f 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 800357a:	2320      	movs	r3, #32
 800357c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	4619      	mov	r1, r3
 8003584:	483e      	ldr	r0, [pc, #248]	@ (8003680 <_7SEG_GPIO_Init+0x1bc>)
 8003586:	f7fd fe97 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 800358a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800358e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4619      	mov	r1, r3
 8003596:	483c      	ldr	r0, [pc, #240]	@ (8003688 <_7SEG_GPIO_Init+0x1c4>)
 8003598:	f7fd fe8e 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 800359c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035a0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	4619      	mov	r1, r3
 80035a8:	4837      	ldr	r0, [pc, #220]	@ (8003688 <_7SEG_GPIO_Init+0x1c4>)
 80035aa:	f7fd fe85 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 80035ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035b2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 80035b4:	f107 0314 	add.w	r3, r7, #20
 80035b8:	4619      	mov	r1, r3
 80035ba:	4831      	ldr	r0, [pc, #196]	@ (8003680 <_7SEG_GPIO_Init+0x1bc>)
 80035bc:	f7fd fe7c 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 80035c0:	2380      	movs	r3, #128	@ 0x80
 80035c2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	4619      	mov	r1, r3
 80035ca:	482d      	ldr	r0, [pc, #180]	@ (8003680 <_7SEG_GPIO_Init+0x1bc>)
 80035cc:	f7fd fe74 	bl	80012b8 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 80035d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035d4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 80035d6:	f107 0314 	add.w	r3, r7, #20
 80035da:	4619      	mov	r1, r3
 80035dc:	482b      	ldr	r0, [pc, #172]	@ (800368c <_7SEG_GPIO_Init+0x1c8>)
 80035de:	f7fd fe6b 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 80035e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035e6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4619      	mov	r1, r3
 80035ee:	4827      	ldr	r0, [pc, #156]	@ (800368c <_7SEG_GPIO_Init+0x1c8>)
 80035f0:	f7fd fe62 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 80035f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035f8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	4619      	mov	r1, r3
 8003600:	4822      	ldr	r0, [pc, #136]	@ (800368c <_7SEG_GPIO_Init+0x1c8>)
 8003602:	f7fd fe59 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 8003606:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800360a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	4619      	mov	r1, r3
 8003612:	481e      	ldr	r0, [pc, #120]	@ (800368c <_7SEG_GPIO_Init+0x1c8>)
 8003614:	f7fd fe50 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 8003618:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800361c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 800361e:	f107 0314 	add.w	r3, r7, #20
 8003622:	4619      	mov	r1, r3
 8003624:	4819      	ldr	r0, [pc, #100]	@ (800368c <_7SEG_GPIO_Init+0x1c8>)
 8003626:	f7fd fe47 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 800362a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800362e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4619      	mov	r1, r3
 8003636:	4815      	ldr	r0, [pc, #84]	@ (800368c <_7SEG_GPIO_Init+0x1c8>)
 8003638:	f7fd fe3e 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 800363c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003640:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	4810      	ldr	r0, [pc, #64]	@ (800368c <_7SEG_GPIO_Init+0x1c8>)
 800364a:	f7fd fe35 	bl	80012b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 800364e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003652:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4619      	mov	r1, r3
 800365a:	480c      	ldr	r0, [pc, #48]	@ (800368c <_7SEG_GPIO_Init+0x1c8>)
 800365c:	f7fd fe2c 	bl	80012b8 <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 8003660:	2201      	movs	r2, #1
 8003662:	2100      	movs	r1, #0
 8003664:	2000      	movs	r0, #0
 8003666:	f000 f813 	bl	8003690 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 800366a:	2201      	movs	r2, #1
 800366c:	2100      	movs	r1, #0
 800366e:	2001      	movs	r0, #1
 8003670:	f000 f80e 	bl	8003690 <_7SEG_SetNumber>
}
 8003674:	bf00      	nop
 8003676:	3728      	adds	r7, #40	@ 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40023800 	.word	0x40023800
 8003680:	40020c00 	.word	0x40020c00
 8003684:	40020000 	.word	0x40020000
 8003688:	40020800 	.word	0x40020800
 800368c:	40021000 	.word	0x40021000

08003690 <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 81dc 	bne.w	8003a5c <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	4bcb      	ldr	r3, [pc, #812]	@ (80039d4 <_7SEG_SetNumber+0x344>)
 80036a8:	fb83 2301 	smull	r2, r3, r3, r1
 80036ac:	109a      	asrs	r2, r3, #2
 80036ae:	17cb      	asrs	r3, r1, #31
 80036b0:	1ad2      	subs	r2, r2, r3
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	1aca      	subs	r2, r1, r3
 80036bc:	2a09      	cmp	r2, #9
 80036be:	f200 81ba 	bhi.w	8003a36 <_7SEG_SetNumber+0x3a6>
 80036c2:	a301      	add	r3, pc, #4	@ (adr r3, 80036c8 <_7SEG_SetNumber+0x38>)
 80036c4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80036c8:	080036f1 	.word	0x080036f1
 80036cc:	08003743 	.word	0x08003743
 80036d0:	08003795 	.word	0x08003795
 80036d4:	080037e7 	.word	0x080037e7
 80036d8:	08003839 	.word	0x08003839
 80036dc:	0800388b 	.word	0x0800388b
 80036e0:	080038dd 	.word	0x080038dd
 80036e4:	0800392f 	.word	0x0800392f
 80036e8:	08003981 	.word	0x08003981
 80036ec:	080039e5 	.word	0x080039e5
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80036f6:	48b8      	ldr	r0, [pc, #736]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80036f8:	f7fd ff92 	bl	8001620 <HAL_GPIO_WritePin>
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003702:	48b6      	ldr	r0, [pc, #728]	@ (80039dc <_7SEG_SetNumber+0x34c>)
 8003704:	f7fd ff8c 	bl	8001620 <HAL_GPIO_WritePin>
 8003708:	2200      	movs	r2, #0
 800370a:	2140      	movs	r1, #64	@ 0x40
 800370c:	48b2      	ldr	r0, [pc, #712]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 800370e:	f7fd ff87 	bl	8001620 <HAL_GPIO_WritePin>
 8003712:	2200      	movs	r2, #0
 8003714:	2120      	movs	r1, #32
 8003716:	48b0      	ldr	r0, [pc, #704]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 8003718:	f7fd ff82 	bl	8001620 <HAL_GPIO_WritePin>
 800371c:	2200      	movs	r2, #0
 800371e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003722:	48af      	ldr	r0, [pc, #700]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 8003724:	f7fd ff7c 	bl	8001620 <HAL_GPIO_WritePin>
 8003728:	2200      	movs	r2, #0
 800372a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800372e:	48ac      	ldr	r0, [pc, #688]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 8003730:	f7fd ff76 	bl	8001620 <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 8003734:	2201      	movs	r2, #1
 8003736:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800373a:	48a7      	ldr	r0, [pc, #668]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 800373c:	f7fd ff70 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003740:	e179      	b.n	8003a36 <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 8003742:	2200      	movs	r2, #0
 8003744:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003748:	48a4      	ldr	r0, [pc, #656]	@ (80039dc <_7SEG_SetNumber+0x34c>)
 800374a:	f7fd ff69 	bl	8001620 <HAL_GPIO_WritePin>
 800374e:	2200      	movs	r2, #0
 8003750:	2140      	movs	r1, #64	@ 0x40
 8003752:	48a1      	ldr	r0, [pc, #644]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 8003754:	f7fd ff64 	bl	8001620 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 8003758:	2201      	movs	r2, #1
 800375a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800375e:	489e      	ldr	r0, [pc, #632]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 8003760:	f7fd ff5e 	bl	8001620 <HAL_GPIO_WritePin>
 8003764:	2201      	movs	r2, #1
 8003766:	2120      	movs	r1, #32
 8003768:	489b      	ldr	r0, [pc, #620]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 800376a:	f7fd ff59 	bl	8001620 <HAL_GPIO_WritePin>
 800376e:	2201      	movs	r2, #1
 8003770:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003774:	489a      	ldr	r0, [pc, #616]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 8003776:	f7fd ff53 	bl	8001620 <HAL_GPIO_WritePin>
 800377a:	2201      	movs	r2, #1
 800377c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003780:	4897      	ldr	r0, [pc, #604]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 8003782:	f7fd ff4d 	bl	8001620 <HAL_GPIO_WritePin>
 8003786:	2201      	movs	r2, #1
 8003788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800378c:	4892      	ldr	r0, [pc, #584]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 800378e:	f7fd ff47 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003792:	e150      	b.n	8003a36 <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8003794:	2200      	movs	r2, #0
 8003796:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800379a:	488f      	ldr	r0, [pc, #572]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 800379c:	f7fd ff40 	bl	8001620 <HAL_GPIO_WritePin>
 80037a0:	2200      	movs	r2, #0
 80037a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037a6:	488d      	ldr	r0, [pc, #564]	@ (80039dc <_7SEG_SetNumber+0x34c>)
 80037a8:	f7fd ff3a 	bl	8001620 <HAL_GPIO_WritePin>
 80037ac:	2200      	movs	r2, #0
 80037ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037b2:	4889      	ldr	r0, [pc, #548]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80037b4:	f7fd ff34 	bl	8001620 <HAL_GPIO_WritePin>
 80037b8:	2200      	movs	r2, #0
 80037ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037be:	4888      	ldr	r0, [pc, #544]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 80037c0:	f7fd ff2e 	bl	8001620 <HAL_GPIO_WritePin>
 80037c4:	2200      	movs	r2, #0
 80037c6:	2120      	movs	r1, #32
 80037c8:	4883      	ldr	r0, [pc, #524]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80037ca:	f7fd ff29 	bl	8001620 <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 80037ce:	2201      	movs	r2, #1
 80037d0:	2140      	movs	r1, #64	@ 0x40
 80037d2:	4881      	ldr	r0, [pc, #516]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80037d4:	f7fd ff24 	bl	8001620 <HAL_GPIO_WritePin>
 80037d8:	2201      	movs	r2, #1
 80037da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037de:	4880      	ldr	r0, [pc, #512]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 80037e0:	f7fd ff1e 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 80037e4:	e127      	b.n	8003a36 <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 80037e6:	2200      	movs	r2, #0
 80037e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80037ec:	487a      	ldr	r0, [pc, #488]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80037ee:	f7fd ff17 	bl	8001620 <HAL_GPIO_WritePin>
 80037f2:	2200      	movs	r2, #0
 80037f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037f8:	4878      	ldr	r0, [pc, #480]	@ (80039dc <_7SEG_SetNumber+0x34c>)
 80037fa:	f7fd ff11 	bl	8001620 <HAL_GPIO_WritePin>
 80037fe:	2200      	movs	r2, #0
 8003800:	2140      	movs	r1, #64	@ 0x40
 8003802:	4875      	ldr	r0, [pc, #468]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 8003804:	f7fd ff0c 	bl	8001620 <HAL_GPIO_WritePin>
 8003808:	2200      	movs	r2, #0
 800380a:	2120      	movs	r1, #32
 800380c:	4872      	ldr	r0, [pc, #456]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 800380e:	f7fd ff07 	bl	8001620 <HAL_GPIO_WritePin>
 8003812:	2200      	movs	r2, #0
 8003814:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003818:	486f      	ldr	r0, [pc, #444]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 800381a:	f7fd ff01 	bl	8001620 <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 800381e:	2201      	movs	r2, #1
 8003820:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003824:	486e      	ldr	r0, [pc, #440]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 8003826:	f7fd fefb 	bl	8001620 <HAL_GPIO_WritePin>
 800382a:	2201      	movs	r2, #1
 800382c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003830:	486b      	ldr	r0, [pc, #428]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 8003832:	f7fd fef5 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003836:	e0fe      	b.n	8003a36 <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 8003838:	2200      	movs	r2, #0
 800383a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800383e:	4868      	ldr	r0, [pc, #416]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 8003840:	f7fd feee 	bl	8001620 <HAL_GPIO_WritePin>
 8003844:	2200      	movs	r2, #0
 8003846:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800384a:	4863      	ldr	r0, [pc, #396]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 800384c:	f7fd fee8 	bl	8001620 <HAL_GPIO_WritePin>
 8003850:	2200      	movs	r2, #0
 8003852:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003856:	4861      	ldr	r0, [pc, #388]	@ (80039dc <_7SEG_SetNumber+0x34c>)
 8003858:	f7fd fee2 	bl	8001620 <HAL_GPIO_WritePin>
 800385c:	2200      	movs	r2, #0
 800385e:	2140      	movs	r1, #64	@ 0x40
 8003860:	485d      	ldr	r0, [pc, #372]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 8003862:	f7fd fedd 	bl	8001620 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8003866:	2201      	movs	r2, #1
 8003868:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800386c:	485a      	ldr	r0, [pc, #360]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 800386e:	f7fd fed7 	bl	8001620 <HAL_GPIO_WritePin>
 8003872:	2201      	movs	r2, #1
 8003874:	2120      	movs	r1, #32
 8003876:	4858      	ldr	r0, [pc, #352]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 8003878:	f7fd fed2 	bl	8001620 <HAL_GPIO_WritePin>
 800387c:	2201      	movs	r2, #1
 800387e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003882:	4857      	ldr	r0, [pc, #348]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 8003884:	f7fd fecc 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003888:	e0d5      	b.n	8003a36 <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 800388a:	2200      	movs	r2, #0
 800388c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003890:	4851      	ldr	r0, [pc, #324]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 8003892:	f7fd fec5 	bl	8001620 <HAL_GPIO_WritePin>
 8003896:	2200      	movs	r2, #0
 8003898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800389c:	4850      	ldr	r0, [pc, #320]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 800389e:	f7fd febf 	bl	8001620 <HAL_GPIO_WritePin>
 80038a2:	2200      	movs	r2, #0
 80038a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038a8:	484b      	ldr	r0, [pc, #300]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80038aa:	f7fd feb9 	bl	8001620 <HAL_GPIO_WritePin>
 80038ae:	2200      	movs	r2, #0
 80038b0:	2140      	movs	r1, #64	@ 0x40
 80038b2:	4849      	ldr	r0, [pc, #292]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80038b4:	f7fd feb4 	bl	8001620 <HAL_GPIO_WritePin>
 80038b8:	2200      	movs	r2, #0
 80038ba:	2120      	movs	r1, #32
 80038bc:	4846      	ldr	r0, [pc, #280]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80038be:	f7fd feaf 	bl	8001620 <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 80038c2:	2201      	movs	r2, #1
 80038c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038c8:	4844      	ldr	r0, [pc, #272]	@ (80039dc <_7SEG_SetNumber+0x34c>)
 80038ca:	f7fd fea9 	bl	8001620 <HAL_GPIO_WritePin>
 80038ce:	2201      	movs	r2, #1
 80038d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038d4:	4842      	ldr	r0, [pc, #264]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 80038d6:	f7fd fea3 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 80038da:	e0ac      	b.n	8003a36 <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 80038dc:	2200      	movs	r2, #0
 80038de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038e2:	483d      	ldr	r0, [pc, #244]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80038e4:	f7fd fe9c 	bl	8001620 <HAL_GPIO_WritePin>
 80038e8:	2200      	movs	r2, #0
 80038ea:	2140      	movs	r1, #64	@ 0x40
 80038ec:	483a      	ldr	r0, [pc, #232]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80038ee:	f7fd fe97 	bl	8001620 <HAL_GPIO_WritePin>
 80038f2:	2200      	movs	r2, #0
 80038f4:	2120      	movs	r1, #32
 80038f6:	4838      	ldr	r0, [pc, #224]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80038f8:	f7fd fe92 	bl	8001620 <HAL_GPIO_WritePin>
 80038fc:	2200      	movs	r2, #0
 80038fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003902:	4837      	ldr	r0, [pc, #220]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 8003904:	f7fd fe8c 	bl	8001620 <HAL_GPIO_WritePin>
 8003908:	2200      	movs	r2, #0
 800390a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800390e:	4834      	ldr	r0, [pc, #208]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 8003910:	f7fd fe86 	bl	8001620 <HAL_GPIO_WritePin>
 8003914:	2200      	movs	r2, #0
 8003916:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800391a:	482f      	ldr	r0, [pc, #188]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 800391c:	f7fd fe80 	bl	8001620 <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 8003920:	2201      	movs	r2, #1
 8003922:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003926:	482d      	ldr	r0, [pc, #180]	@ (80039dc <_7SEG_SetNumber+0x34c>)
 8003928:	f7fd fe7a 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 800392c:	e083      	b.n	8003a36 <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 800392e:	2200      	movs	r2, #0
 8003930:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003934:	482a      	ldr	r0, [pc, #168]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 8003936:	f7fd fe73 	bl	8001620 <HAL_GPIO_WritePin>
 800393a:	2200      	movs	r2, #0
 800393c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003940:	4825      	ldr	r0, [pc, #148]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 8003942:	f7fd fe6d 	bl	8001620 <HAL_GPIO_WritePin>
 8003946:	2200      	movs	r2, #0
 8003948:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800394c:	4823      	ldr	r0, [pc, #140]	@ (80039dc <_7SEG_SetNumber+0x34c>)
 800394e:	f7fd fe67 	bl	8001620 <HAL_GPIO_WritePin>
 8003952:	2200      	movs	r2, #0
 8003954:	2140      	movs	r1, #64	@ 0x40
 8003956:	4820      	ldr	r0, [pc, #128]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 8003958:	f7fd fe62 	bl	8001620 <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 800395c:	2201      	movs	r2, #1
 800395e:	2120      	movs	r1, #32
 8003960:	481d      	ldr	r0, [pc, #116]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 8003962:	f7fd fe5d 	bl	8001620 <HAL_GPIO_WritePin>
 8003966:	2201      	movs	r2, #1
 8003968:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800396c:	481c      	ldr	r0, [pc, #112]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 800396e:	f7fd fe57 	bl	8001620 <HAL_GPIO_WritePin>
 8003972:	2201      	movs	r2, #1
 8003974:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003978:	4817      	ldr	r0, [pc, #92]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 800397a:	f7fd fe51 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 800397e:	e05a      	b.n	8003a36 <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8003980:	2200      	movs	r2, #0
 8003982:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003986:	4814      	ldr	r0, [pc, #80]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 8003988:	f7fd fe4a 	bl	8001620 <HAL_GPIO_WritePin>
 800398c:	2200      	movs	r2, #0
 800398e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003992:	4812      	ldr	r0, [pc, #72]	@ (80039dc <_7SEG_SetNumber+0x34c>)
 8003994:	f7fd fe44 	bl	8001620 <HAL_GPIO_WritePin>
 8003998:	2200      	movs	r2, #0
 800399a:	2140      	movs	r1, #64	@ 0x40
 800399c:	480e      	ldr	r0, [pc, #56]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 800399e:	f7fd fe3f 	bl	8001620 <HAL_GPIO_WritePin>
 80039a2:	2200      	movs	r2, #0
 80039a4:	2120      	movs	r1, #32
 80039a6:	480c      	ldr	r0, [pc, #48]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80039a8:	f7fd fe3a 	bl	8001620 <HAL_GPIO_WritePin>
 80039ac:	2200      	movs	r2, #0
 80039ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039b2:	480b      	ldr	r0, [pc, #44]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 80039b4:	f7fd fe34 	bl	8001620 <HAL_GPIO_WritePin>
 80039b8:	2200      	movs	r2, #0
 80039ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80039be:	4808      	ldr	r0, [pc, #32]	@ (80039e0 <_7SEG_SetNumber+0x350>)
 80039c0:	f7fd fe2e 	bl	8001620 <HAL_GPIO_WritePin>
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039ca:	4803      	ldr	r0, [pc, #12]	@ (80039d8 <_7SEG_SetNumber+0x348>)
 80039cc:	f7fd fe28 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 80039d0:	e031      	b.n	8003a36 <_7SEG_SetNumber+0x3a6>
 80039d2:	bf00      	nop
 80039d4:	66666667 	.word	0x66666667
 80039d8:	40020c00 	.word	0x40020c00
 80039dc:	40020000 	.word	0x40020000
 80039e0:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 80039e4:	2200      	movs	r2, #0
 80039e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039ea:	48c8      	ldr	r0, [pc, #800]	@ (8003d0c <_7SEG_SetNumber+0x67c>)
 80039ec:	f7fd fe18 	bl	8001620 <HAL_GPIO_WritePin>
 80039f0:	2200      	movs	r2, #0
 80039f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039f6:	48c6      	ldr	r0, [pc, #792]	@ (8003d10 <_7SEG_SetNumber+0x680>)
 80039f8:	f7fd fe12 	bl	8001620 <HAL_GPIO_WritePin>
 80039fc:	2200      	movs	r2, #0
 80039fe:	2140      	movs	r1, #64	@ 0x40
 8003a00:	48c2      	ldr	r0, [pc, #776]	@ (8003d0c <_7SEG_SetNumber+0x67c>)
 8003a02:	f7fd fe0d 	bl	8001620 <HAL_GPIO_WritePin>
 8003a06:	2200      	movs	r2, #0
 8003a08:	2120      	movs	r1, #32
 8003a0a:	48c0      	ldr	r0, [pc, #768]	@ (8003d0c <_7SEG_SetNumber+0x67c>)
 8003a0c:	f7fd fe08 	bl	8001620 <HAL_GPIO_WritePin>
 8003a10:	2200      	movs	r2, #0
 8003a12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a16:	48bf      	ldr	r0, [pc, #764]	@ (8003d14 <_7SEG_SetNumber+0x684>)
 8003a18:	f7fd fe02 	bl	8001620 <HAL_GPIO_WritePin>
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a22:	48ba      	ldr	r0, [pc, #744]	@ (8003d0c <_7SEG_SetNumber+0x67c>)
 8003a24:	f7fd fdfc 	bl	8001620 <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a2e:	48b9      	ldr	r0, [pc, #740]	@ (8003d14 <_7SEG_SetNumber+0x684>)
 8003a30:	f7fd fdf6 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003a34:	bf00      	nop
		}

		if(dp == ON)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d105      	bne.n	8003a48 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2180      	movs	r1, #128	@ 0x80
 8003a40:	48b2      	ldr	r0, [pc, #712]	@ (8003d0c <_7SEG_SetNumber+0x67c>)
 8003a42:	f7fd fded 	bl	8001620 <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8003a46:	e1ff      	b.n	8003e48 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f040 81fc 	bne.w	8003e48 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8003a50:	2201      	movs	r2, #1
 8003a52:	2180      	movs	r1, #128	@ 0x80
 8003a54:	48ad      	ldr	r0, [pc, #692]	@ (8003d0c <_7SEG_SetNumber+0x67c>)
 8003a56:	f7fd fde3 	bl	8001620 <HAL_GPIO_WritePin>
}
 8003a5a:	e1f5      	b.n	8003e48 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	f040 81f2 	bne.w	8003e48 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	4bac      	ldr	r3, [pc, #688]	@ (8003d18 <_7SEG_SetNumber+0x688>)
 8003a68:	fb83 2301 	smull	r2, r3, r3, r1
 8003a6c:	109a      	asrs	r2, r3, #2
 8003a6e:	17cb      	asrs	r3, r1, #31
 8003a70:	1ad2      	subs	r2, r2, r3
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	1aca      	subs	r2, r1, r3
 8003a7c:	2a09      	cmp	r2, #9
 8003a7e:	f200 81d0 	bhi.w	8003e22 <_7SEG_SetNumber+0x792>
 8003a82:	a301      	add	r3, pc, #4	@ (adr r3, 8003a88 <_7SEG_SetNumber+0x3f8>)
 8003a84:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003b07 	.word	0x08003b07
 8003a90:	08003b5d 	.word	0x08003b5d
 8003a94:	08003bb3 	.word	0x08003bb3
 8003a98:	08003c09 	.word	0x08003c09
 8003a9c:	08003c5f 	.word	0x08003c5f
 8003aa0:	08003cb5 	.word	0x08003cb5
 8003aa4:	08003d21 	.word	0x08003d21
 8003aa8:	08003d77 	.word	0x08003d77
 8003aac:	08003dcd 	.word	0x08003dcd
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ab6:	4899      	ldr	r0, [pc, #612]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003ab8:	f7fd fdb2 	bl	8001620 <HAL_GPIO_WritePin>
 8003abc:	2200      	movs	r2, #0
 8003abe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ac2:	4896      	ldr	r0, [pc, #600]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003ac4:	f7fd fdac 	bl	8001620 <HAL_GPIO_WritePin>
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ace:	4893      	ldr	r0, [pc, #588]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003ad0:	f7fd fda6 	bl	8001620 <HAL_GPIO_WritePin>
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ada:	4890      	ldr	r0, [pc, #576]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003adc:	f7fd fda0 	bl	8001620 <HAL_GPIO_WritePin>
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ae6:	488d      	ldr	r0, [pc, #564]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003ae8:	f7fd fd9a 	bl	8001620 <HAL_GPIO_WritePin>
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003af2:	488a      	ldr	r0, [pc, #552]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003af4:	f7fd fd94 	bl	8001620 <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8003af8:	2201      	movs	r2, #1
 8003afa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003afe:	4887      	ldr	r0, [pc, #540]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b00:	f7fd fd8e 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003b04:	e18d      	b.n	8003e22 <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8003b06:	2200      	movs	r2, #0
 8003b08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b0c:	4883      	ldr	r0, [pc, #524]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b0e:	f7fd fd87 	bl	8001620 <HAL_GPIO_WritePin>
 8003b12:	2200      	movs	r2, #0
 8003b14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b18:	4880      	ldr	r0, [pc, #512]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b1a:	f7fd fd81 	bl	8001620 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b24:	487d      	ldr	r0, [pc, #500]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b26:	f7fd fd7b 	bl	8001620 <HAL_GPIO_WritePin>
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b30:	487a      	ldr	r0, [pc, #488]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b32:	f7fd fd75 	bl	8001620 <HAL_GPIO_WritePin>
 8003b36:	2201      	movs	r2, #1
 8003b38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b3c:	4877      	ldr	r0, [pc, #476]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b3e:	f7fd fd6f 	bl	8001620 <HAL_GPIO_WritePin>
 8003b42:	2201      	movs	r2, #1
 8003b44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b48:	4874      	ldr	r0, [pc, #464]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b4a:	f7fd fd69 	bl	8001620 <HAL_GPIO_WritePin>
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b54:	4871      	ldr	r0, [pc, #452]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b56:	f7fd fd63 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003b5a:	e162      	b.n	8003e22 <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b62:	486e      	ldr	r0, [pc, #440]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b64:	f7fd fd5c 	bl	8001620 <HAL_GPIO_WritePin>
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b6e:	486b      	ldr	r0, [pc, #428]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b70:	f7fd fd56 	bl	8001620 <HAL_GPIO_WritePin>
 8003b74:	2200      	movs	r2, #0
 8003b76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b7a:	4868      	ldr	r0, [pc, #416]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b7c:	f7fd fd50 	bl	8001620 <HAL_GPIO_WritePin>
 8003b80:	2200      	movs	r2, #0
 8003b82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b86:	4865      	ldr	r0, [pc, #404]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b88:	f7fd fd4a 	bl	8001620 <HAL_GPIO_WritePin>
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b92:	4862      	ldr	r0, [pc, #392]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003b94:	f7fd fd44 	bl	8001620 <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b9e:	485f      	ldr	r0, [pc, #380]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003ba0:	f7fd fd3e 	bl	8001620 <HAL_GPIO_WritePin>
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003baa:	485c      	ldr	r0, [pc, #368]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003bac:	f7fd fd38 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003bb0:	e137      	b.n	8003e22 <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003bb8:	4858      	ldr	r0, [pc, #352]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003bba:	f7fd fd31 	bl	8001620 <HAL_GPIO_WritePin>
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003bc4:	4855      	ldr	r0, [pc, #340]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003bc6:	f7fd fd2b 	bl	8001620 <HAL_GPIO_WritePin>
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bd0:	4852      	ldr	r0, [pc, #328]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003bd2:	f7fd fd25 	bl	8001620 <HAL_GPIO_WritePin>
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003bdc:	484f      	ldr	r0, [pc, #316]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003bde:	f7fd fd1f 	bl	8001620 <HAL_GPIO_WritePin>
 8003be2:	2200      	movs	r2, #0
 8003be4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003be8:	484c      	ldr	r0, [pc, #304]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003bea:	f7fd fd19 	bl	8001620 <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bf4:	4849      	ldr	r0, [pc, #292]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003bf6:	f7fd fd13 	bl	8001620 <HAL_GPIO_WritePin>
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c00:	4846      	ldr	r0, [pc, #280]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c02:	f7fd fd0d 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003c06:	e10c      	b.n	8003e22 <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c0e:	4843      	ldr	r0, [pc, #268]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c10:	f7fd fd06 	bl	8001620 <HAL_GPIO_WritePin>
 8003c14:	2200      	movs	r2, #0
 8003c16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c1a:	4840      	ldr	r0, [pc, #256]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c1c:	f7fd fd00 	bl	8001620 <HAL_GPIO_WritePin>
 8003c20:	2200      	movs	r2, #0
 8003c22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c26:	483d      	ldr	r0, [pc, #244]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c28:	f7fd fcfa 	bl	8001620 <HAL_GPIO_WritePin>
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c32:	483a      	ldr	r0, [pc, #232]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c34:	f7fd fcf4 	bl	8001620 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c3e:	4837      	ldr	r0, [pc, #220]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c40:	f7fd fcee 	bl	8001620 <HAL_GPIO_WritePin>
 8003c44:	2201      	movs	r2, #1
 8003c46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c4a:	4834      	ldr	r0, [pc, #208]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c4c:	f7fd fce8 	bl	8001620 <HAL_GPIO_WritePin>
 8003c50:	2201      	movs	r2, #1
 8003c52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c56:	4831      	ldr	r0, [pc, #196]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c58:	f7fd fce2 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003c5c:	e0e1      	b.n	8003e22 <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c64:	482d      	ldr	r0, [pc, #180]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c66:	f7fd fcdb 	bl	8001620 <HAL_GPIO_WritePin>
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c70:	482a      	ldr	r0, [pc, #168]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c72:	f7fd fcd5 	bl	8001620 <HAL_GPIO_WritePin>
 8003c76:	2200      	movs	r2, #0
 8003c78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c7c:	4827      	ldr	r0, [pc, #156]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c7e:	f7fd fccf 	bl	8001620 <HAL_GPIO_WritePin>
 8003c82:	2200      	movs	r2, #0
 8003c84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c88:	4824      	ldr	r0, [pc, #144]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c8a:	f7fd fcc9 	bl	8001620 <HAL_GPIO_WritePin>
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c94:	4821      	ldr	r0, [pc, #132]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003c96:	f7fd fcc3 	bl	8001620 <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ca0:	481e      	ldr	r0, [pc, #120]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003ca2:	f7fd fcbd 	bl	8001620 <HAL_GPIO_WritePin>
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cac:	481b      	ldr	r0, [pc, #108]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003cae:	f7fd fcb7 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003cb2:	e0b6      	b.n	8003e22 <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003cba:	4818      	ldr	r0, [pc, #96]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003cbc:	f7fd fcb0 	bl	8001620 <HAL_GPIO_WritePin>
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cc6:	4815      	ldr	r0, [pc, #84]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003cc8:	f7fd fcaa 	bl	8001620 <HAL_GPIO_WritePin>
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003cd2:	4812      	ldr	r0, [pc, #72]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003cd4:	f7fd fca4 	bl	8001620 <HAL_GPIO_WritePin>
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cde:	480f      	ldr	r0, [pc, #60]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003ce0:	f7fd fc9e 	bl	8001620 <HAL_GPIO_WritePin>
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cea:	480c      	ldr	r0, [pc, #48]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003cec:	f7fd fc98 	bl	8001620 <HAL_GPIO_WritePin>
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003cf6:	4809      	ldr	r0, [pc, #36]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003cf8:	f7fd fc92 	bl	8001620 <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d02:	4806      	ldr	r0, [pc, #24]	@ (8003d1c <_7SEG_SetNumber+0x68c>)
 8003d04:	f7fd fc8c 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003d08:	e08b      	b.n	8003e22 <_7SEG_SetNumber+0x792>
 8003d0a:	bf00      	nop
 8003d0c:	40020c00 	.word	0x40020c00
 8003d10:	40020000 	.word	0x40020000
 8003d14:	40020800 	.word	0x40020800
 8003d18:	66666667 	.word	0x66666667
 8003d1c:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8003d20:	2200      	movs	r2, #0
 8003d22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d26:	484a      	ldr	r0, [pc, #296]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003d28:	f7fd fc7a 	bl	8001620 <HAL_GPIO_WritePin>
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d32:	4847      	ldr	r0, [pc, #284]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003d34:	f7fd fc74 	bl	8001620 <HAL_GPIO_WritePin>
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d3e:	4844      	ldr	r0, [pc, #272]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003d40:	f7fd fc6e 	bl	8001620 <HAL_GPIO_WritePin>
 8003d44:	2200      	movs	r2, #0
 8003d46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d4a:	4841      	ldr	r0, [pc, #260]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003d4c:	f7fd fc68 	bl	8001620 <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8003d50:	2201      	movs	r2, #1
 8003d52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003d56:	483e      	ldr	r0, [pc, #248]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003d58:	f7fd fc62 	bl	8001620 <HAL_GPIO_WritePin>
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d62:	483b      	ldr	r0, [pc, #236]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003d64:	f7fd fc5c 	bl	8001620 <HAL_GPIO_WritePin>
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d6e:	4838      	ldr	r0, [pc, #224]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003d70:	f7fd fc56 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003d74:	e055      	b.n	8003e22 <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8003d76:	2200      	movs	r2, #0
 8003d78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d7c:	4834      	ldr	r0, [pc, #208]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003d7e:	f7fd fc4f 	bl	8001620 <HAL_GPIO_WritePin>
 8003d82:	2200      	movs	r2, #0
 8003d84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d88:	4831      	ldr	r0, [pc, #196]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003d8a:	f7fd fc49 	bl	8001620 <HAL_GPIO_WritePin>
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d94:	482e      	ldr	r0, [pc, #184]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003d96:	f7fd fc43 	bl	8001620 <HAL_GPIO_WritePin>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003da0:	482b      	ldr	r0, [pc, #172]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003da2:	f7fd fc3d 	bl	8001620 <HAL_GPIO_WritePin>
 8003da6:	2200      	movs	r2, #0
 8003da8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dac:	4828      	ldr	r0, [pc, #160]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003dae:	f7fd fc37 	bl	8001620 <HAL_GPIO_WritePin>
 8003db2:	2200      	movs	r2, #0
 8003db4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003db8:	4825      	ldr	r0, [pc, #148]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003dba:	f7fd fc31 	bl	8001620 <HAL_GPIO_WritePin>
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003dc4:	4822      	ldr	r0, [pc, #136]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003dc6:	f7fd fc2b 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003dca:	e02a      	b.n	8003e22 <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dd2:	481f      	ldr	r0, [pc, #124]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003dd4:	f7fd fc24 	bl	8001620 <HAL_GPIO_WritePin>
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003dde:	481c      	ldr	r0, [pc, #112]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003de0:	f7fd fc1e 	bl	8001620 <HAL_GPIO_WritePin>
 8003de4:	2200      	movs	r2, #0
 8003de6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003dea:	4819      	ldr	r0, [pc, #100]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003dec:	f7fd fc18 	bl	8001620 <HAL_GPIO_WritePin>
 8003df0:	2200      	movs	r2, #0
 8003df2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003df6:	4816      	ldr	r0, [pc, #88]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003df8:	f7fd fc12 	bl	8001620 <HAL_GPIO_WritePin>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e02:	4813      	ldr	r0, [pc, #76]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003e04:	f7fd fc0c 	bl	8001620 <HAL_GPIO_WritePin>
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e0e:	4810      	ldr	r0, [pc, #64]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003e10:	f7fd fc06 	bl	8001620 <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8003e14:	2201      	movs	r2, #1
 8003e16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e1a:	480d      	ldr	r0, [pc, #52]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003e1c:	f7fd fc00 	bl	8001620 <HAL_GPIO_WritePin>
				break;
 8003e20:	bf00      	nop
		if(dp == ON)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d106      	bne.n	8003e36 <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e2e:	4808      	ldr	r0, [pc, #32]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003e30:	f7fd fbf6 	bl	8001620 <HAL_GPIO_WritePin>
}
 8003e34:	e008      	b.n	8003e48 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e42:	4803      	ldr	r0, [pc, #12]	@ (8003e50 <_7SEG_SetNumber+0x7c0>)
 8003e44:	f7fd fbec 	bl	8001620 <HAL_GPIO_WritePin>
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000

08003e54 <get_mode>:
#include <_001_mode.h>

Mode mode;

Mode* get_mode(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
	return &mode;
 8003e58:	4b02      	ldr	r3, [pc, #8]	@ (8003e64 <get_mode+0x10>)
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	2000015c 	.word	0x2000015c

08003e68 <count_up>:
		get_recorded_time,
		get_time
};

static void count_up(Timer* this)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	this->count++;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	605a      	str	r2, [r3, #4]
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <set_count>:

static void set_count(Timer* this, uint32_t count)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
	this->count = count;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	605a      	str	r2, [r3, #4]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <record_count>:

static void record_count(Timer* this)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
	this->recorded_count = this->count;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	609a      	str	r2, [r3, #8]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <get_recorded_count>:

static uint32_t get_recorded_count(Timer* this)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
	return this->recorded_count;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <record_time>:

static void record_time(Timer* this, Time* time)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
	this->time = time;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	601a      	str	r2, [r3, #0]
	this->time->hours             = this->count / 3600000 % 24;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4a26      	ldr	r2, [pc, #152]	@ (8003f88 <record_time+0xb0>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0d59      	lsrs	r1, r3, #21
 8003ef4:	4b25      	ldr	r3, [pc, #148]	@ (8003f8c <record_time+0xb4>)
 8003ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8003efa:	091a      	lsrs	r2, r3, #4
 8003efc:	4613      	mov	r3, r2
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	4413      	add	r3, r2
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	1aca      	subs	r2, r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]
	this->time->minutes           = this->count / 60000 % 60;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	4a1f      	ldr	r2, [pc, #124]	@ (8003f90 <record_time+0xb8>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	0b99      	lsrs	r1, r3, #14
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f94 <record_time+0xbc>)
 8003f1c:	fba3 2301 	umull	r2, r3, r3, r1
 8003f20:	095a      	lsrs	r2, r3, #5
 8003f22:	4613      	mov	r3, r2
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	1aca      	subs	r2, r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	705a      	strb	r2, [r3, #1]
	this->time->seconds           = this->count / 1000 % 60;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4a17      	ldr	r2, [pc, #92]	@ (8003f98 <record_time+0xc0>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	0999      	lsrs	r1, r3, #6
 8003f40:	4b14      	ldr	r3, [pc, #80]	@ (8003f94 <record_time+0xbc>)
 8003f42:	fba3 2301 	umull	r2, r3, r3, r1
 8003f46:	095a      	lsrs	r2, r3, #5
 8003f48:	4613      	mov	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	1aca      	subs	r2, r1, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	709a      	strb	r2, [r3, #2]
	this->time->_100_milliseconds = this->count / 100;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8003f9c <record_time+0xc4>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	095a      	lsrs	r2, r3, #5
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	70da      	strb	r2, [r3, #3]
	this->time->milliseconds      = this->count;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	711a      	strb	r2, [r3, #4]
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	95217cb1 	.word	0x95217cb1
 8003f8c:	aaaaaaab 	.word	0xaaaaaaab
 8003f90:	45e7b273 	.word	0x45e7b273
 8003f94:	88888889 	.word	0x88888889
 8003f98:	10624dd3 	.word	0x10624dd3
 8003f9c:	51eb851f 	.word	0x51eb851f

08003fa0 <get_recorded_time>:

static uint8_t get_recorded_time(Timer* this, Time* time, TimeKind time_kind)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	71fb      	strb	r3, [r7, #7]
	this->time = time;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	601a      	str	r2, [r3, #0]
	switch(time_kind)
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d820      	bhi.n	8003ffc <get_recorded_time+0x5c>
 8003fba:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc0 <get_recorded_time+0x20>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003fd5 	.word	0x08003fd5
 8003fc4:	08003fdd 	.word	0x08003fdd
 8003fc8:	08003fe5 	.word	0x08003fe5
 8003fcc:	08003fed 	.word	0x08003fed
 8003fd0:	08003ff5 	.word	0x08003ff5
	{
	case HOURS:
		return this->time->hours;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	e011      	b.n	8004000 <get_recorded_time+0x60>
		break;
	case MINUTES:
		return this->time->minutes;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	785b      	ldrb	r3, [r3, #1]
 8003fe2:	e00d      	b.n	8004000 <get_recorded_time+0x60>
		break;
	case SECONDS:
		return this->time->seconds;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	789b      	ldrb	r3, [r3, #2]
 8003fea:	e009      	b.n	8004000 <get_recorded_time+0x60>
		break;
	case _100_MILLISECONDS:
		return this->time->_100_milliseconds;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	78db      	ldrb	r3, [r3, #3]
 8003ff2:	e005      	b.n	8004000 <get_recorded_time+0x60>
		break;
	case MILLISECONDS:
		return this->time->milliseconds;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	791b      	ldrb	r3, [r3, #4]
 8003ffa:	e001      	b.n	8004000 <get_recorded_time+0x60>
		break;
	default:
		break;
 8003ffc:	bf00      	nop
	}

	return -1;
 8003ffe:	23ff      	movs	r3, #255	@ 0xff
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <get_time>:

static uint8_t get_time(Timer* this, TimeKind time_kind)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	70fb      	strb	r3, [r7, #3]
	switch(time_kind)
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	2b04      	cmp	r3, #4
 800401c:	d854      	bhi.n	80040c8 <get_time+0xbc>
 800401e:	a201      	add	r2, pc, #4	@ (adr r2, 8004024 <get_time+0x18>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	08004039 	.word	0x08004039
 8004028:	0800405b 	.word	0x0800405b
 800402c:	0800407d 	.word	0x0800407d
 8004030:	0800409f 	.word	0x0800409f
 8004034:	080040c1 	.word	0x080040c1
	{
	case HOURS:
		return this->count / 3600000 % 24;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a26      	ldr	r2, [pc, #152]	@ (80040d8 <get_time+0xcc>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	0d59      	lsrs	r1, r3, #21
 8004044:	4b25      	ldr	r3, [pc, #148]	@ (80040dc <get_time+0xd0>)
 8004046:	fba3 2301 	umull	r2, r3, r3, r1
 800404a:	091a      	lsrs	r2, r3, #4
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	1aca      	subs	r2, r1, r3
 8004056:	b2d3      	uxtb	r3, r2
 8004058:	e038      	b.n	80040cc <get_time+0xc0>
		break;
	case MINUTES:
		return this->count / 60000 % 60;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4a20      	ldr	r2, [pc, #128]	@ (80040e0 <get_time+0xd4>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	0b99      	lsrs	r1, r3, #14
 8004066:	4b1f      	ldr	r3, [pc, #124]	@ (80040e4 <get_time+0xd8>)
 8004068:	fba3 2301 	umull	r2, r3, r3, r1
 800406c:	095a      	lsrs	r2, r3, #5
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	1aca      	subs	r2, r1, r3
 8004078:	b2d3      	uxtb	r3, r2
 800407a:	e027      	b.n	80040cc <get_time+0xc0>
		break;
	case SECONDS:
		return this->count / 1000 % 60;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4a19      	ldr	r2, [pc, #100]	@ (80040e8 <get_time+0xdc>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0999      	lsrs	r1, r3, #6
 8004088:	4b16      	ldr	r3, [pc, #88]	@ (80040e4 <get_time+0xd8>)
 800408a:	fba3 2301 	umull	r2, r3, r3, r1
 800408e:	095a      	lsrs	r2, r3, #5
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	1aca      	subs	r2, r1, r3
 800409a:	b2d3      	uxtb	r3, r2
 800409c:	e016      	b.n	80040cc <get_time+0xc0>
		break;
	case _100_MILLISECONDS:
		return this->count % 1000 / 100;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	4b11      	ldr	r3, [pc, #68]	@ (80040e8 <get_time+0xdc>)
 80040a4:	fba3 1302 	umull	r1, r3, r3, r2
 80040a8:	099b      	lsrs	r3, r3, #6
 80040aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	4a0d      	ldr	r2, [pc, #52]	@ (80040ec <get_time+0xe0>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e005      	b.n	80040cc <get_time+0xc0>
		break;
	case MILLISECONDS:
		return this->count;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e001      	b.n	80040cc <get_time+0xc0>
		break;
	default:
		break;
 80040c8:	bf00      	nop
	}

	return -1;
 80040ca:	23ff      	movs	r3, #255	@ 0xff
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	95217cb1 	.word	0x95217cb1
 80040dc:	aaaaaaab 	.word	0xaaaaaaab
 80040e0:	45e7b273 	.word	0x45e7b273
 80040e4:	88888889 	.word	0x88888889
 80040e8:	10624dd3 	.word	0x10624dd3
 80040ec:	51eb851f 	.word	0x51eb851f

080040f0 <get_timer>:
{
	return &recorded_run_time;
}

Timer* get_timer(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
	return &timer;
 80040f4:	4b02      	ldr	r3, [pc, #8]	@ (8004100 <get_timer+0x10>)
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	2000000c 	.word	0x2000000c

08004104 <receive>:
#include <_003_uart.h>

extern UART_HandleTypeDef huart3;

static void receive(Uart* this)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(this->huart, this->pData, this->Size);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	891b      	ldrh	r3, [r3, #8]
 8004118:	461a      	mov	r2, r3
 800411a:	f7fe faaf 	bl	800267c <HAL_UART_Receive_IT>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <get_data>:

static uint8_t get_data(Uart* this)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
	return *this->pData;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	781b      	ldrb	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <reset_data>:

static void reset_data(Uart* this)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	*(this->pData) = 0;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <get_uart>:
static uint8_t data;

static Uart uart = { &huart3, &data, 1, NULL, receive, get_data, reset_data };

Uart* get_uart(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
	return &uart;
 8004160:	4b02      	ldr	r3, [pc, #8]	@ (800416c <get_uart+0x10>)
}
 8004162:	4618      	mov	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	20000034 	.word	0x20000034

08004170 <set_mode>:

static DigitalClock clock = { .mode = NULL, set_mode, operate_clock_mode };


static void set_mode(DigitalClock* this, OperateClock operate)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
	*(this->mode) = (*this->mode + 1) % MODE_COUNT;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	425a      	negs	r2, r3
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	f002 0203 	and.w	r2, r2, #3
 800418c:	bf58      	it	pl
 800418e:	4253      	negpl	r3, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	7013      	strb	r3, [r2, #0]
	this->operate = operate;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	609a      	str	r2, [r3, #8]
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <operate_clock_mode>:

static void operate_clock_mode(DigitalClock* this)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	Button* button_1 = GET_INSTANCE(button_1);
 80041b4:	f000 fa46 	bl	8004644 <get_button_1>
 80041b8:	60f8      	str	r0, [r7, #12]
	static bool last_button = false;

	HAL_GPIO_WritePin(LEFT_RED_GPIO_Port, LEFT_RED_Pin, 1);
 80041ba:	2201      	movs	r2, #1
 80041bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80041c0:	4810      	ldr	r0, [pc, #64]	@ (8004204 <operate_clock_mode+0x58>)
 80041c2:	f7fd fa2d 	bl	8001620 <HAL_GPIO_WritePin>

	if (last_button == false && button_1->is_pressed(button_1) == true)
 80041c6:	4b10      	ldr	r3, [pc, #64]	@ (8004208 <operate_clock_mode+0x5c>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	f083 0301 	eor.w	r3, r3, #1
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <operate_clock_mode+0x40>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	4798      	blx	r3
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d004      	beq.n	80041ec <operate_clock_mode+0x40>
	{
		this->set_mode(this, operate_alarm_mode);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4909      	ldr	r1, [pc, #36]	@ (800420c <operate_clock_mode+0x60>)
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4798      	blx	r3
	}

	last_button = button_1->is_pressed(button_1);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	4798      	blx	r3
 80041f4:	4603      	mov	r3, r0
 80041f6:	461a      	mov	r2, r3
 80041f8:	4b03      	ldr	r3, [pc, #12]	@ (8004208 <operate_clock_mode+0x5c>)
 80041fa:	701a      	strb	r2, [r3, #0]
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40020c00 	.word	0x40020c00
 8004208:	20000166 	.word	0x20000166
 800420c:	08004211 	.word	0x08004211

08004210 <operate_alarm_mode>:

static void operate_alarm_mode(DigitalClock* this)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	Button* button_1 = GET_INSTANCE(button_1);
 8004218:	f000 fa14 	bl	8004644 <get_button_1>
 800421c:	60f8      	str	r0, [r7, #12]
	static bool last_button = false;

	HAL_GPIO_WritePin(LEFT_RED_GPIO_Port, LEFT_RED_Pin, 1);
 800421e:	2201      	movs	r2, #1
 8004220:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004224:	4810      	ldr	r0, [pc, #64]	@ (8004268 <operate_alarm_mode+0x58>)
 8004226:	f7fd f9fb 	bl	8001620 <HAL_GPIO_WritePin>

	if (last_button == false && button_1->is_pressed(button_1) == true)
 800422a:	4b10      	ldr	r3, [pc, #64]	@ (800426c <operate_alarm_mode+0x5c>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	f083 0301 	eor.w	r3, r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <operate_alarm_mode+0x40>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	4798      	blx	r3
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d004      	beq.n	8004250 <operate_alarm_mode+0x40>
	{
		this->set_mode(this, operate_stopwatch_mode);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4909      	ldr	r1, [pc, #36]	@ (8004270 <operate_alarm_mode+0x60>)
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	4798      	blx	r3
	}

	last_button = button_1->is_pressed(button_1);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	4798      	blx	r3
 8004258:	4603      	mov	r3, r0
 800425a:	461a      	mov	r2, r3
 800425c:	4b03      	ldr	r3, [pc, #12]	@ (800426c <operate_alarm_mode+0x5c>)
 800425e:	701a      	strb	r2, [r3, #0]
}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40020c00 	.word	0x40020c00
 800426c:	20000167 	.word	0x20000167
 8004270:	08004275 	.word	0x08004275

08004274 <operate_stopwatch_mode>:

static void operate_stopwatch_mode(DigitalClock* this)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

	Button* button_1 = GET_INSTANCE(button_1);
 800427c:	f000 f9e2 	bl	8004644 <get_button_1>
 8004280:	60f8      	str	r0, [r7, #12]
	static bool last_button = false;

	HAL_GPIO_WritePin(LEFT_RED_GPIO_Port, LEFT_RED_Pin, 0);
 8004282:	2200      	movs	r2, #0
 8004284:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004288:	4810      	ldr	r0, [pc, #64]	@ (80042cc <operate_stopwatch_mode+0x58>)
 800428a:	f7fd f9c9 	bl	8001620 <HAL_GPIO_WritePin>

	if (last_button == false && button_1->is_pressed(button_1) == true)
 800428e:	4b10      	ldr	r3, [pc, #64]	@ (80042d0 <operate_stopwatch_mode+0x5c>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	f083 0301 	eor.w	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00b      	beq.n	80042b4 <operate_stopwatch_mode+0x40>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	4798      	blx	r3
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d004      	beq.n	80042b4 <operate_stopwatch_mode+0x40>
	{
		this->set_mode(this, operate_timer_mode);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4909      	ldr	r1, [pc, #36]	@ (80042d4 <operate_stopwatch_mode+0x60>)
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
	}



	last_button = button_1->is_pressed(button_1);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	4798      	blx	r3
 80042bc:	4603      	mov	r3, r0
 80042be:	461a      	mov	r2, r3
 80042c0:	4b03      	ldr	r3, [pc, #12]	@ (80042d0 <operate_stopwatch_mode+0x5c>)
 80042c2:	701a      	strb	r2, [r3, #0]

}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40020c00 	.word	0x40020c00
 80042d0:	20000168 	.word	0x20000168
 80042d4:	080042d9 	.word	0x080042d9

080042d8 <operate_timer_mode>:

static void operate_timer_mode(DigitalClock* this)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	Button* button_1 = GET_INSTANCE(button_1);
 80042e0:	f000 f9b0 	bl	8004644 <get_button_1>
 80042e4:	60f8      	str	r0, [r7, #12]
	static bool last_button = false;

	if (last_button == false && button_1->is_pressed(button_1) == true) // sw1_short_press
 80042e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004324 <operate_timer_mode+0x4c>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	f083 0301 	eor.w	r3, r3, #1
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00b      	beq.n	800430c <operate_timer_mode+0x34>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	4798      	blx	r3
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d004      	beq.n	800430c <operate_timer_mode+0x34>
	{
		this->set_mode(this, operate_clock_mode);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	4908      	ldr	r1, [pc, #32]	@ (8004328 <operate_timer_mode+0x50>)
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
	}

	last_button = button_1->is_pressed(button_1);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	4798      	blx	r3
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	4b02      	ldr	r3, [pc, #8]	@ (8004324 <operate_timer_mode+0x4c>)
 800431a:	701a      	strb	r2, [r3, #0]
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20000169 	.word	0x20000169
 8004328:	080041ad 	.word	0x080041ad

0800432c <get_clock>:

DigitalClock* get_clock(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
	clock.mode = GET_INSTANCE(mode);
 8004330:	f7ff fd90 	bl	8003e54 <get_mode>
 8004334:	4603      	mov	r3, r0
 8004336:	4a02      	ldr	r2, [pc, #8]	@ (8004340 <get_clock+0x14>)
 8004338:	6013      	str	r3, [r2, #0]
	return &clock;
 800433a:	4b01      	ldr	r3, [pc, #4]	@ (8004340 <get_clock+0x14>)
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000050 	.word	0x20000050

08004344 <set_state>:

SevenSegment segment = { .mode = NULL, get_current_mode, set_state, operate_stop };


static void set_state(SevenSegment* this, OperateSegment operate)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
	this->operate = operate;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	60da      	str	r2, [r3, #12]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <get_current_mode>:

static Mode get_current_mode(SevenSegment* this)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	return *this->mode;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <operate_stop>:


void operate_stop(SevenSegment* this)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	Timer* timer = GET_INSTANCE(timer);
 8004384:	f7ff feb4 	bl	80040f0 <get_timer>
 8004388:	60f8      	str	r0, [r7, #12]
	Button* button_2 = GET_INSTANCE(button_2);
 800438a:	f000 f965 	bl	8004658 <get_button_2>
 800438e:	60b8      	str	r0, [r7, #8]
	static bool last_button = false;

	DGT1_DP_ON;
 8004390:	2200      	movs	r2, #0
 8004392:	2180      	movs	r1, #128	@ 0x80
 8004394:	481e      	ldr	r0, [pc, #120]	@ (8004410 <operate_stop+0x94>)
 8004396:	f7fd f943 	bl	8001620 <HAL_GPIO_WritePin>
	DGT2_DP_OFF;
 800439a:	2201      	movs	r2, #1
 800439c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043a0:	481c      	ldr	r0, [pc, #112]	@ (8004414 <operate_stop+0x98>)
 80043a2:	f7fd f93d 	bl	8001620 <HAL_GPIO_WritePin>

	timer->set_count(timer, 0);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2100      	movs	r1, #0
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	4798      	blx	r3

//	_7SEG_SetNumber(DGT1, timer->get_time(timer, SECONDS), ON);
//	_7SEG_SetNumber(DGT2, timer->get_time(timer, _100_MILLISECONDS), OFF);
	_7SEG_SetNumber(DGT2, this->get_current_mode(this), ON);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
 80043b8:	4603      	mov	r3, r0
 80043ba:	2201      	movs	r2, #1
 80043bc:	4619      	mov	r1, r3
 80043be:	2001      	movs	r0, #1
 80043c0:	f7ff f966 	bl	8003690 <_7SEG_SetNumber>

	if (this->get_current_mode(this) == STOPWATCH_MODE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d112      	bne.n	80043f8 <operate_stop+0x7c>
	{
		if (last_button == false && button_2->is_pressed(button_2) == true)
 80043d2:	4b11      	ldr	r3, [pc, #68]	@ (8004418 <operate_stop+0x9c>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	f083 0301 	eor.w	r3, r3, #1
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00b      	beq.n	80043f8 <operate_stop+0x7c>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	68b8      	ldr	r0, [r7, #8]
 80043e6:	4798      	blx	r3
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <operate_stop+0x7c>
		{
			this->set_state(this, operate_run);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	490a      	ldr	r1, [pc, #40]	@ (800441c <operate_stop+0xa0>)
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
		}
	}


	last_button = button_2->is_pressed(button_2);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	68b8      	ldr	r0, [r7, #8]
 80043fe:	4798      	blx	r3
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	4b04      	ldr	r3, [pc, #16]	@ (8004418 <operate_stop+0x9c>)
 8004406:	701a      	strb	r2, [r3, #0]
}
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40020c00 	.word	0x40020c00
 8004414:	40021000 	.word	0x40021000
 8004418:	2000016a 	.word	0x2000016a
 800441c:	08004421 	.word	0x08004421

08004420 <operate_run>:

void operate_run(SevenSegment* this)
{
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	Timer* timer = GET_INSTANCE(timer);
 8004428:	f7ff fe62 	bl	80040f0 <get_timer>
 800442c:	60f8      	str	r0, [r7, #12]
	Button* button_2 = GET_INSTANCE(button_2);
 800442e:	f000 f913 	bl	8004658 <get_button_2>
 8004432:	60b8      	str	r0, [r7, #8]
	static bool last_button = false;

	_7SEG_SetNumber(DGT1, timer->get_time(timer, SECONDS), timer->get_time(timer, _100_MILLISECONDS) < 5 ? ON : OFF);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	2102      	movs	r1, #2
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	4798      	blx	r3
 800443e:	4603      	mov	r3, r0
 8004440:	461c      	mov	r4, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	2103      	movs	r1, #3
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	4798      	blx	r3
 800444c:	4603      	mov	r3, r0
 800444e:	2b04      	cmp	r3, #4
 8004450:	bf94      	ite	ls
 8004452:	2301      	movls	r3, #1
 8004454:	2300      	movhi	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	4621      	mov	r1, r4
 800445c:	2000      	movs	r0, #0
 800445e:	f7ff f917 	bl	8003690 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, timer->get_time(timer, _100_MILLISECONDS), OFF);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	2103      	movs	r1, #3
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	4798      	blx	r3
 800446c:	4603      	mov	r3, r0
 800446e:	2200      	movs	r2, #0
 8004470:	4619      	mov	r1, r3
 8004472:	2001      	movs	r0, #1
 8004474:	f7ff f90c 	bl	8003690 <_7SEG_SetNumber>


	if (this->get_current_mode(this) == STOPWATCH_MODE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	4798      	blx	r3
 8004480:	4603      	mov	r3, r0
 8004482:	2b02      	cmp	r3, #2
 8004484:	d112      	bne.n	80044ac <operate_run+0x8c>
	{
		if (last_button == false && button_2->is_pressed(button_2) == true)
 8004486:	4b0f      	ldr	r3, [pc, #60]	@ (80044c4 <operate_run+0xa4>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	f083 0301 	eor.w	r3, r3, #1
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00b      	beq.n	80044ac <operate_run+0x8c>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	68b8      	ldr	r0, [r7, #8]
 800449a:	4798      	blx	r3
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d004      	beq.n	80044ac <operate_run+0x8c>
		{
			this->set_state(this, operate_pause);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	4908      	ldr	r1, [pc, #32]	@ (80044c8 <operate_run+0xa8>)
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
		}
	}

	last_button = button_2->is_pressed(button_2);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	68b8      	ldr	r0, [r7, #8]
 80044b2:	4798      	blx	r3
 80044b4:	4603      	mov	r3, r0
 80044b6:	461a      	mov	r2, r3
 80044b8:	4b02      	ldr	r3, [pc, #8]	@ (80044c4 <operate_run+0xa4>)
 80044ba:	701a      	strb	r2, [r3, #0]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd90      	pop	{r4, r7, pc}
 80044c4:	2000016b 	.word	0x2000016b
 80044c8:	080044cd 	.word	0x080044cd

080044cc <operate_pause>:

void operate_pause(SevenSegment* this)
{
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	Timer* timer = GET_INSTANCE(timer);
 80044d4:	f7ff fe0c 	bl	80040f0 <get_timer>
 80044d8:	6178      	str	r0, [r7, #20]
	Button* button_2 = GET_INSTANCE(button_2);
 80044da:	f000 f8bd 	bl	8004658 <get_button_2>
 80044de:	6138      	str	r0, [r7, #16]
	Button* button_3 = GET_INSTANCE(button_3);
 80044e0:	f000 f8c4 	bl	800466c <get_button_3>
 80044e4:	60f8      	str	r0, [r7, #12]
	static bool last_button_2 = false;
	static bool last_button_3 = false;

	DGT1_DP_ON;
 80044e6:	2200      	movs	r2, #0
 80044e8:	2180      	movs	r1, #128	@ 0x80
 80044ea:	4832      	ldr	r0, [pc, #200]	@ (80045b4 <operate_pause+0xe8>)
 80044ec:	f7fd f898 	bl	8001620 <HAL_GPIO_WritePin>

	timer->set_count(timer, timer->get_recorded_count(timer));
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	691c      	ldr	r4, [r3, #16]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	6978      	ldr	r0, [r7, #20]
 80044fa:	4798      	blx	r3
 80044fc:	4603      	mov	r3, r0
 80044fe:	4619      	mov	r1, r3
 8004500:	6978      	ldr	r0, [r7, #20]
 8004502:	47a0      	blx	r4

	_7SEG_SetNumber(DGT1, timer->get_time(timer, SECONDS), ON);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	2102      	movs	r1, #2
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	4798      	blx	r3
 800450e:	4603      	mov	r3, r0
 8004510:	2201      	movs	r2, #1
 8004512:	4619      	mov	r1, r3
 8004514:	2000      	movs	r0, #0
 8004516:	f7ff f8bb 	bl	8003690 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, timer->get_time(timer, _100_MILLISECONDS), OFF);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	2103      	movs	r1, #3
 8004520:	6978      	ldr	r0, [r7, #20]
 8004522:	4798      	blx	r3
 8004524:	4603      	mov	r3, r0
 8004526:	2200      	movs	r2, #0
 8004528:	4619      	mov	r1, r3
 800452a:	2001      	movs	r0, #1
 800452c:	f7ff f8b0 	bl	8003690 <_7SEG_SetNumber>

	if (this->get_current_mode(this) == STOPWATCH_MODE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
 8004538:	4603      	mov	r3, r0
 800453a:	2b02      	cmp	r3, #2
 800453c:	d125      	bne.n	800458a <operate_pause+0xbe>
	{
		if (last_button_2 == false && button_2->is_pressed(button_2) == true)
 800453e:	4b1e      	ldr	r3, [pc, #120]	@ (80045b8 <operate_pause+0xec>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	f083 0301 	eor.w	r3, r3, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00b      	beq.n	8004564 <operate_pause+0x98>
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	6938      	ldr	r0, [r7, #16]
 8004552:	4798      	blx	r3
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <operate_pause+0x98>
		{
			this->set_state(this, operate_run);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4917      	ldr	r1, [pc, #92]	@ (80045bc <operate_pause+0xf0>)
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
		}

		if (last_button_3 == false && button_3->is_pressed(button_3) == true)
 8004564:	4b16      	ldr	r3, [pc, #88]	@ (80045c0 <operate_pause+0xf4>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	f083 0301 	eor.w	r3, r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <operate_pause+0xbe>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	4798      	blx	r3
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <operate_pause+0xbe>
		{
			this->set_state(this, operate_stop);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	490f      	ldr	r1, [pc, #60]	@ (80045c4 <operate_pause+0xf8>)
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	4798      	blx	r3
		}
	}

	last_button_2 = button_2->is_pressed(button_2);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	6938      	ldr	r0, [r7, #16]
 8004590:	4798      	blx	r3
 8004592:	4603      	mov	r3, r0
 8004594:	461a      	mov	r2, r3
 8004596:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <operate_pause+0xec>)
 8004598:	701a      	strb	r2, [r3, #0]
	last_button_3 = button_3->is_pressed(button_3);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	4798      	blx	r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <operate_pause+0xf4>)
 80045a8:	701a      	strb	r2, [r3, #0]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd90      	pop	{r4, r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40020c00 	.word	0x40020c00
 80045b8:	2000016c 	.word	0x2000016c
 80045bc:	08004421 	.word	0x08004421
 80045c0:	2000016d 	.word	0x2000016d
 80045c4:	0800437d 	.word	0x0800437d

080045c8 <get_segment>:

SevenSegment* get_segment(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
	segment.mode = GET_INSTANCE(mode);
 80045cc:	f7ff fc42 	bl	8003e54 <get_mode>
 80045d0:	4603      	mov	r3, r0
 80045d2:	4a02      	ldr	r2, [pc, #8]	@ (80045dc <get_segment+0x14>)
 80045d4:	6013      	str	r3, [r2, #0]
	return &segment;
 80045d6:	4b01      	ldr	r3, [pc, #4]	@ (80045dc <get_segment+0x14>)
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	2000005c 	.word	0x2000005c

080045e0 <update>:


#include <_105_button.h>

static void update(Button* this)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(this->GPIOx, this->GPIO_Pin) == GPIO_PIN_SET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	889b      	ldrh	r3, [r3, #4]
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f7fc fffc 	bl	80015f0 <HAL_GPIO_ReadPin>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d10a      	bne.n	8004614 <update+0x34>
	{
		if (this->_is_pressed == false) this->_is_pressed = true;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	799b      	ldrb	r3, [r3, #6]
 8004602:	f083 0301 	eor.w	r3, r3, #1
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <update+0x42>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		if (this->_is_pressed == true) this->_is_pressed = false;
	}
}
 8004612:	e006      	b.n	8004622 <update+0x42>
		if (this->_is_pressed == true) this->_is_pressed = false;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	799b      	ldrb	r3, [r3, #6]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <update+0x42>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	719a      	strb	r2, [r3, #6]
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <is_pressed>:

static bool is_pressed(Button* this)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
	return this->_is_pressed;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	799b      	ldrb	r3, [r3, #6]
}
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <get_button_1>:
static Button button_2 = { BUTTON_2_GPIO_Port, BUTTON_2_Pin, false, update, is_pressed };
static Button button_3 = { BUTTON_3_GPIO_Port, BUTTON_3_Pin, false, update, is_pressed };
static Button button_4 = { BUTTON_4_GPIO_Port, BUTTON_4_Pin, false, update, is_pressed };

Button* get_button_1(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
	return &button_1;
 8004648:	4b02      	ldr	r3, [pc, #8]	@ (8004654 <get_button_1+0x10>)
}
 800464a:	4618      	mov	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	2000006c 	.word	0x2000006c

08004658 <get_button_2>:

Button* get_button_2(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
	return &button_2;
 800465c:	4b02      	ldr	r3, [pc, #8]	@ (8004668 <get_button_2+0x10>)
}
 800465e:	4618      	mov	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	2000007c 	.word	0x2000007c

0800466c <get_button_3>:

Button* get_button_3(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
	return &button_3;
 8004670:	4b02      	ldr	r3, [pc, #8]	@ (800467c <get_button_3+0x10>)
}
 8004672:	4618      	mov	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	2000008c 	.word	0x2000008c

08004680 <get_button_4>:

Button* get_button_4(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
	return &button_4;
 8004684:	4b02      	ldr	r3, [pc, #8]	@ (8004690 <get_button_4+0x10>)
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	2000009c 	.word	0x2000009c

08004694 <memset>:
 8004694:	4402      	add	r2, r0
 8004696:	4603      	mov	r3, r0
 8004698:	4293      	cmp	r3, r2
 800469a:	d100      	bne.n	800469e <memset+0xa>
 800469c:	4770      	bx	lr
 800469e:	f803 1b01 	strb.w	r1, [r3], #1
 80046a2:	e7f9      	b.n	8004698 <memset+0x4>

080046a4 <__libc_init_array>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	4d0d      	ldr	r5, [pc, #52]	@ (80046dc <__libc_init_array+0x38>)
 80046a8:	4c0d      	ldr	r4, [pc, #52]	@ (80046e0 <__libc_init_array+0x3c>)
 80046aa:	1b64      	subs	r4, r4, r5
 80046ac:	10a4      	asrs	r4, r4, #2
 80046ae:	2600      	movs	r6, #0
 80046b0:	42a6      	cmp	r6, r4
 80046b2:	d109      	bne.n	80046c8 <__libc_init_array+0x24>
 80046b4:	4d0b      	ldr	r5, [pc, #44]	@ (80046e4 <__libc_init_array+0x40>)
 80046b6:	4c0c      	ldr	r4, [pc, #48]	@ (80046e8 <__libc_init_array+0x44>)
 80046b8:	f000 f818 	bl	80046ec <_init>
 80046bc:	1b64      	subs	r4, r4, r5
 80046be:	10a4      	asrs	r4, r4, #2
 80046c0:	2600      	movs	r6, #0
 80046c2:	42a6      	cmp	r6, r4
 80046c4:	d105      	bne.n	80046d2 <__libc_init_array+0x2e>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046cc:	4798      	blx	r3
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7ee      	b.n	80046b0 <__libc_init_array+0xc>
 80046d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d6:	4798      	blx	r3
 80046d8:	3601      	adds	r6, #1
 80046da:	e7f2      	b.n	80046c2 <__libc_init_array+0x1e>
 80046dc:	08004724 	.word	0x08004724
 80046e0:	08004724 	.word	0x08004724
 80046e4:	08004724 	.word	0x08004724
 80046e8:	08004728 	.word	0x08004728

080046ec <_init>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr

080046f8 <_fini>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr
