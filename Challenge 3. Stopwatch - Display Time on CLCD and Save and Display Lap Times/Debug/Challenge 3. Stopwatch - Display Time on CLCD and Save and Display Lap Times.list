
Challenge 3. Stopwatch - Display Time on CLCD and Save and Display Lap Times.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005770  08005770  00006770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f0  080057f0  00007118  2**0
                  CONTENTS
  4 .ARM          00000008  080057f0  080057f0  000067f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057f8  080057f8  00007118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057f8  080057f8  000067f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057fc  080057fc  000067fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000118  20000000  08005800  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007118  2**0
                  CONTENTS
 10 .bss          00000240  20000118  20000118  00007118  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000358  20000358  00007118  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007118  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fce9  00000000  00000000  00007148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a4c  00000000  00000000  00016e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00019880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b53  00000000  00000000  0001a730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002290e  00000000  00000000  0001b283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013117  00000000  00000000  0003db91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc87b  00000000  00000000  00050ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d523  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040a4  00000000  00000000  0011d568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  0012160c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005758 	.word	0x08005758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	08005758 	.word	0x08005758

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fe31 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f85f 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f953 	bl	8000818 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000572:	f000 f927 	bl	80007c4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000576:	f000 f8ef 	bl	8000758 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800057a:	f000 f8c1 	bl	8000700 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800057e:	482a      	ldr	r0, [pc, #168]	@ (8000628 <main+0xc8>)
 8000580:	f001 ff2c 	bl	80023dc <HAL_TIM_Base_Start_IT>
  _7SEG_GPIO_Init();
 8000584:	f003 f962 	bl	800384c <_7SEG_GPIO_Init>
  CLCD_GPIO_Init();
 8000588:	f000 fbca 	bl	8000d20 <CLCD_GPIO_Init>
  CLCD_Init();
 800058c:	f000 fdf1 	bl	8001172 <CLCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Button* button_1 = GET_INSTANCE(button_1);
 8000590:	f003 fe56 	bl	8004240 <get_button_1>
 8000594:	6278      	str	r0, [r7, #36]	@ 0x24
  Button* button_2 = GET_INSTANCE(button_2);
 8000596:	f003 fe5d 	bl	8004254 <get_button_2>
 800059a:	6238      	str	r0, [r7, #32]
  Button* button_3 = GET_INSTANCE(button_3);
 800059c:	f003 fe64 	bl	8004268 <get_button_3>
 80005a0:	61f8      	str	r0, [r7, #28]
  Button* button_4 = GET_INSTANCE(button_4);
 80005a2:	f003 fe6b 	bl	800427c <get_button_4>
 80005a6:	61b8      	str	r0, [r7, #24]

  Led* left_red   = GET_INSTANCE(left_red);
 80005a8:	f004 f94c 	bl	8004844 <get_left_red>
 80005ac:	6178      	str	r0, [r7, #20]
  Led* left_green = GET_INSTANCE(left_green);
 80005ae:	f004 f953 	bl	8004858 <get_left_green>
 80005b2:	6138      	str	r0, [r7, #16]
  Led* left_blue  = GET_INSTANCE(left_blue);
 80005b4:	f004 f95a 	bl	800486c <get_left_blue>
 80005b8:	60f8      	str	r0, [r7, #12]
  Led* right_red  = GET_INSTANCE(right_red);
 80005ba:	f004 f961 	bl	8004880 <get_right_red>
 80005be:	60b8      	str	r0, [r7, #8]

  SevenSegment* segment = GET_INSTANCE(segment);
 80005c0:	f004 fa92 	bl	8004ae8 <get_segment>
 80005c4:	6078      	str	r0, [r7, #4]

  Lcd* lcd = GET_INSTANCE(lcd);
 80005c6:	f004 f883 	bl	80046d0 <get_lcd>
 80005ca:	6038      	str	r0, [r7, #0]

  while (1)
  {
	  button_1->update(button_1);
 80005cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005d2:	4798      	blx	r3
	  button_2->update(button_2);
 80005d4:	6a3b      	ldr	r3, [r7, #32]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	6a38      	ldr	r0, [r7, #32]
 80005da:	4798      	blx	r3
	  button_3->update(button_3);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	69f8      	ldr	r0, [r7, #28]
 80005e2:	4798      	blx	r3
	  button_4->update(button_4);
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	69b8      	ldr	r0, [r7, #24]
 80005ea:	4798      	blx	r3

	  left_red->operate(left_red, button_1);
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80005f2:	6978      	ldr	r0, [r7, #20]
 80005f4:	4798      	blx	r3
	  left_green->operate(left_green, button_2);
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	6a39      	ldr	r1, [r7, #32]
 80005fc:	6938      	ldr	r0, [r7, #16]
 80005fe:	4798      	blx	r3
	  left_blue->operate(left_blue, button_3);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	69f9      	ldr	r1, [r7, #28]
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	4798      	blx	r3
	  right_red->operate(right_red, button_4);
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	69b9      	ldr	r1, [r7, #24]
 8000610:	68b8      	ldr	r0, [r7, #8]
 8000612:	4798      	blx	r3

	  segment->operate(segment);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	4798      	blx	r3

	  lcd->operate(lcd);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6838      	ldr	r0, [r7, #0]
 8000622:	4798      	blx	r3
	  button_1->update(button_1);
 8000624:	bf00      	nop
 8000626:	e7d1      	b.n	80005cc <main+0x6c>
 8000628:	20000134 	.word	0x20000134

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	@ 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fc0c 	bl	8004e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	@ (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	@ (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a0:	23a8      	movs	r3, #168	@ 0xa8
 80006a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 f9ab 	bl	8001a0c <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006bc:	f000 f9c7 	bl	8000a4e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2105      	movs	r1, #5
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fc0c 	bl	8001efc <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 f9b0 	bl	8000a4e <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	@ 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2036      	movs	r0, #54	@ 0x36
 800070a:	f000 fed0 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800070e:	2036      	movs	r0, #54	@ 0x36
 8000710:	f000 fee9 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	2027      	movs	r0, #39	@ 0x27
 800071a:	f000 fec8 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800071e:	2027      	movs	r0, #39	@ 0x27
 8000720:	f000 fee1 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	2009      	movs	r0, #9
 800072a:	f000 fec0 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800072e:	2009      	movs	r0, #9
 8000730:	f000 fed9 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	200a      	movs	r0, #10
 800073a:	f000 feb8 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800073e:	200a      	movs	r0, #10
 8000740:	f000 fed1 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	2028      	movs	r0, #40	@ 0x28
 800074a:	f000 feb0 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800074e:	2028      	movs	r0, #40	@ 0x28
 8000750:	f000 fec9 	bl	80014e6 <HAL_NVIC_EnableIRQ>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_TIM6_Init+0x64>)
 8000768:	4a15      	ldr	r2, [pc, #84]	@ (80007c0 <MX_TIM6_Init+0x68>)
 800076a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84 - 1;
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_TIM6_Init+0x64>)
 800076e:	2253      	movs	r2, #83	@ 0x53
 8000770:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_TIM6_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_TIM6_Init+0x64>)
 800077a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800077e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000780:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_TIM6_Init+0x64>)
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000786:	480d      	ldr	r0, [pc, #52]	@ (80007bc <MX_TIM6_Init+0x64>)
 8000788:	f001 fdd8 	bl	800233c <HAL_TIM_Base_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000792:	f000 f95c 	bl	8000a4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	@ (80007bc <MX_TIM6_Init+0x64>)
 80007a4:	f002 f84e 	bl	8002844 <HAL_TIMEx_MasterConfigSynchronization>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80007ae:	f000 f94e 	bl	8000a4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000134 	.word	0x20000134
 80007c0:	40001000 	.word	0x40001000

080007c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c8:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_USART3_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_USART3_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <MX_USART3_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_USART3_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_USART3_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_USART3_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_USART3_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_USART3_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_USART3_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_USART3_UART_Init+0x4c>)
 80007fc:	f002 f8b2 	bl	8002964 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f000 f922 	bl	8000a4e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000017c 	.word	0x2000017c
 8000814:	40004800 	.word	0x40004800

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	@ 0x30
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
 8000832:	4b66      	ldr	r3, [pc, #408]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a65      	ldr	r2, [pc, #404]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 8000838:	f043 0310 	orr.w	r3, r3, #16
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b63      	ldr	r3, [pc, #396]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0310 	and.w	r3, r3, #16
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	4b5f      	ldr	r3, [pc, #380]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a5e      	ldr	r2, [pc, #376]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b5c      	ldr	r3, [pc, #368]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b58      	ldr	r3, [pc, #352]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a57      	ldr	r2, [pc, #348]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b55      	ldr	r3, [pc, #340]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b51      	ldr	r3, [pc, #324]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a50      	ldr	r2, [pc, #320]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b4e      	ldr	r3, [pc, #312]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	4b4a      	ldr	r3, [pc, #296]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a49      	ldr	r2, [pc, #292]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b47      	ldr	r3, [pc, #284]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b43      	ldr	r3, [pc, #268]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a42      	ldr	r2, [pc, #264]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b40      	ldr	r3, [pc, #256]	@ (80009cc <MX_GPIO_Init+0x1b4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CLCD_3_Pin|CLCD_3E4_Pin|CLCD_4_Pin|CLCD_5_Pin
 80008d6:	2200      	movs	r2, #0
 80008d8:	21f7      	movs	r1, #247	@ 0xf7
 80008da:	483d      	ldr	r0, [pc, #244]	@ (80009d0 <MX_GPIO_Init+0x1b8>)
 80008dc:	f001 f864 	bl	80019a8 <HAL_GPIO_WritePin>
                          |CLCD_6_Pin|CLCD_1_Pin|CLCD_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RIGHT_BLUE_Pin|RIGHT_GREEN_Pin, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	2121      	movs	r1, #33	@ 0x21
 80008e4:	483b      	ldr	r0, [pc, #236]	@ (80009d4 <MX_GPIO_Init+0x1bc>)
 80008e6:	f001 f85f 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEFT_RED_Pin|LEFT_GREEN_Pin|LEFT_BLUE_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80008f0:	4839      	ldr	r0, [pc, #228]	@ (80009d8 <MX_GPIO_Init+0x1c0>)
 80008f2:	f001 f859 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RIGHT_RED_GPIO_Port, RIGHT_RED_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2140      	movs	r1, #64	@ 0x40
 80008fa:	4838      	ldr	r0, [pc, #224]	@ (80009dc <MX_GPIO_Init+0x1c4>)
 80008fc:	f001 f854 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLCD_3_Pin CLCD_3E4_Pin CLCD_4_Pin CLCD_5_Pin
                           CLCD_6_Pin CLCD_1_Pin CLCD_2_Pin */
  GPIO_InitStruct.Pin = CLCD_3_Pin|CLCD_3E4_Pin|CLCD_4_Pin|CLCD_5_Pin
 8000900:	23f7      	movs	r3, #247	@ 0xf7
 8000902:	61fb      	str	r3, [r7, #28]
                          |CLCD_6_Pin|CLCD_1_Pin|CLCD_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	482e      	ldr	r0, [pc, #184]	@ (80009d0 <MX_GPIO_Init+0x1b8>)
 8000918:	f000 fe92 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 800091c:	2308      	movs	r3, #8
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000920:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4827      	ldr	r0, [pc, #156]	@ (80009d0 <MX_GPIO_Init+0x1b8>)
 8000932:	f000 fe85 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin;
 8000936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800093c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_2_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4823      	ldr	r0, [pc, #140]	@ (80009dc <MX_GPIO_Init+0x1c4>)
 800094e:	f000 fe77 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_BLUE_Pin RIGHT_GREEN_Pin */
  GPIO_InitStruct.Pin = RIGHT_BLUE_Pin|RIGHT_GREEN_Pin;
 8000952:	2321      	movs	r3, #33	@ 0x21
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095a:	2301      	movs	r3, #1
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095e:	2302      	movs	r3, #2
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	481a      	ldr	r0, [pc, #104]	@ (80009d4 <MX_GPIO_Init+0x1bc>)
 800096a:	f000 fe69 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_3_Pin;
 800096e:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000974:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4814      	ldr	r0, [pc, #80]	@ (80009d8 <MX_GPIO_Init+0x1c0>)
 8000986:	f000 fe5b 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_RED_Pin LEFT_GREEN_Pin LEFT_BLUE_Pin */
  GPIO_InitStruct.Pin = LEFT_RED_Pin|LEFT_GREEN_Pin|LEFT_BLUE_Pin;
 800098a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000994:	2301      	movs	r3, #1
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	2302      	movs	r3, #2
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <MX_GPIO_Init+0x1c0>)
 80009a4:	f000 fe4c 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_RED_Pin */
  GPIO_InitStruct.Pin = RIGHT_RED_Pin;
 80009a8:	2340      	movs	r3, #64	@ 0x40
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b4:	2302      	movs	r3, #2
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4807      	ldr	r0, [pc, #28]	@ (80009dc <MX_GPIO_Init+0x1c4>)
 80009c0:	f000 fe3e 	bl	8001640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c4:	bf00      	nop
 80009c6:	3730      	adds	r7, #48	@ 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40020c00 	.word	0x40020c00
 80009dc:	40020800 	.word	0x40020800

080009e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	Uart* uart = GET_INSTANCE(uart);
 80009e8:	f004 fa0c 	bl	8004e04 <get_uart>
 80009ec:	60f8      	str	r0, [r7, #12]

	if (huart->Instance == USART3)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a05      	ldr	r2, [pc, #20]	@ (8000a08 <HAL_UART_RxCpltCallback+0x28>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d103      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x20>
	{
		uart->receive(uart);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	691b      	ldr	r3, [r3, #16]
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	4798      	blx	r3
	}
}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40004800 	.word	0x40004800

08000a0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	Timer* timer = GET_INSTANCE(timer);
 8000a14:	f004 f9b6 	bl	8004d84 <get_timer>
 8000a18:	60f8      	str	r0, [r7, #12]

	if (htim->Instance == TIM6)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d103      	bne.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		timer->count_up(timer);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	4798      	blx	r3
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40001000 	.word	0x40001000

08000a38 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
//
//	if (GPIO_Pin == BUTTON_1_Pin) button_1->update(button_1);
//	if (GPIO_Pin == BUTTON_2_Pin) button_2->update(button_2);
//	if (GPIO_Pin == BUTTON_3_Pin) button_3->update(button_3);
//	if (GPIO_Pin == BUTTON_4_Pin) button_4->update(button_4);
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a52:	b672      	cpsid	i
}
 8000a54:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a56:	bf00      	nop
 8000a58:	e7fd      	b.n	8000a56 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <HAL_TIM_Base_MspInit+0x3c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d10d      	bne.n	8000ada <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <HAL_TIM_Base_MspInit+0x40>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a09      	ldr	r2, [pc, #36]	@ (8000aec <HAL_TIM_Base_MspInit+0x40>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <HAL_TIM_Base_MspInit+0x40>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40001000 	.word	0x40001000
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a19      	ldr	r2, [pc, #100]	@ (8000b74 <HAL_UART_MspInit+0x84>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d12c      	bne.n	8000b6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <HAL_UART_MspInit+0x88>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a17      	ldr	r2, [pc, #92]	@ (8000b78 <HAL_UART_MspInit+0x88>)
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <HAL_UART_MspInit+0x88>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <HAL_UART_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a10      	ldr	r2, [pc, #64]	@ (8000b78 <HAL_UART_MspInit+0x88>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_UART_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <HAL_UART_MspInit+0x8c>)
 8000b68:	f000 fd6a 	bl	8001640 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	@ 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40004800 	.word	0x40004800
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd6:	f000 fb4b 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8000be2:	2008      	movs	r0, #8
 8000be4:	f000 fefa 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_3_Pin);
 8000bf0:	2010      	movs	r0, #16
 8000bf2:	f000 fef3 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <USART3_IRQHandler+0x10>)
 8000c02:	f001 ff25 	bl	8002a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000017c 	.word	0x2000017c

08000c10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_4_Pin);
 8000c14:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000c18:	f000 fee0 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8000c1c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000c20:	f000 fedc 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c2c:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <TIM6_DAC_IRQHandler+0x10>)
 8000c2e:	f001 fc45 	bl	80024bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000134 	.word	0x20000134

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	@ (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f004 f8fc 	bl	8004e68 <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20020000 	.word	0x20020000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	200001c4 	.word	0x200001c4
 8000ca4:	20000358 	.word	0x20000358

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	@ (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cd0:	f7ff ffea 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd4:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd6:	490d      	ldr	r1, [pc, #52]	@ (8000d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cec:	4c0a      	ldr	r4, [pc, #40]	@ (8000d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f004 f8bb 	bl	8004e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfe:	f7ff fc2f 	bl	8000560 <main>
  bx  lr    
 8000d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8000d10:	08005800 	.word	0x08005800
  ldr r2, =_sbss
 8000d14:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8000d18:	20000358 	.word	0x20000358

08000d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC_IRQHandler>
	...

08000d20 <CLCD_GPIO_Init>:
 */

#include "CLCD.h"

void CLCD_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b23      	ldr	r3, [pc, #140]	@ (8000db8 <CLCD_GPIO_Init+0x98>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a22      	ldr	r2, [pc, #136]	@ (8000db8 <CLCD_GPIO_Init+0x98>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <CLCD_GPIO_Init+0x98>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
	
	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8000d42:	2301      	movs	r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4819      	ldr	r0, [pc, #100]	@ (8000dbc <CLCD_GPIO_Init+0x9c>)
 8000d58:	f000 fc72 	bl	8001640 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4815      	ldr	r0, [pc, #84]	@ (8000dbc <CLCD_GPIO_Init+0x9c>)
 8000d66:	f000 fc6b 	bl	8001640 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4812      	ldr	r0, [pc, #72]	@ (8000dbc <CLCD_GPIO_Init+0x9c>)
 8000d74:	f000 fc64 	bl	8001640 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 8000d78:	2310      	movs	r3, #16
 8000d7a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480e      	ldr	r0, [pc, #56]	@ (8000dbc <CLCD_GPIO_Init+0x9c>)
 8000d82:	f000 fc5d 	bl	8001640 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 8000d86:	2320      	movs	r3, #32
 8000d88:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480b      	ldr	r0, [pc, #44]	@ (8000dbc <CLCD_GPIO_Init+0x9c>)
 8000d90:	f000 fc56 	bl	8001640 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 8000d94:	2340      	movs	r3, #64	@ 0x40
 8000d96:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	@ (8000dbc <CLCD_GPIO_Init+0x9c>)
 8000d9e:	f000 fc4f 	bl	8001640 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 8000da2:	2380      	movs	r3, #128	@ 0x80
 8000da4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <CLCD_GPIO_Init+0x9c>)
 8000dac:	f000 fc48 	bl	8001640 <HAL_GPIO_Init>
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	da04      	bge.n	8000ddc <CLCD_Write_Instruction+0x1c>
 8000dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dda:	e003      	b.n	8000de4 <CLCD_Write_Instruction+0x24>
 8000ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000de4:	4a5a      	ldr	r2, [pc, #360]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000de6:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <CLCD_Write_Instruction+0x3c>
 8000df2:	4b57      	ldr	r3, [pc, #348]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dfa:	e003      	b.n	8000e04 <CLCD_Write_Instruction+0x44>
 8000dfc:	4b54      	ldr	r3, [pc, #336]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e04:	4a52      	ldr	r2, [pc, #328]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e06:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d004      	beq.n	8000e1c <CLCD_Write_Instruction+0x5c>
 8000e12:	4b4f      	ldr	r3, [pc, #316]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	e003      	b.n	8000e24 <CLCD_Write_Instruction+0x64>
 8000e1c:	4b4c      	ldr	r3, [pc, #304]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	f023 0320 	bic.w	r3, r3, #32
 8000e24:	4a4a      	ldr	r2, [pc, #296]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e26:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d004      	beq.n	8000e3c <CLCD_Write_Instruction+0x7c>
 8000e32:	4b47      	ldr	r3, [pc, #284]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f043 0310 	orr.w	r3, r3, #16
 8000e3a:	e003      	b.n	8000e44 <CLCD_Write_Instruction+0x84>
 8000e3c:	4b44      	ldr	r3, [pc, #272]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	f023 0310 	bic.w	r3, r3, #16
 8000e44:	4a42      	ldr	r2, [pc, #264]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e46:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 8000e48:	4b41      	ldr	r3, [pc, #260]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	4a40      	ldr	r2, [pc, #256]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e4e:	f023 0301 	bic.w	r3, r3, #1
 8000e52:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8000e54:	4b3e      	ldr	r3, [pc, #248]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	4a3d      	ldr	r2, [pc, #244]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e5a:	f023 0302 	bic.w	r3, r3, #2
 8000e5e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000e60:	4b3b      	ldr	r3, [pc, #236]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	4a3a      	ldr	r2, [pc, #232]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e66:	f023 0304 	bic.w	r3, r3, #4
 8000e6a:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 8000e6c:	4b38      	ldr	r3, [pc, #224]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	4a37      	ldr	r2, [pc, #220]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000e78:	4b35      	ldr	r3, [pc, #212]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	4a34      	ldr	r2, [pc, #208]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e7e:	f023 0304 	bic.w	r3, r3, #4
 8000e82:	6153      	str	r3, [r2, #20]
	
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d004      	beq.n	8000e98 <CLCD_Write_Instruction+0xd8>
 8000e8e:	4b30      	ldr	r3, [pc, #192]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e96:	e003      	b.n	8000ea0 <CLCD_Write_Instruction+0xe0>
 8000e98:	4b2d      	ldr	r3, [pc, #180]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000ea2:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d004      	beq.n	8000eb8 <CLCD_Write_Instruction+0xf8>
 8000eae:	4b28      	ldr	r3, [pc, #160]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eb6:	e003      	b.n	8000ec0 <CLCD_Write_Instruction+0x100>
 8000eb8:	4b25      	ldr	r3, [pc, #148]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ec0:	4a23      	ldr	r2, [pc, #140]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000ec2:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d004      	beq.n	8000ed8 <CLCD_Write_Instruction+0x118>
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f043 0320 	orr.w	r3, r3, #32
 8000ed6:	e003      	b.n	8000ee0 <CLCD_Write_Instruction+0x120>
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	f023 0320 	bic.w	r3, r3, #32
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000ee2:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d004      	beq.n	8000ef8 <CLCD_Write_Instruction+0x138>
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	e003      	b.n	8000f00 <CLCD_Write_Instruction+0x140>
 8000ef8:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	f023 0310 	bic.w	r3, r3, #16
 8000f00:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000f02:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	4a11      	ldr	r2, [pc, #68]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000f0a:	f023 0301 	bic.w	r3, r3, #1
 8000f0e:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8000f10:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	4a0e      	ldr	r2, [pc, #56]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000f16:	f023 0302 	bic.w	r3, r3, #2
 8000f1a:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000f22:	f023 0304 	bic.w	r3, r3, #4
 8000f26:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	4a05      	ldr	r2, [pc, #20]	@ (8000f50 <CLCD_Write_Instruction+0x190>)
 8000f3a:	f023 0304 	bic.w	r3, r3, #4
 8000f3e:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f000 f9b5 	bl	80012b0 <HAL_Delay>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <CLCD_Write_Display>:

void CLCD_Write_Display(unsigned char b)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	da04      	bge.n	8000f70 <CLCD_Write_Display+0x1c>
 8000f66:	4b5f      	ldr	r3, [pc, #380]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f6e:	e003      	b.n	8000f78 <CLCD_Write_Display+0x24>
 8000f70:	4b5c      	ldr	r3, [pc, #368]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f78:	4a5a      	ldr	r2, [pc, #360]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000f7a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d004      	beq.n	8000f90 <CLCD_Write_Display+0x3c>
 8000f86:	4b57      	ldr	r3, [pc, #348]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f8e:	e003      	b.n	8000f98 <CLCD_Write_Display+0x44>
 8000f90:	4b54      	ldr	r3, [pc, #336]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f98:	4a52      	ldr	r2, [pc, #328]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000f9a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d004      	beq.n	8000fb0 <CLCD_Write_Display+0x5c>
 8000fa6:	4b4f      	ldr	r3, [pc, #316]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f043 0320 	orr.w	r3, r3, #32
 8000fae:	e003      	b.n	8000fb8 <CLCD_Write_Display+0x64>
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	f023 0320 	bic.w	r3, r3, #32
 8000fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000fba:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d004      	beq.n	8000fd0 <CLCD_Write_Display+0x7c>
 8000fc6:	4b47      	ldr	r3, [pc, #284]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	e003      	b.n	8000fd8 <CLCD_Write_Display+0x84>
 8000fd0:	4b44      	ldr	r3, [pc, #272]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	f023 0310 	bic.w	r3, r3, #16
 8000fd8:	4a42      	ldr	r2, [pc, #264]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000fda:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS�� High
 8000fdc:	4b41      	ldr	r3, [pc, #260]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	4a40      	ldr	r2, [pc, #256]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8000fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	4a3d      	ldr	r2, [pc, #244]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000fee:	f023 0302 	bic.w	r3, r3, #2
 8000ff2:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	4a3a      	ldr	r2, [pc, #232]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8000ffa:	f023 0304 	bic.w	r3, r3, #4
 8000ffe:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 8001000:	4b38      	ldr	r3, [pc, #224]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	4a37      	ldr	r2, [pc, #220]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 800100c:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <CLCD_Write_Display+0x190>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	4a34      	ldr	r2, [pc, #208]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8001012:	f023 0304 	bic.w	r3, r3, #4
 8001016:	6153      	str	r3, [r2, #20]
	
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	2b00      	cmp	r3, #0
 8001020:	d004      	beq.n	800102c <CLCD_Write_Display+0xd8>
 8001022:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800102a:	e003      	b.n	8001034 <CLCD_Write_Display+0xe0>
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <CLCD_Write_Display+0x190>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001034:	4a2b      	ldr	r2, [pc, #172]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8001036:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	2b00      	cmp	r3, #0
 8001040:	d004      	beq.n	800104c <CLCD_Write_Display+0xf8>
 8001042:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800104a:	e003      	b.n	8001054 <CLCD_Write_Display+0x100>
 800104c:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <CLCD_Write_Display+0x190>)
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001054:	4a23      	ldr	r2, [pc, #140]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8001056:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <CLCD_Write_Display+0x118>
 8001062:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f043 0320 	orr.w	r3, r3, #32
 800106a:	e003      	b.n	8001074 <CLCD_Write_Display+0x120>
 800106c:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <CLCD_Write_Display+0x190>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	f023 0320 	bic.w	r3, r3, #32
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8001076:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d004      	beq.n	800108c <CLCD_Write_Display+0x138>
 8001082:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	e003      	b.n	8001094 <CLCD_Write_Display+0x140>
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <CLCD_Write_Display+0x190>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f023 0310 	bic.w	r3, r3, #16
 8001094:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <CLCD_Write_Display+0x190>)
 8001096:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS�� High
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <CLCD_Write_Display+0x190>)
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	4a11      	ldr	r2, [pc, #68]	@ (80010e4 <CLCD_Write_Display+0x190>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <CLCD_Write_Display+0x190>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <CLCD_Write_Display+0x190>)
 80010aa:	f023 0302 	bic.w	r3, r3, #2
 80010ae:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <CLCD_Write_Display+0x190>)
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	4a0b      	ldr	r2, [pc, #44]	@ (80010e4 <CLCD_Write_Display+0x190>)
 80010b6:	f023 0304 	bic.w	r3, r3, #4
 80010ba:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 80010bc:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <CLCD_Write_Display+0x190>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <CLCD_Write_Display+0x190>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <CLCD_Write_Display+0x190>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <CLCD_Write_Display+0x190>)
 80010ce:	f023 0304 	bic.w	r3, r3, #4
 80010d2:	6153      	str	r3, [r2, #20]
	
	HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f000 f8eb 	bl	80012b0 <HAL_Delay>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <CLCD_Gotoxy>:


void CLCD_Gotoxy(unsigned char x, unsigned char y)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
	// 16 * 2 character LCD
	switch(y)
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <CLCD_Gotoxy+0x1c>
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d007      	beq.n	8001112 <CLCD_Gotoxy+0x2a>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
		//case 2 : CLCD_Write_Instruction(0x90+x); break; //Uncomment for 16 * 4 character LCD
		//case 3 : CLCD_Write_Instruction(0xd0+x); break; //Uncomment for 16 * 4 character LCD
	}
}
 8001102:	e00d      	b.n	8001120 <CLCD_Gotoxy+0x38>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	3b80      	subs	r3, #128	@ 0x80
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe58 	bl	8000dc0 <CLCD_Write_Instruction>
 8001110:	e006      	b.n	8001120 <CLCD_Gotoxy+0x38>
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	3b40      	subs	r3, #64	@ 0x40
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fe51 	bl	8000dc0 <CLCD_Write_Instruction>
 800111e:	bf00      	nop
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <CLCD_Puts>:

void CLCD_Puts(unsigned char x, unsigned char y, char *str)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	603a      	str	r2, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	460b      	mov	r3, r1
 8001136:	71bb      	strb	r3, [r7, #6]
	unsigned int i=0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]

	CLCD_Gotoxy(x,y);
 800113c:	79ba      	ldrb	r2, [r7, #6]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ffd0 	bl	80010e8 <CLCD_Gotoxy>
	do
	{
		CLCD_Write_Display(str[i]);
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff feff 	bl	8000f54 <CLCD_Write_Display>
	}
	while(str[++i]!='\0');
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3301      	adds	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1ef      	bne.n	8001148 <CLCD_Puts+0x20>
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <CLCD_Init>:

void CLCD_Init(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001176:	2064      	movs	r0, #100	@ 0x64
 8001178:	f000 f89a 	bl	80012b0 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 800117c:	2028      	movs	r0, #40	@ 0x28
 800117e:	f7ff fe1f 	bl	8000dc0 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001182:	200a      	movs	r0, #10
 8001184:	f000 f894 	bl	80012b0 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001188:	2028      	movs	r0, #40	@ 0x28
 800118a:	f7ff fe19 	bl	8000dc0 <CLCD_Write_Instruction>
	HAL_Delay(10);
 800118e:	200a      	movs	r0, #10
 8001190:	f000 f88e 	bl	80012b0 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8001194:	200c      	movs	r0, #12
 8001196:	f7ff fe13 	bl	8000dc0 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 800119a:	2006      	movs	r0, #6
 800119c:	f7ff fe10 	bl	8000dc0 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff fe0d 	bl	8000dc0 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff fe0a 	bl	8000dc0 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fe07 	bl	8000dc0 <CLCD_Write_Instruction>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <CLCD_Clear>:

void CLCD_Clear(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
	CLCD_Write_Instruction(0x01);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fe00 	bl	8000dc0 <CLCD_Write_Instruction>
	HAL_Delay(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f000 f875 	bl	80012b0 <HAL_Delay>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d0:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <HAL_Init+0x40>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <HAL_Init+0x40>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	@ (800120c <HAL_Init+0x40>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 f94f 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	200f      	movs	r0, #15
 80011fc:	f000 f808 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001200:	f7ff fc2c 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023c00 	.word	0x40023c00

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <HAL_InitTick+0x54>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_InitTick+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f967 	bl	8001502 <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 f92f 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4a06      	ldr	r2, [pc, #24]	@ (800126c <HAL_InitTick+0x5c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	20000008 	.word	0x20000008
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008
 8001294:	200001c8 	.word	0x200001c8

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	200001c8 	.word	0x200001c8

080012b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b8:	f7ff ffee 	bl	8001298 <HAL_GetTick>
 80012bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d005      	beq.n	80012d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_Delay+0x44>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4413      	add	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012d6:	bf00      	nop
 80012d8:	f7ff ffde 	bl	8001298 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d8f7      	bhi.n	80012d8 <HAL_Delay+0x28>
  {
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	@ (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	@ 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff8e 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff29 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c0:	f7ff ff3e 	bl	8001340 <__NVIC_GetPriorityGrouping>
 80014c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff ff8e 	bl	80013ec <NVIC_EncodePriority>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff5d 	bl	8001398 <__NVIC_SetPriority>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff31 	bl	800135c <__NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffa2 	bl	8001454 <SysTick_Config>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001526:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff feb6 	bl	8001298 <HAL_GetTick>
 800152c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d008      	beq.n	800154c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2280      	movs	r2, #128	@ 0x80
 800153e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e052      	b.n	80015f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0216 	bic.w	r2, r2, #22
 800155a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800156a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	2b00      	cmp	r3, #0
 8001572:	d103      	bne.n	800157c <HAL_DMA_Abort+0x62>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0208 	bic.w	r2, r2, #8
 800158a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159c:	e013      	b.n	80015c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800159e:	f7ff fe7b 	bl	8001298 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d90c      	bls.n	80015c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2220      	movs	r2, #32
 80015b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2203      	movs	r2, #3
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e015      	b.n	80015f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e4      	bne.n	800159e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d8:	223f      	movs	r2, #63	@ 0x3f
 80015da:	409a      	lsls	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d004      	beq.n	8001618 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2280      	movs	r2, #128	@ 0x80
 8001612:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e00c      	b.n	8001632 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2205      	movs	r2, #5
 800161c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0201 	bic.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	@ 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e16b      	b.n	8001934 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800165c:	2201      	movs	r2, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	429a      	cmp	r2, r3
 8001676:	f040 815a 	bne.w	800192e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b01      	cmp	r3, #1
 8001684:	d005      	beq.n	8001692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168e:	2b02      	cmp	r3, #2
 8001690:	d130      	bne.n	80016f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c8:	2201      	movs	r2, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 0201 	and.w	r2, r3, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d017      	beq.n	8001730 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d123      	bne.n	8001784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	08da      	lsrs	r2, r3, #3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3208      	adds	r2, #8
 8001744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	220f      	movs	r2, #15
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	08da      	lsrs	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3208      	adds	r2, #8
 800177e:	69b9      	ldr	r1, [r7, #24]
 8001780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0203 	and.w	r2, r3, #3
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80b4 	beq.w	800192e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b60      	ldr	r3, [pc, #384]	@ (800194c <HAL_GPIO_Init+0x30c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	4a5f      	ldr	r2, [pc, #380]	@ (800194c <HAL_GPIO_Init+0x30c>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d6:	4b5d      	ldr	r3, [pc, #372]	@ (800194c <HAL_GPIO_Init+0x30c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001950 <HAL_GPIO_Init+0x310>)
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a52      	ldr	r2, [pc, #328]	@ (8001954 <HAL_GPIO_Init+0x314>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d02b      	beq.n	8001866 <HAL_GPIO_Init+0x226>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a51      	ldr	r2, [pc, #324]	@ (8001958 <HAL_GPIO_Init+0x318>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d025      	beq.n	8001862 <HAL_GPIO_Init+0x222>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a50      	ldr	r2, [pc, #320]	@ (800195c <HAL_GPIO_Init+0x31c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d01f      	beq.n	800185e <HAL_GPIO_Init+0x21e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4f      	ldr	r2, [pc, #316]	@ (8001960 <HAL_GPIO_Init+0x320>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d019      	beq.n	800185a <HAL_GPIO_Init+0x21a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4e      	ldr	r2, [pc, #312]	@ (8001964 <HAL_GPIO_Init+0x324>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0x216>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4d      	ldr	r2, [pc, #308]	@ (8001968 <HAL_GPIO_Init+0x328>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00d      	beq.n	8001852 <HAL_GPIO_Init+0x212>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4c      	ldr	r2, [pc, #304]	@ (800196c <HAL_GPIO_Init+0x32c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <HAL_GPIO_Init+0x20e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4b      	ldr	r2, [pc, #300]	@ (8001970 <HAL_GPIO_Init+0x330>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_GPIO_Init+0x20a>
 8001846:	2307      	movs	r3, #7
 8001848:	e00e      	b.n	8001868 <HAL_GPIO_Init+0x228>
 800184a:	2308      	movs	r3, #8
 800184c:	e00c      	b.n	8001868 <HAL_GPIO_Init+0x228>
 800184e:	2306      	movs	r3, #6
 8001850:	e00a      	b.n	8001868 <HAL_GPIO_Init+0x228>
 8001852:	2305      	movs	r3, #5
 8001854:	e008      	b.n	8001868 <HAL_GPIO_Init+0x228>
 8001856:	2304      	movs	r3, #4
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x228>
 800185a:	2303      	movs	r3, #3
 800185c:	e004      	b.n	8001868 <HAL_GPIO_Init+0x228>
 800185e:	2302      	movs	r3, #2
 8001860:	e002      	b.n	8001868 <HAL_GPIO_Init+0x228>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_GPIO_Init+0x228>
 8001866:	2300      	movs	r3, #0
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	f002 0203 	and.w	r2, r2, #3
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	4093      	lsls	r3, r2
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001878:	4935      	ldr	r1, [pc, #212]	@ (8001950 <HAL_GPIO_Init+0x310>)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001886:	4b3b      	ldr	r3, [pc, #236]	@ (8001974 <HAL_GPIO_Init+0x334>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018aa:	4a32      	ldr	r2, [pc, #200]	@ (8001974 <HAL_GPIO_Init+0x334>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b0:	4b30      	ldr	r3, [pc, #192]	@ (8001974 <HAL_GPIO_Init+0x334>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d4:	4a27      	ldr	r2, [pc, #156]	@ (8001974 <HAL_GPIO_Init+0x334>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018da:	4b26      	ldr	r3, [pc, #152]	@ (8001974 <HAL_GPIO_Init+0x334>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001974 <HAL_GPIO_Init+0x334>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001904:	4b1b      	ldr	r3, [pc, #108]	@ (8001974 <HAL_GPIO_Init+0x334>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001928:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <HAL_GPIO_Init+0x334>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3301      	adds	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	f67f ae90 	bls.w	800165c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3724      	adds	r7, #36	@ 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40013800 	.word	0x40013800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40021400 	.word	0x40021400
 800196c:	40021800 	.word	0x40021800
 8001970:	40021c00 	.word	0x40021c00
 8001974:	40013c00 	.word	0x40013c00

08001978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e001      	b.n	800199a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b8:	787b      	ldrb	r3, [r7, #1]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019c4:	e003      	b.n	80019ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	041a      	lsls	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	619a      	str	r2, [r3, #24]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019e6:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f2:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff f81c 	bl	8000a38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40013c00 	.word	0x40013c00

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e267      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d075      	beq.n	8001b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a2a:	4b88      	ldr	r3, [pc, #544]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d00c      	beq.n	8001a50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a36:	4b85      	ldr	r3, [pc, #532]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d112      	bne.n	8001a68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a42:	4b82      	ldr	r3, [pc, #520]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a4e:	d10b      	bne.n	8001a68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	4b7e      	ldr	r3, [pc, #504]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d05b      	beq.n	8001b14 <HAL_RCC_OscConfig+0x108>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d157      	bne.n	8001b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e242      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a70:	d106      	bne.n	8001a80 <HAL_RCC_OscConfig+0x74>
 8001a72:	4b76      	ldr	r3, [pc, #472]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a75      	ldr	r2, [pc, #468]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e01d      	b.n	8001abc <HAL_RCC_OscConfig+0xb0>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x98>
 8001a8a:	4b70      	ldr	r3, [pc, #448]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a6f      	ldr	r2, [pc, #444]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b6d      	ldr	r3, [pc, #436]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0xb0>
 8001aa4:	4b69      	ldr	r3, [pc, #420]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a68      	ldr	r2, [pc, #416]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b66      	ldr	r3, [pc, #408]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a65      	ldr	r2, [pc, #404]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fbe8 	bl	8001298 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff fbe4 	bl	8001298 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	@ 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e207      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b5b      	ldr	r3, [pc, #364]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0xc0>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fbd4 	bl	8001298 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff fbd0 	bl	8001298 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	@ 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1f3      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	4b51      	ldr	r3, [pc, #324]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0xe8>
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d063      	beq.n	8001bea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b22:	4b4a      	ldr	r3, [pc, #296]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00b      	beq.n	8001b46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2e:	4b47      	ldr	r3, [pc, #284]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d11c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3a:	4b44      	ldr	r3, [pc, #272]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d116      	bne.n	8001b74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	4b41      	ldr	r3, [pc, #260]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x152>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1c7      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4937      	ldr	r1, [pc, #220]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	e03a      	b.n	8001bea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b7c:	4b34      	ldr	r3, [pc, #208]	@ (8001c50 <HAL_RCC_OscConfig+0x244>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff fb89 	bl	8001298 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fb85 	bl	8001298 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e1a8      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b28      	ldr	r3, [pc, #160]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4925      	ldr	r1, [pc, #148]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
 8001bbc:	e015      	b.n	8001bea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbe:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <HAL_RCC_OscConfig+0x244>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fb68 	bl	8001298 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fb64 	bl	8001298 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e187      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d036      	beq.n	8001c64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d016      	beq.n	8001c2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <HAL_RCC_OscConfig+0x248>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff fb48 	bl	8001298 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fb44 	bl	8001298 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e167      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x200>
 8001c2a:	e01b      	b.n	8001c64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2c:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <HAL_RCC_OscConfig+0x248>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c32:	f7ff fb31 	bl	8001298 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c38:	e00e      	b.n	8001c58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3a:	f7ff fb2d 	bl	8001298 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d907      	bls.n	8001c58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e150      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	42470000 	.word	0x42470000
 8001c54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	4b88      	ldr	r3, [pc, #544]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1ea      	bne.n	8001c3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8097 	beq.w	8001da0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b81      	ldr	r3, [pc, #516]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10f      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b7d      	ldr	r3, [pc, #500]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	4a7c      	ldr	r2, [pc, #496]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c92:	4b7a      	ldr	r3, [pc, #488]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca2:	4b77      	ldr	r3, [pc, #476]	@ (8001e80 <HAL_RCC_OscConfig+0x474>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d118      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cae:	4b74      	ldr	r3, [pc, #464]	@ (8001e80 <HAL_RCC_OscConfig+0x474>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a73      	ldr	r2, [pc, #460]	@ (8001e80 <HAL_RCC_OscConfig+0x474>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cba:	f7ff faed 	bl	8001298 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc2:	f7ff fae9 	bl	8001298 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e10c      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e80 <HAL_RCC_OscConfig+0x474>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x2ea>
 8001ce8:	4b64      	ldr	r3, [pc, #400]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cec:	4a63      	ldr	r2, [pc, #396]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf4:	e01c      	b.n	8001d30 <HAL_RCC_OscConfig+0x324>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x30c>
 8001cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d02:	4a5e      	ldr	r2, [pc, #376]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d16:	e00b      	b.n	8001d30 <HAL_RCC_OscConfig+0x324>
 8001d18:	4b58      	ldr	r3, [pc, #352]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1c:	4a57      	ldr	r2, [pc, #348]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d24:	4b55      	ldr	r3, [pc, #340]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d28:	4a54      	ldr	r2, [pc, #336]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d2a:	f023 0304 	bic.w	r3, r3, #4
 8001d2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d015      	beq.n	8001d64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d38:	f7ff faae 	bl	8001298 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7ff faaa 	bl	8001298 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e0cb      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d56:	4b49      	ldr	r3, [pc, #292]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0ee      	beq.n	8001d40 <HAL_RCC_OscConfig+0x334>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d64:	f7ff fa98 	bl	8001298 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fa94 	bl	8001298 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0b5      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d82:	4b3e      	ldr	r3, [pc, #248]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ee      	bne.n	8001d6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b39      	ldr	r3, [pc, #228]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	4a38      	ldr	r2, [pc, #224]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a1 	beq.w	8001eec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001daa:	4b34      	ldr	r3, [pc, #208]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d05c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d141      	bne.n	8001e42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <HAL_RCC_OscConfig+0x478>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fa68 	bl	8001298 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff fa64 	bl	8001298 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e087      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	019b      	lsls	r3, r3, #6
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	3b01      	subs	r3, #1
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	491b      	ldr	r1, [pc, #108]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e14:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <HAL_RCC_OscConfig+0x478>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fa3d 	bl	8001298 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e22:	f7ff fa39 	bl	8001298 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e05c      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x416>
 8001e40:	e054      	b.n	8001eec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <HAL_RCC_OscConfig+0x478>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fa26 	bl	8001298 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7ff fa22 	bl	8001298 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e045      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x444>
 8001e6e:	e03d      	b.n	8001eec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e038      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_RCC_OscConfig+0x4ec>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d028      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d121      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d11a      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001eb8:	4013      	ands	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ebe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d111      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ece:	085b      	lsrs	r3, r3, #1
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800

08001efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0cc      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f10:	4b68      	ldr	r3, [pc, #416]	@ (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d90c      	bls.n	8001f38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b65      	ldr	r3, [pc, #404]	@ (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b63      	ldr	r3, [pc, #396]	@ (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0b8      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d020      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f50:	4b59      	ldr	r3, [pc, #356]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a58      	ldr	r2, [pc, #352]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f68:	4b53      	ldr	r3, [pc, #332]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4a52      	ldr	r2, [pc, #328]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f74:	4b50      	ldr	r3, [pc, #320]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	494d      	ldr	r1, [pc, #308]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d044      	beq.n	800201c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	4b47      	ldr	r3, [pc, #284]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d119      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e07f      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d003      	beq.n	8001fba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d107      	bne.n	8001fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fba:	4b3f      	ldr	r3, [pc, #252]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e06f      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	4b3b      	ldr	r3, [pc, #236]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e067      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fda:	4b37      	ldr	r3, [pc, #220]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f023 0203 	bic.w	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4934      	ldr	r1, [pc, #208]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fec:	f7ff f954 	bl	8001298 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff4:	f7ff f950 	bl	8001298 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e04f      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200a:	4b2b      	ldr	r3, [pc, #172]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 020c 	and.w	r2, r3, #12
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	429a      	cmp	r2, r3
 800201a:	d1eb      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800201c:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d20c      	bcs.n	8002044 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e032      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002050:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4916      	ldr	r1, [pc, #88]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206e:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	490e      	ldr	r1, [pc, #56]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002082:	f000 f821 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8002086:	4602      	mov	r2, r0
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	490a      	ldr	r1, [pc, #40]	@ (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	5ccb      	ldrb	r3, [r1, r3]
 8002096:	fa22 f303 	lsr.w	r3, r2, r3
 800209a:	4a09      	ldr	r2, [pc, #36]	@ (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800209e:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <HAL_RCC_ClockConfig+0x1c8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff f8b4 	bl	8001210 <HAL_InitTick>

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00
 80020b8:	40023800 	.word	0x40023800
 80020bc:	080057a4 	.word	0x080057a4
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020cc:	b094      	sub	sp, #80	@ 0x50
 80020ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020e0:	4b79      	ldr	r3, [pc, #484]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d00d      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x40>
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	f200 80e1 	bhi.w	80022b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x34>
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0x3a>
 80020fa:	e0db      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020fc:	4b73      	ldr	r3, [pc, #460]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x204>)
 80020fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002100:	e0db      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002102:	4b73      	ldr	r3, [pc, #460]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002104:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002106:	e0d8      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002108:	4b6f      	ldr	r3, [pc, #444]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002110:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002112:	4b6d      	ldr	r3, [pc, #436]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d063      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211e:	4b6a      	ldr	r3, [pc, #424]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	099b      	lsrs	r3, r3, #6
 8002124:	2200      	movs	r2, #0
 8002126:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002128:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800212a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800212c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002130:	633b      	str	r3, [r7, #48]	@ 0x30
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	@ 0x34
 8002136:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800213a:	4622      	mov	r2, r4
 800213c:	462b      	mov	r3, r5
 800213e:	f04f 0000 	mov.w	r0, #0
 8002142:	f04f 0100 	mov.w	r1, #0
 8002146:	0159      	lsls	r1, r3, #5
 8002148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800214c:	0150      	lsls	r0, r2, #5
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4621      	mov	r1, r4
 8002154:	1a51      	subs	r1, r2, r1
 8002156:	6139      	str	r1, [r7, #16]
 8002158:	4629      	mov	r1, r5
 800215a:	eb63 0301 	sbc.w	r3, r3, r1
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800216c:	4659      	mov	r1, fp
 800216e:	018b      	lsls	r3, r1, #6
 8002170:	4651      	mov	r1, sl
 8002172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002176:	4651      	mov	r1, sl
 8002178:	018a      	lsls	r2, r1, #6
 800217a:	4651      	mov	r1, sl
 800217c:	ebb2 0801 	subs.w	r8, r2, r1
 8002180:	4659      	mov	r1, fp
 8002182:	eb63 0901 	sbc.w	r9, r3, r1
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800219a:	4690      	mov	r8, r2
 800219c:	4699      	mov	r9, r3
 800219e:	4623      	mov	r3, r4
 80021a0:	eb18 0303 	adds.w	r3, r8, r3
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	462b      	mov	r3, r5
 80021a8:	eb49 0303 	adc.w	r3, r9, r3
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021ba:	4629      	mov	r1, r5
 80021bc:	024b      	lsls	r3, r1, #9
 80021be:	4621      	mov	r1, r4
 80021c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021c4:	4621      	mov	r1, r4
 80021c6:	024a      	lsls	r2, r1, #9
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ce:	2200      	movs	r2, #0
 80021d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021d8:	f7fe f84a 	bl	8000270 <__aeabi_uldivmod>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4613      	mov	r3, r2
 80021e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021e4:	e058      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e6:	4b38      	ldr	r3, [pc, #224]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	099b      	lsrs	r3, r3, #6
 80021ec:	2200      	movs	r2, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	4611      	mov	r1, r2
 80021f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021f6:	623b      	str	r3, [r7, #32]
 80021f8:	2300      	movs	r3, #0
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80021fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002200:	4642      	mov	r2, r8
 8002202:	464b      	mov	r3, r9
 8002204:	f04f 0000 	mov.w	r0, #0
 8002208:	f04f 0100 	mov.w	r1, #0
 800220c:	0159      	lsls	r1, r3, #5
 800220e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002212:	0150      	lsls	r0, r2, #5
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4641      	mov	r1, r8
 800221a:	ebb2 0a01 	subs.w	sl, r2, r1
 800221e:	4649      	mov	r1, r9
 8002220:	eb63 0b01 	sbc.w	fp, r3, r1
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002230:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002234:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002238:	ebb2 040a 	subs.w	r4, r2, sl
 800223c:	eb63 050b 	sbc.w	r5, r3, fp
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	00eb      	lsls	r3, r5, #3
 800224a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800224e:	00e2      	lsls	r2, r4, #3
 8002250:	4614      	mov	r4, r2
 8002252:	461d      	mov	r5, r3
 8002254:	4643      	mov	r3, r8
 8002256:	18e3      	adds	r3, r4, r3
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	464b      	mov	r3, r9
 800225c:	eb45 0303 	adc.w	r3, r5, r3
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800226e:	4629      	mov	r1, r5
 8002270:	028b      	lsls	r3, r1, #10
 8002272:	4621      	mov	r1, r4
 8002274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002278:	4621      	mov	r1, r4
 800227a:	028a      	lsls	r2, r1, #10
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002282:	2200      	movs	r2, #0
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	61fa      	str	r2, [r7, #28]
 8002288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800228c:	f7fd fff0 	bl	8000270 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	3301      	adds	r3, #1
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80022a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022b2:	e002      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x204>)
 80022b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3750      	adds	r7, #80	@ 0x50
 80022c0:	46bd      	mov	sp, r7
 80022c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	00f42400 	.word	0x00f42400
 80022d0:	007a1200 	.word	0x007a1200

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b03      	ldr	r3, [pc, #12]	@ (80022e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000000 	.word	0x20000000

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022f0:	f7ff fff0 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b05      	ldr	r3, [pc, #20]	@ (800230c <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	0a9b      	lsrs	r3, r3, #10
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4903      	ldr	r1, [pc, #12]	@ (8002310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800
 8002310:	080057b4 	.word	0x080057b4

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002318:	f7ff ffdc 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0b5b      	lsrs	r3, r3, #13
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	@ (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	080057b4 	.word	0x080057b4

0800233c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e041      	b.n	80023d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe fba2 	bl	8000aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3304      	adds	r3, #4
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f000 f9b6 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d001      	beq.n	80023f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e04e      	b.n	8002492 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a23      	ldr	r2, [pc, #140]	@ (80024a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d022      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x80>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800241e:	d01d      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x80>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1f      	ldr	r2, [pc, #124]	@ (80024a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d018      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x80>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1e      	ldr	r2, [pc, #120]	@ (80024a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d013      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x80>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1c      	ldr	r2, [pc, #112]	@ (80024ac <HAL_TIM_Base_Start_IT+0xd0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00e      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x80>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1b      	ldr	r2, [pc, #108]	@ (80024b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d009      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x80>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a19      	ldr	r2, [pc, #100]	@ (80024b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d004      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x80>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a18      	ldr	r2, [pc, #96]	@ (80024b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d111      	bne.n	8002480 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b06      	cmp	r3, #6
 800246c:	d010      	beq.n	8002490 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0201 	orr.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247e:	e007      	b.n	8002490 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40010000 	.word	0x40010000
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40010400 	.word	0x40010400
 80024b4:	40014000 	.word	0x40014000
 80024b8:	40001800 	.word	0x40001800

080024bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d020      	beq.n	8002520 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01b      	beq.n	8002520 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0202 	mvn.w	r2, #2
 80024f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f8d2 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 800250c:	e005      	b.n	800251a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f8c4 	bl	800269c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f8d5 	bl	80026c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d020      	beq.n	800256c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01b      	beq.n	800256c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0204 	mvn.w	r2, #4
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f8ac 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f89e 	bl	800269c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f8af 	bl	80026c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d020      	beq.n	80025b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01b      	beq.n	80025b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0208 	mvn.w	r2, #8
 8002588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2204      	movs	r2, #4
 800258e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f886 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 80025a4:	e005      	b.n	80025b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f878 	bl	800269c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f889 	bl	80026c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d020      	beq.n	8002604 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01b      	beq.n	8002604 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0210 	mvn.w	r2, #16
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2208      	movs	r2, #8
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f860 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f852 	bl	800269c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f863 	bl	80026c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00c      	beq.n	8002628 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0201 	mvn.w	r2, #1
 8002620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe f9f2 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00c      	beq.n	800264c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f982 	bl	8002950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00c      	beq.n	8002670 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f834 	bl	80026d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00c      	beq.n	8002694 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0220 	mvn.w	r2, #32
 800268c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f954 	bl	800293c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a46      	ldr	r2, [pc, #280]	@ (8002818 <TIM_Base_SetConfig+0x12c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d013      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800270a:	d00f      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a43      	ldr	r2, [pc, #268]	@ (800281c <TIM_Base_SetConfig+0x130>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00b      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a42      	ldr	r2, [pc, #264]	@ (8002820 <TIM_Base_SetConfig+0x134>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a41      	ldr	r2, [pc, #260]	@ (8002824 <TIM_Base_SetConfig+0x138>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d003      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a40      	ldr	r2, [pc, #256]	@ (8002828 <TIM_Base_SetConfig+0x13c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d108      	bne.n	800273e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a35      	ldr	r2, [pc, #212]	@ (8002818 <TIM_Base_SetConfig+0x12c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d02b      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800274c:	d027      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a32      	ldr	r2, [pc, #200]	@ (800281c <TIM_Base_SetConfig+0x130>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d023      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a31      	ldr	r2, [pc, #196]	@ (8002820 <TIM_Base_SetConfig+0x134>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01f      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a30      	ldr	r2, [pc, #192]	@ (8002824 <TIM_Base_SetConfig+0x138>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01b      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a2f      	ldr	r2, [pc, #188]	@ (8002828 <TIM_Base_SetConfig+0x13c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d017      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a2e      	ldr	r2, [pc, #184]	@ (800282c <TIM_Base_SetConfig+0x140>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a2d      	ldr	r2, [pc, #180]	@ (8002830 <TIM_Base_SetConfig+0x144>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00f      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a2c      	ldr	r2, [pc, #176]	@ (8002834 <TIM_Base_SetConfig+0x148>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00b      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a2b      	ldr	r2, [pc, #172]	@ (8002838 <TIM_Base_SetConfig+0x14c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d007      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a2a      	ldr	r2, [pc, #168]	@ (800283c <TIM_Base_SetConfig+0x150>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d003      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a29      	ldr	r2, [pc, #164]	@ (8002840 <TIM_Base_SetConfig+0x154>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d108      	bne.n	80027b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a10      	ldr	r2, [pc, #64]	@ (8002818 <TIM_Base_SetConfig+0x12c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d003      	beq.n	80027e4 <TIM_Base_SetConfig+0xf8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a12      	ldr	r2, [pc, #72]	@ (8002828 <TIM_Base_SetConfig+0x13c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d103      	bne.n	80027ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d105      	bne.n	800280a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f023 0201 	bic.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	611a      	str	r2, [r3, #16]
  }
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40010000 	.word	0x40010000
 800281c:	40000400 	.word	0x40000400
 8002820:	40000800 	.word	0x40000800
 8002824:	40000c00 	.word	0x40000c00
 8002828:	40010400 	.word	0x40010400
 800282c:	40014000 	.word	0x40014000
 8002830:	40014400 	.word	0x40014400
 8002834:	40014800 	.word	0x40014800
 8002838:	40001800 	.word	0x40001800
 800283c:	40001c00 	.word	0x40001c00
 8002840:	40002000 	.word	0x40002000

08002844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002858:	2302      	movs	r3, #2
 800285a:	e05a      	b.n	8002912 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a21      	ldr	r2, [pc, #132]	@ (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d022      	beq.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a8:	d01d      	beq.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d018      	beq.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1a      	ldr	r2, [pc, #104]	@ (800292c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00e      	beq.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a18      	ldr	r2, [pc, #96]	@ (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a17      	ldr	r2, [pc, #92]	@ (8002934 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a15      	ldr	r2, [pc, #84]	@ (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10c      	bne.n	8002900 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40010000 	.word	0x40010000
 8002924:	40000400 	.word	0x40000400
 8002928:	40000800 	.word	0x40000800
 800292c:	40000c00 	.word	0x40000c00
 8002930:	40010400 	.word	0x40010400
 8002934:	40014000 	.word	0x40014000
 8002938:	40001800 	.word	0x40001800

0800293c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e042      	b.n	80029fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe f8b0 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2224      	movs	r2, #36	@ 0x24
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fcdb 	bl	8003364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d112      	bne.n	8002a44 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_UART_Receive_IT+0x26>
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00b      	b.n	8002a46 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 faba 	bl	8002fb4 <UART_Start_Receive_IT>
 8002a40:	4603      	mov	r3, r0
 8002a42:	e000      	b.n	8002a46 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b0ba      	sub	sp, #232	@ 0xe8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10f      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x66>
 8002aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fb99 	bl	80031e6 <UART_Receive_IT>
      return;
 8002ab4:	e25b      	b.n	8002f6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 80de 	beq.w	8002c7c <HAL_UART_IRQHandler+0x22c>
 8002ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ad0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80d1 	beq.w	8002c7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_UART_IRQHandler+0xae>
 8002ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_UART_IRQHandler+0xd2>
 8002b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	f043 0202 	orr.w	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_UART_IRQHandler+0xf6>
 8002b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	f043 0204 	orr.w	r2, r3, #4
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d011      	beq.n	8002b76 <HAL_UART_IRQHandler+0x126>
 8002b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	f043 0208 	orr.w	r2, r3, #8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 81f2 	beq.w	8002f64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_UART_IRQHandler+0x14e>
 8002b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fb24 	bl	80031e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba8:	2b40      	cmp	r3, #64	@ 0x40
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <HAL_UART_IRQHandler+0x17a>
 8002bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d04f      	beq.n	8002c6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa2c 	bl	8003028 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bda:	2b40      	cmp	r3, #64	@ 0x40
 8002bdc:	d141      	bne.n	8002c62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3314      	adds	r3, #20
 8002be4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3314      	adds	r3, #20
 8002c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c1a:	e841 2300 	strex	r3, r2, [r1]
 8002c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1d9      	bne.n	8002bde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d013      	beq.n	8002c5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c36:	4a7e      	ldr	r2, [pc, #504]	@ (8002e30 <HAL_UART_IRQHandler+0x3e0>)
 8002c38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe fcdb 	bl	80015fa <HAL_DMA_Abort_IT>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d016      	beq.n	8002c78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c54:	4610      	mov	r0, r2
 8002c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c58:	e00e      	b.n	8002c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f994 	bl	8002f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	e00a      	b.n	8002c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f990 	bl	8002f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c68:	e006      	b.n	8002c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f98c 	bl	8002f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c76:	e175      	b.n	8002f64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c78:	bf00      	nop
    return;
 8002c7a:	e173      	b.n	8002f64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	f040 814f 	bne.w	8002f24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8148 	beq.w	8002f24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8141 	beq.w	8002f24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc2:	2b40      	cmp	r3, #64	@ 0x40
 8002cc4:	f040 80b6 	bne.w	8002e34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8145 	beq.w	8002f68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	f080 813e 	bcs.w	8002f68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cf2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cfe:	f000 8088 	beq.w	8002e12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	330c      	adds	r3, #12
 8002d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d3e:	e841 2300 	strex	r3, r2, [r1]
 8002d42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1d9      	bne.n	8002d02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3314      	adds	r3, #20
 8002d54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d58:	e853 3f00 	ldrex	r3, [r3]
 8002d5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3314      	adds	r3, #20
 8002d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d7e:	e841 2300 	strex	r3, r2, [r1]
 8002d82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e1      	bne.n	8002d4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3314      	adds	r3, #20
 8002d90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d94:	e853 3f00 	ldrex	r3, [r3]
 8002d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002da0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3314      	adds	r3, #20
 8002daa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002dae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002db0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002db4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002dbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e3      	bne.n	8002d8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dda:	e853 3f00 	ldrex	r3, [r3]
 8002dde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002de2:	f023 0310 	bic.w	r3, r3, #16
 8002de6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002df4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002df6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dfc:	e841 2300 	strex	r3, r2, [r1]
 8002e00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e3      	bne.n	8002dd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe fb84 	bl	800151a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f8b7 	bl	8002f9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e2e:	e09b      	b.n	8002f68 <HAL_UART_IRQHandler+0x518>
 8002e30:	080030ef 	.word	0x080030ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 808e 	beq.w	8002f6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8089 	beq.w	8002f6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e3      	bne.n	8002e5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3314      	adds	r3, #20
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3314      	adds	r3, #20
 8002eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002eb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e3      	bne.n	8002e92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	330c      	adds	r3, #12
 8002ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0310 	bic.w	r3, r3, #16
 8002eee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	330c      	adds	r3, #12
 8002ef8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002efc:	61fa      	str	r2, [r7, #28]
 8002efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	69b9      	ldr	r1, [r7, #24]
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	617b      	str	r3, [r7, #20]
   return(result);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e3      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f83d 	bl	8002f9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f22:	e023      	b.n	8002f6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d009      	beq.n	8002f44 <HAL_UART_IRQHandler+0x4f4>
 8002f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f8ea 	bl	8003116 <UART_Transmit_IT>
    return;
 8002f42:	e014      	b.n	8002f6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00e      	beq.n	8002f6e <HAL_UART_IRQHandler+0x51e>
 8002f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f92a 	bl	80031b6 <UART_EndTransmit_IT>
    return;
 8002f62:	e004      	b.n	8002f6e <HAL_UART_IRQHandler+0x51e>
    return;
 8002f64:	bf00      	nop
 8002f66:	e002      	b.n	8002f6e <HAL_UART_IRQHandler+0x51e>
      return;
 8002f68:	bf00      	nop
 8002f6a:	e000      	b.n	8002f6e <HAL_UART_IRQHandler+0x51e>
      return;
 8002f6c:	bf00      	nop
  }
}
 8002f6e:	37e8      	adds	r7, #232	@ 0xe8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	88fa      	ldrh	r2, [r7, #6]
 8002fd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2222      	movs	r2, #34	@ 0x22
 8002fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ff8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0220 	orr.w	r2, r2, #32
 8003018:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003028:	b480      	push	{r7}
 800302a:	b095      	sub	sp, #84	@ 0x54
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	330c      	adds	r3, #12
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303a:	e853 3f00 	ldrex	r3, [r3]
 800303e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003042:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	330c      	adds	r3, #12
 800304e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003050:	643a      	str	r2, [r7, #64]	@ 0x40
 8003052:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003056:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003058:	e841 2300 	strex	r3, r2, [r1]
 800305c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800305e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e5      	bne.n	8003030 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3314      	adds	r3, #20
 800306a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	e853 3f00 	ldrex	r3, [r3]
 8003072:	61fb      	str	r3, [r7, #28]
   return(result);
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3314      	adds	r3, #20
 8003082:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003084:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800308a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800308c:	e841 2300 	strex	r3, r2, [r1]
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e5      	bne.n	8003064 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309c:	2b01      	cmp	r3, #1
 800309e:	d119      	bne.n	80030d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f023 0310 	bic.w	r3, r3, #16
 80030b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030c0:	61ba      	str	r2, [r7, #24]
 80030c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	6979      	ldr	r1, [r7, #20]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	613b      	str	r3, [r7, #16]
   return(result);
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e5      	bne.n	80030a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030e2:	bf00      	nop
 80030e4:	3754      	adds	r7, #84	@ 0x54
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7ff ff3d 	bl	8002f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003116:	b480      	push	{r7}
 8003118:	b085      	sub	sp, #20
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b21      	cmp	r3, #33	@ 0x21
 8003128:	d13e      	bne.n	80031a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003132:	d114      	bne.n	800315e <UART_Transmit_IT+0x48>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d110      	bne.n	800315e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003150:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	1c9a      	adds	r2, r3, #2
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	621a      	str	r2, [r3, #32]
 800315c:	e008      	b.n	8003170 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	1c59      	adds	r1, r3, #1
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6211      	str	r1, [r2, #32]
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4619      	mov	r1, r3
 800317e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10f      	bne.n	80031a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003192:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fecc 	bl	8002f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b08c      	sub	sp, #48	@ 0x30
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b22      	cmp	r3, #34	@ 0x22
 80031f8:	f040 80ae 	bne.w	8003358 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003204:	d117      	bne.n	8003236 <UART_Receive_IT+0x50>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d113      	bne.n	8003236 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	b29b      	uxth	r3, r3
 8003220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003224:	b29a      	uxth	r2, r3
 8003226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003228:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28
 8003234:	e026      	b.n	8003284 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800323c:	2300      	movs	r3, #0
 800323e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003248:	d007      	beq.n	800325a <UART_Receive_IT+0x74>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <UART_Receive_IT+0x82>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e008      	b.n	800327a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003274:	b2da      	uxtb	r2, r3
 8003276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003278:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29b      	uxth	r3, r3
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	4619      	mov	r1, r3
 8003292:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003294:	2b00      	cmp	r3, #0
 8003296:	d15d      	bne.n	8003354 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0220 	bic.w	r2, r2, #32
 80032a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d135      	bne.n	800334a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	330c      	adds	r3, #12
 80032ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	e853 3f00 	ldrex	r3, [r3]
 80032f2:	613b      	str	r3, [r7, #16]
   return(result);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f023 0310 	bic.w	r3, r3, #16
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	330c      	adds	r3, #12
 8003302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003304:	623a      	str	r2, [r7, #32]
 8003306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	69f9      	ldr	r1, [r7, #28]
 800330a:	6a3a      	ldr	r2, [r7, #32]
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	61bb      	str	r3, [r7, #24]
   return(result);
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e5      	bne.n	80032e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b10      	cmp	r3, #16
 8003324:	d10a      	bne.n	800333c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003340:	4619      	mov	r1, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fe2a 	bl	8002f9c <HAL_UARTEx_RxEventCallback>
 8003348:	e002      	b.n	8003350 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fd fb48 	bl	80009e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e002      	b.n	800335a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e000      	b.n	800335a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	3730      	adds	r7, #48	@ 0x30
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b0c0      	sub	sp, #256	@ 0x100
 800336a:	af00      	add	r7, sp, #0
 800336c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	ea40 0301 	orr.w	r3, r0, r1
 800338c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	431a      	orrs	r2, r3
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80033bc:	f021 010c 	bic.w	r1, r1, #12
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033ca:	430b      	orrs	r3, r1
 80033cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033de:	6999      	ldr	r1, [r3, #24]
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	ea40 0301 	orr.w	r3, r0, r1
 80033ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b8f      	ldr	r3, [pc, #572]	@ (8003630 <UART_SetConfig+0x2cc>)
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d005      	beq.n	8003404 <UART_SetConfig+0xa0>
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003634 <UART_SetConfig+0x2d0>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d104      	bne.n	800340e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003404:	f7fe ff86 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8003408:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800340c:	e003      	b.n	8003416 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800340e:	f7fe ff6d 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8003412:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003420:	f040 810c 	bne.w	800363c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003428:	2200      	movs	r2, #0
 800342a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800342e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003432:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003436:	4622      	mov	r2, r4
 8003438:	462b      	mov	r3, r5
 800343a:	1891      	adds	r1, r2, r2
 800343c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800343e:	415b      	adcs	r3, r3
 8003440:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003442:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003446:	4621      	mov	r1, r4
 8003448:	eb12 0801 	adds.w	r8, r2, r1
 800344c:	4629      	mov	r1, r5
 800344e:	eb43 0901 	adc.w	r9, r3, r1
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800345e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003466:	4690      	mov	r8, r2
 8003468:	4699      	mov	r9, r3
 800346a:	4623      	mov	r3, r4
 800346c:	eb18 0303 	adds.w	r3, r8, r3
 8003470:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003474:	462b      	mov	r3, r5
 8003476:	eb49 0303 	adc.w	r3, r9, r3
 800347a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800348a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800348e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003492:	460b      	mov	r3, r1
 8003494:	18db      	adds	r3, r3, r3
 8003496:	653b      	str	r3, [r7, #80]	@ 0x50
 8003498:	4613      	mov	r3, r2
 800349a:	eb42 0303 	adc.w	r3, r2, r3
 800349e:	657b      	str	r3, [r7, #84]	@ 0x54
 80034a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80034a8:	f7fc fee2 	bl	8000270 <__aeabi_uldivmod>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4b61      	ldr	r3, [pc, #388]	@ (8003638 <UART_SetConfig+0x2d4>)
 80034b2:	fba3 2302 	umull	r2, r3, r3, r2
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	011c      	lsls	r4, r3, #4
 80034ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034cc:	4642      	mov	r2, r8
 80034ce:	464b      	mov	r3, r9
 80034d0:	1891      	adds	r1, r2, r2
 80034d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034d4:	415b      	adcs	r3, r3
 80034d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034dc:	4641      	mov	r1, r8
 80034de:	eb12 0a01 	adds.w	sl, r2, r1
 80034e2:	4649      	mov	r1, r9
 80034e4:	eb43 0b01 	adc.w	fp, r3, r1
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034fc:	4692      	mov	sl, r2
 80034fe:	469b      	mov	fp, r3
 8003500:	4643      	mov	r3, r8
 8003502:	eb1a 0303 	adds.w	r3, sl, r3
 8003506:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800350a:	464b      	mov	r3, r9
 800350c:	eb4b 0303 	adc.w	r3, fp, r3
 8003510:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003520:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003524:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003528:	460b      	mov	r3, r1
 800352a:	18db      	adds	r3, r3, r3
 800352c:	643b      	str	r3, [r7, #64]	@ 0x40
 800352e:	4613      	mov	r3, r2
 8003530:	eb42 0303 	adc.w	r3, r2, r3
 8003534:	647b      	str	r3, [r7, #68]	@ 0x44
 8003536:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800353a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800353e:	f7fc fe97 	bl	8000270 <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4611      	mov	r1, r2
 8003548:	4b3b      	ldr	r3, [pc, #236]	@ (8003638 <UART_SetConfig+0x2d4>)
 800354a:	fba3 2301 	umull	r2, r3, r3, r1
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2264      	movs	r2, #100	@ 0x64
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	1acb      	subs	r3, r1, r3
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800355e:	4b36      	ldr	r3, [pc, #216]	@ (8003638 <UART_SetConfig+0x2d4>)
 8003560:	fba3 2302 	umull	r2, r3, r3, r2
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800356c:	441c      	add	r4, r3
 800356e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003572:	2200      	movs	r2, #0
 8003574:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003578:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800357c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003580:	4642      	mov	r2, r8
 8003582:	464b      	mov	r3, r9
 8003584:	1891      	adds	r1, r2, r2
 8003586:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003588:	415b      	adcs	r3, r3
 800358a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800358c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003590:	4641      	mov	r1, r8
 8003592:	1851      	adds	r1, r2, r1
 8003594:	6339      	str	r1, [r7, #48]	@ 0x30
 8003596:	4649      	mov	r1, r9
 8003598:	414b      	adcs	r3, r1
 800359a:	637b      	str	r3, [r7, #52]	@ 0x34
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035a8:	4659      	mov	r1, fp
 80035aa:	00cb      	lsls	r3, r1, #3
 80035ac:	4651      	mov	r1, sl
 80035ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b2:	4651      	mov	r1, sl
 80035b4:	00ca      	lsls	r2, r1, #3
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	4642      	mov	r2, r8
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035c4:	464b      	mov	r3, r9
 80035c6:	460a      	mov	r2, r1
 80035c8:	eb42 0303 	adc.w	r3, r2, r3
 80035cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035e4:	460b      	mov	r3, r1
 80035e6:	18db      	adds	r3, r3, r3
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ea:	4613      	mov	r3, r2
 80035ec:	eb42 0303 	adc.w	r3, r2, r3
 80035f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035fa:	f7fc fe39 	bl	8000270 <__aeabi_uldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4b0d      	ldr	r3, [pc, #52]	@ (8003638 <UART_SetConfig+0x2d4>)
 8003604:	fba3 1302 	umull	r1, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	2164      	movs	r1, #100	@ 0x64
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	3332      	adds	r3, #50	@ 0x32
 8003616:	4a08      	ldr	r2, [pc, #32]	@ (8003638 <UART_SetConfig+0x2d4>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	f003 0207 	and.w	r2, r3, #7
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4422      	add	r2, r4
 800362a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800362c:	e106      	b.n	800383c <UART_SetConfig+0x4d8>
 800362e:	bf00      	nop
 8003630:	40011000 	.word	0x40011000
 8003634:	40011400 	.word	0x40011400
 8003638:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800363c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003640:	2200      	movs	r2, #0
 8003642:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003646:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800364a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800364e:	4642      	mov	r2, r8
 8003650:	464b      	mov	r3, r9
 8003652:	1891      	adds	r1, r2, r2
 8003654:	6239      	str	r1, [r7, #32]
 8003656:	415b      	adcs	r3, r3
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
 800365a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800365e:	4641      	mov	r1, r8
 8003660:	1854      	adds	r4, r2, r1
 8003662:	4649      	mov	r1, r9
 8003664:	eb43 0501 	adc.w	r5, r3, r1
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	00eb      	lsls	r3, r5, #3
 8003672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003676:	00e2      	lsls	r2, r4, #3
 8003678:	4614      	mov	r4, r2
 800367a:	461d      	mov	r5, r3
 800367c:	4643      	mov	r3, r8
 800367e:	18e3      	adds	r3, r4, r3
 8003680:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003684:	464b      	mov	r3, r9
 8003686:	eb45 0303 	adc.w	r3, r5, r3
 800368a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800369a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036aa:	4629      	mov	r1, r5
 80036ac:	008b      	lsls	r3, r1, #2
 80036ae:	4621      	mov	r1, r4
 80036b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b4:	4621      	mov	r1, r4
 80036b6:	008a      	lsls	r2, r1, #2
 80036b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80036bc:	f7fc fdd8 	bl	8000270 <__aeabi_uldivmod>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4b60      	ldr	r3, [pc, #384]	@ (8003848 <UART_SetConfig+0x4e4>)
 80036c6:	fba3 2302 	umull	r2, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	011c      	lsls	r4, r3, #4
 80036ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036e0:	4642      	mov	r2, r8
 80036e2:	464b      	mov	r3, r9
 80036e4:	1891      	adds	r1, r2, r2
 80036e6:	61b9      	str	r1, [r7, #24]
 80036e8:	415b      	adcs	r3, r3
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036f0:	4641      	mov	r1, r8
 80036f2:	1851      	adds	r1, r2, r1
 80036f4:	6139      	str	r1, [r7, #16]
 80036f6:	4649      	mov	r1, r9
 80036f8:	414b      	adcs	r3, r1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003708:	4659      	mov	r1, fp
 800370a:	00cb      	lsls	r3, r1, #3
 800370c:	4651      	mov	r1, sl
 800370e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003712:	4651      	mov	r1, sl
 8003714:	00ca      	lsls	r2, r1, #3
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	4603      	mov	r3, r0
 800371c:	4642      	mov	r2, r8
 800371e:	189b      	adds	r3, r3, r2
 8003720:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003724:	464b      	mov	r3, r9
 8003726:	460a      	mov	r2, r1
 8003728:	eb42 0303 	adc.w	r3, r2, r3
 800372c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	67bb      	str	r3, [r7, #120]	@ 0x78
 800373a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003748:	4649      	mov	r1, r9
 800374a:	008b      	lsls	r3, r1, #2
 800374c:	4641      	mov	r1, r8
 800374e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003752:	4641      	mov	r1, r8
 8003754:	008a      	lsls	r2, r1, #2
 8003756:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800375a:	f7fc fd89 	bl	8000270 <__aeabi_uldivmod>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4611      	mov	r1, r2
 8003764:	4b38      	ldr	r3, [pc, #224]	@ (8003848 <UART_SetConfig+0x4e4>)
 8003766:	fba3 2301 	umull	r2, r3, r3, r1
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2264      	movs	r2, #100	@ 0x64
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	1acb      	subs	r3, r1, r3
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	3332      	adds	r3, #50	@ 0x32
 8003778:	4a33      	ldr	r2, [pc, #204]	@ (8003848 <UART_SetConfig+0x4e4>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003784:	441c      	add	r4, r3
 8003786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800378a:	2200      	movs	r2, #0
 800378c:	673b      	str	r3, [r7, #112]	@ 0x70
 800378e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003790:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003794:	4642      	mov	r2, r8
 8003796:	464b      	mov	r3, r9
 8003798:	1891      	adds	r1, r2, r2
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	415b      	adcs	r3, r3
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037a4:	4641      	mov	r1, r8
 80037a6:	1851      	adds	r1, r2, r1
 80037a8:	6039      	str	r1, [r7, #0]
 80037aa:	4649      	mov	r1, r9
 80037ac:	414b      	adcs	r3, r1
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037bc:	4659      	mov	r1, fp
 80037be:	00cb      	lsls	r3, r1, #3
 80037c0:	4651      	mov	r1, sl
 80037c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037c6:	4651      	mov	r1, sl
 80037c8:	00ca      	lsls	r2, r1, #3
 80037ca:	4610      	mov	r0, r2
 80037cc:	4619      	mov	r1, r3
 80037ce:	4603      	mov	r3, r0
 80037d0:	4642      	mov	r2, r8
 80037d2:	189b      	adds	r3, r3, r2
 80037d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037d6:	464b      	mov	r3, r9
 80037d8:	460a      	mov	r2, r1
 80037da:	eb42 0303 	adc.w	r3, r2, r3
 80037de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80037ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037f8:	4649      	mov	r1, r9
 80037fa:	008b      	lsls	r3, r1, #2
 80037fc:	4641      	mov	r1, r8
 80037fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003802:	4641      	mov	r1, r8
 8003804:	008a      	lsls	r2, r1, #2
 8003806:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800380a:	f7fc fd31 	bl	8000270 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <UART_SetConfig+0x4e4>)
 8003814:	fba3 1302 	umull	r1, r3, r3, r2
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	2164      	movs	r1, #100	@ 0x64
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	3332      	adds	r3, #50	@ 0x32
 8003826:	4a08      	ldr	r2, [pc, #32]	@ (8003848 <UART_SetConfig+0x4e4>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	f003 020f 	and.w	r2, r3, #15
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4422      	add	r2, r4
 800383a:	609a      	str	r2, [r3, #8]
}
 800383c:	bf00      	nop
 800383e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003842:	46bd      	mov	sp, r7
 8003844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003848:	51eb851f 	.word	0x51eb851f

0800384c <_7SEG_GPIO_Init>:
 */

#include "7seg.h"

void _7SEG_GPIO_Init()
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	@ 0x28
 8003850:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	4b6b      	ldr	r3, [pc, #428]	@ (8003a04 <_7SEG_GPIO_Init+0x1b8>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385a:	4a6a      	ldr	r2, [pc, #424]	@ (8003a04 <_7SEG_GPIO_Init+0x1b8>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6313      	str	r3, [r2, #48]	@ 0x30
 8003862:	4b68      	ldr	r3, [pc, #416]	@ (8003a04 <_7SEG_GPIO_Init+0x1b8>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	4b64      	ldr	r3, [pc, #400]	@ (8003a04 <_7SEG_GPIO_Init+0x1b8>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003876:	4a63      	ldr	r2, [pc, #396]	@ (8003a04 <_7SEG_GPIO_Init+0x1b8>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	6313      	str	r3, [r2, #48]	@ 0x30
 800387e:	4b61      	ldr	r3, [pc, #388]	@ (8003a04 <_7SEG_GPIO_Init+0x1b8>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	4b5d      	ldr	r3, [pc, #372]	@ (8003a04 <_7SEG_GPIO_Init+0x1b8>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	4a5c      	ldr	r2, [pc, #368]	@ (8003a04 <_7SEG_GPIO_Init+0x1b8>)
 8003894:	f043 0308 	orr.w	r3, r3, #8
 8003898:	6313      	str	r3, [r2, #48]	@ 0x30
 800389a:	4b5a      	ldr	r3, [pc, #360]	@ (8003a04 <_7SEG_GPIO_Init+0x1b8>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]
 80038aa:	4b56      	ldr	r3, [pc, #344]	@ (8003a04 <_7SEG_GPIO_Init+0x1b8>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	4a55      	ldr	r2, [pc, #340]	@ (8003a04 <_7SEG_GPIO_Init+0x1b8>)
 80038b0:	f043 0310 	orr.w	r3, r3, #16
 80038b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038b6:	4b53      	ldr	r3, [pc, #332]	@ (8003a04 <_7SEG_GPIO_Init+0x1b8>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 80038c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80038c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038c8:	2301      	movs	r3, #1
 80038ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d0:	2300      	movs	r3, #0
 80038d2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	4619      	mov	r1, r3
 80038da:	484b      	ldr	r0, [pc, #300]	@ (8003a08 <_7SEG_GPIO_Init+0x1bc>)
 80038dc:	f7fd feb0 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 80038e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038e4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 80038e6:	f107 0314 	add.w	r3, r7, #20
 80038ea:	4619      	mov	r1, r3
 80038ec:	4847      	ldr	r0, [pc, #284]	@ (8003a0c <_7SEG_GPIO_Init+0x1c0>)
 80038ee:	f7fd fea7 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 80038f2:	2340      	movs	r3, #64	@ 0x40
 80038f4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 80038f6:	f107 0314 	add.w	r3, r7, #20
 80038fa:	4619      	mov	r1, r3
 80038fc:	4842      	ldr	r0, [pc, #264]	@ (8003a08 <_7SEG_GPIO_Init+0x1bc>)
 80038fe:	f7fd fe9f 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8003902:	2320      	movs	r3, #32
 8003904:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 8003906:	f107 0314 	add.w	r3, r7, #20
 800390a:	4619      	mov	r1, r3
 800390c:	483e      	ldr	r0, [pc, #248]	@ (8003a08 <_7SEG_GPIO_Init+0x1bc>)
 800390e:	f7fd fe97 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8003912:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003916:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	4619      	mov	r1, r3
 800391e:	483c      	ldr	r0, [pc, #240]	@ (8003a10 <_7SEG_GPIO_Init+0x1c4>)
 8003920:	f7fd fe8e 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8003924:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003928:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 800392a:	f107 0314 	add.w	r3, r7, #20
 800392e:	4619      	mov	r1, r3
 8003930:	4837      	ldr	r0, [pc, #220]	@ (8003a10 <_7SEG_GPIO_Init+0x1c4>)
 8003932:	f7fd fe85 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 8003936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800393a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	4619      	mov	r1, r3
 8003942:	4831      	ldr	r0, [pc, #196]	@ (8003a08 <_7SEG_GPIO_Init+0x1bc>)
 8003944:	f7fd fe7c 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 8003948:	2380      	movs	r3, #128	@ 0x80
 800394a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	4619      	mov	r1, r3
 8003952:	482d      	ldr	r0, [pc, #180]	@ (8003a08 <_7SEG_GPIO_Init+0x1bc>)
 8003954:	f7fd fe74 	bl	8001640 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 8003958:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800395c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 800395e:	f107 0314 	add.w	r3, r7, #20
 8003962:	4619      	mov	r1, r3
 8003964:	482b      	ldr	r0, [pc, #172]	@ (8003a14 <_7SEG_GPIO_Init+0x1c8>)
 8003966:	f7fd fe6b 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 800396a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800396e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8003970:	f107 0314 	add.w	r3, r7, #20
 8003974:	4619      	mov	r1, r3
 8003976:	4827      	ldr	r0, [pc, #156]	@ (8003a14 <_7SEG_GPIO_Init+0x1c8>)
 8003978:	f7fd fe62 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 800397c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003980:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8003982:	f107 0314 	add.w	r3, r7, #20
 8003986:	4619      	mov	r1, r3
 8003988:	4822      	ldr	r0, [pc, #136]	@ (8003a14 <_7SEG_GPIO_Init+0x1c8>)
 800398a:	f7fd fe59 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 800398e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003992:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 8003994:	f107 0314 	add.w	r3, r7, #20
 8003998:	4619      	mov	r1, r3
 800399a:	481e      	ldr	r0, [pc, #120]	@ (8003a14 <_7SEG_GPIO_Init+0x1c8>)
 800399c:	f7fd fe50 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 80039a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039a4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 80039a6:	f107 0314 	add.w	r3, r7, #20
 80039aa:	4619      	mov	r1, r3
 80039ac:	4819      	ldr	r0, [pc, #100]	@ (8003a14 <_7SEG_GPIO_Init+0x1c8>)
 80039ae:	f7fd fe47 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 80039b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039b6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 80039b8:	f107 0314 	add.w	r3, r7, #20
 80039bc:	4619      	mov	r1, r3
 80039be:	4815      	ldr	r0, [pc, #84]	@ (8003a14 <_7SEG_GPIO_Init+0x1c8>)
 80039c0:	f7fd fe3e 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 80039c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039c8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 80039ca:	f107 0314 	add.w	r3, r7, #20
 80039ce:	4619      	mov	r1, r3
 80039d0:	4810      	ldr	r0, [pc, #64]	@ (8003a14 <_7SEG_GPIO_Init+0x1c8>)
 80039d2:	f7fd fe35 	bl	8001640 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 80039d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 80039dc:	f107 0314 	add.w	r3, r7, #20
 80039e0:	4619      	mov	r1, r3
 80039e2:	480c      	ldr	r0, [pc, #48]	@ (8003a14 <_7SEG_GPIO_Init+0x1c8>)
 80039e4:	f7fd fe2c 	bl	8001640 <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 80039e8:	2201      	movs	r2, #1
 80039ea:	2100      	movs	r1, #0
 80039ec:	2000      	movs	r0, #0
 80039ee:	f000 f813 	bl	8003a18 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 80039f2:	2201      	movs	r2, #1
 80039f4:	2100      	movs	r1, #0
 80039f6:	2001      	movs	r0, #1
 80039f8:	f000 f80e 	bl	8003a18 <_7SEG_SetNumber>
}
 80039fc:	bf00      	nop
 80039fe:	3728      	adds	r7, #40	@ 0x28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40020c00 	.word	0x40020c00
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	40020800 	.word	0x40020800
 8003a14:	40021000 	.word	0x40021000

08003a18 <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f040 81dc 	bne.w	8003de4 <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	4bcb      	ldr	r3, [pc, #812]	@ (8003d5c <_7SEG_SetNumber+0x344>)
 8003a30:	fb83 2301 	smull	r2, r3, r3, r1
 8003a34:	109a      	asrs	r2, r3, #2
 8003a36:	17cb      	asrs	r3, r1, #31
 8003a38:	1ad2      	subs	r2, r2, r3
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	1aca      	subs	r2, r1, r3
 8003a44:	2a09      	cmp	r2, #9
 8003a46:	f200 81ba 	bhi.w	8003dbe <_7SEG_SetNumber+0x3a6>
 8003a4a:	a301      	add	r3, pc, #4	@ (adr r3, 8003a50 <_7SEG_SetNumber+0x38>)
 8003a4c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003a50:	08003a79 	.word	0x08003a79
 8003a54:	08003acb 	.word	0x08003acb
 8003a58:	08003b1d 	.word	0x08003b1d
 8003a5c:	08003b6f 	.word	0x08003b6f
 8003a60:	08003bc1 	.word	0x08003bc1
 8003a64:	08003c13 	.word	0x08003c13
 8003a68:	08003c65 	.word	0x08003c65
 8003a6c:	08003cb7 	.word	0x08003cb7
 8003a70:	08003d09 	.word	0x08003d09
 8003a74:	08003d6d 	.word	0x08003d6d
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003a7e:	48b8      	ldr	r0, [pc, #736]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003a80:	f7fd ff92 	bl	80019a8 <HAL_GPIO_WritePin>
 8003a84:	2200      	movs	r2, #0
 8003a86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a8a:	48b6      	ldr	r0, [pc, #728]	@ (8003d64 <_7SEG_SetNumber+0x34c>)
 8003a8c:	f7fd ff8c 	bl	80019a8 <HAL_GPIO_WritePin>
 8003a90:	2200      	movs	r2, #0
 8003a92:	2140      	movs	r1, #64	@ 0x40
 8003a94:	48b2      	ldr	r0, [pc, #712]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003a96:	f7fd ff87 	bl	80019a8 <HAL_GPIO_WritePin>
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2120      	movs	r1, #32
 8003a9e:	48b0      	ldr	r0, [pc, #704]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003aa0:	f7fd ff82 	bl	80019a8 <HAL_GPIO_WritePin>
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003aaa:	48af      	ldr	r0, [pc, #700]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003aac:	f7fd ff7c 	bl	80019a8 <HAL_GPIO_WritePin>
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ab6:	48ac      	ldr	r0, [pc, #688]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003ab8:	f7fd ff76 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 8003abc:	2201      	movs	r2, #1
 8003abe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ac2:	48a7      	ldr	r0, [pc, #668]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003ac4:	f7fd ff70 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003ac8:	e179      	b.n	8003dbe <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 8003aca:	2200      	movs	r2, #0
 8003acc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ad0:	48a4      	ldr	r0, [pc, #656]	@ (8003d64 <_7SEG_SetNumber+0x34c>)
 8003ad2:	f7fd ff69 	bl	80019a8 <HAL_GPIO_WritePin>
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2140      	movs	r1, #64	@ 0x40
 8003ada:	48a1      	ldr	r0, [pc, #644]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003adc:	f7fd ff64 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003ae6:	489e      	ldr	r0, [pc, #632]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003ae8:	f7fd ff5e 	bl	80019a8 <HAL_GPIO_WritePin>
 8003aec:	2201      	movs	r2, #1
 8003aee:	2120      	movs	r1, #32
 8003af0:	489b      	ldr	r0, [pc, #620]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003af2:	f7fd ff59 	bl	80019a8 <HAL_GPIO_WritePin>
 8003af6:	2201      	movs	r2, #1
 8003af8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003afc:	489a      	ldr	r0, [pc, #616]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003afe:	f7fd ff53 	bl	80019a8 <HAL_GPIO_WritePin>
 8003b02:	2201      	movs	r2, #1
 8003b04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b08:	4897      	ldr	r0, [pc, #604]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003b0a:	f7fd ff4d 	bl	80019a8 <HAL_GPIO_WritePin>
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b14:	4892      	ldr	r0, [pc, #584]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003b16:	f7fd ff47 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003b1a:	e150      	b.n	8003dbe <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b22:	488f      	ldr	r0, [pc, #572]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003b24:	f7fd ff40 	bl	80019a8 <HAL_GPIO_WritePin>
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b2e:	488d      	ldr	r0, [pc, #564]	@ (8003d64 <_7SEG_SetNumber+0x34c>)
 8003b30:	f7fd ff3a 	bl	80019a8 <HAL_GPIO_WritePin>
 8003b34:	2200      	movs	r2, #0
 8003b36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b3a:	4889      	ldr	r0, [pc, #548]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003b3c:	f7fd ff34 	bl	80019a8 <HAL_GPIO_WritePin>
 8003b40:	2200      	movs	r2, #0
 8003b42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b46:	4888      	ldr	r0, [pc, #544]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003b48:	f7fd ff2e 	bl	80019a8 <HAL_GPIO_WritePin>
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2120      	movs	r1, #32
 8003b50:	4883      	ldr	r0, [pc, #524]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003b52:	f7fd ff29 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 8003b56:	2201      	movs	r2, #1
 8003b58:	2140      	movs	r1, #64	@ 0x40
 8003b5a:	4881      	ldr	r0, [pc, #516]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003b5c:	f7fd ff24 	bl	80019a8 <HAL_GPIO_WritePin>
 8003b60:	2201      	movs	r2, #1
 8003b62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b66:	4880      	ldr	r0, [pc, #512]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003b68:	f7fd ff1e 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003b6c:	e127      	b.n	8003dbe <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b74:	487a      	ldr	r0, [pc, #488]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003b76:	f7fd ff17 	bl	80019a8 <HAL_GPIO_WritePin>
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b80:	4878      	ldr	r0, [pc, #480]	@ (8003d64 <_7SEG_SetNumber+0x34c>)
 8003b82:	f7fd ff11 	bl	80019a8 <HAL_GPIO_WritePin>
 8003b86:	2200      	movs	r2, #0
 8003b88:	2140      	movs	r1, #64	@ 0x40
 8003b8a:	4875      	ldr	r0, [pc, #468]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003b8c:	f7fd ff0c 	bl	80019a8 <HAL_GPIO_WritePin>
 8003b90:	2200      	movs	r2, #0
 8003b92:	2120      	movs	r1, #32
 8003b94:	4872      	ldr	r0, [pc, #456]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003b96:	f7fd ff07 	bl	80019a8 <HAL_GPIO_WritePin>
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ba0:	486f      	ldr	r0, [pc, #444]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003ba2:	f7fd ff01 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003bac:	486e      	ldr	r0, [pc, #440]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003bae:	f7fd fefb 	bl	80019a8 <HAL_GPIO_WritePin>
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bb8:	486b      	ldr	r0, [pc, #428]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003bba:	f7fd fef5 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003bbe:	e0fe      	b.n	8003dbe <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bc6:	4868      	ldr	r0, [pc, #416]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003bc8:	f7fd feee 	bl	80019a8 <HAL_GPIO_WritePin>
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bd2:	4863      	ldr	r0, [pc, #396]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003bd4:	f7fd fee8 	bl	80019a8 <HAL_GPIO_WritePin>
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bde:	4861      	ldr	r0, [pc, #388]	@ (8003d64 <_7SEG_SetNumber+0x34c>)
 8003be0:	f7fd fee2 	bl	80019a8 <HAL_GPIO_WritePin>
 8003be4:	2200      	movs	r2, #0
 8003be6:	2140      	movs	r1, #64	@ 0x40
 8003be8:	485d      	ldr	r0, [pc, #372]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003bea:	f7fd fedd 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003bf4:	485a      	ldr	r0, [pc, #360]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003bf6:	f7fd fed7 	bl	80019a8 <HAL_GPIO_WritePin>
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2120      	movs	r1, #32
 8003bfe:	4858      	ldr	r0, [pc, #352]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003c00:	f7fd fed2 	bl	80019a8 <HAL_GPIO_WritePin>
 8003c04:	2201      	movs	r2, #1
 8003c06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c0a:	4857      	ldr	r0, [pc, #348]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003c0c:	f7fd fecc 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003c10:	e0d5      	b.n	8003dbe <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 8003c12:	2200      	movs	r2, #0
 8003c14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003c18:	4851      	ldr	r0, [pc, #324]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003c1a:	f7fd fec5 	bl	80019a8 <HAL_GPIO_WritePin>
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c24:	4850      	ldr	r0, [pc, #320]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003c26:	f7fd febf 	bl	80019a8 <HAL_GPIO_WritePin>
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c30:	484b      	ldr	r0, [pc, #300]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003c32:	f7fd feb9 	bl	80019a8 <HAL_GPIO_WritePin>
 8003c36:	2200      	movs	r2, #0
 8003c38:	2140      	movs	r1, #64	@ 0x40
 8003c3a:	4849      	ldr	r0, [pc, #292]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003c3c:	f7fd feb4 	bl	80019a8 <HAL_GPIO_WritePin>
 8003c40:	2200      	movs	r2, #0
 8003c42:	2120      	movs	r1, #32
 8003c44:	4846      	ldr	r0, [pc, #280]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003c46:	f7fd feaf 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c50:	4844      	ldr	r0, [pc, #272]	@ (8003d64 <_7SEG_SetNumber+0x34c>)
 8003c52:	f7fd fea9 	bl	80019a8 <HAL_GPIO_WritePin>
 8003c56:	2201      	movs	r2, #1
 8003c58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c5c:	4842      	ldr	r0, [pc, #264]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003c5e:	f7fd fea3 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003c62:	e0ac      	b.n	8003dbe <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8003c64:	2200      	movs	r2, #0
 8003c66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003c6a:	483d      	ldr	r0, [pc, #244]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003c6c:	f7fd fe9c 	bl	80019a8 <HAL_GPIO_WritePin>
 8003c70:	2200      	movs	r2, #0
 8003c72:	2140      	movs	r1, #64	@ 0x40
 8003c74:	483a      	ldr	r0, [pc, #232]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003c76:	f7fd fe97 	bl	80019a8 <HAL_GPIO_WritePin>
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2120      	movs	r1, #32
 8003c7e:	4838      	ldr	r0, [pc, #224]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003c80:	f7fd fe92 	bl	80019a8 <HAL_GPIO_WritePin>
 8003c84:	2200      	movs	r2, #0
 8003c86:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c8a:	4837      	ldr	r0, [pc, #220]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003c8c:	f7fd fe8c 	bl	80019a8 <HAL_GPIO_WritePin>
 8003c90:	2200      	movs	r2, #0
 8003c92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c96:	4834      	ldr	r0, [pc, #208]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003c98:	f7fd fe86 	bl	80019a8 <HAL_GPIO_WritePin>
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ca2:	482f      	ldr	r0, [pc, #188]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003ca4:	f7fd fe80 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cae:	482d      	ldr	r0, [pc, #180]	@ (8003d64 <_7SEG_SetNumber+0x34c>)
 8003cb0:	f7fd fe7a 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003cb4:	e083      	b.n	8003dbe <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003cbc:	482a      	ldr	r0, [pc, #168]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003cbe:	f7fd fe73 	bl	80019a8 <HAL_GPIO_WritePin>
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003cc8:	4825      	ldr	r0, [pc, #148]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003cca:	f7fd fe6d 	bl	80019a8 <HAL_GPIO_WritePin>
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cd4:	4823      	ldr	r0, [pc, #140]	@ (8003d64 <_7SEG_SetNumber+0x34c>)
 8003cd6:	f7fd fe67 	bl	80019a8 <HAL_GPIO_WritePin>
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2140      	movs	r1, #64	@ 0x40
 8003cde:	4820      	ldr	r0, [pc, #128]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003ce0:	f7fd fe62 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	2120      	movs	r1, #32
 8003ce8:	481d      	ldr	r0, [pc, #116]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003cea:	f7fd fe5d 	bl	80019a8 <HAL_GPIO_WritePin>
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003cf4:	481c      	ldr	r0, [pc, #112]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003cf6:	f7fd fe57 	bl	80019a8 <HAL_GPIO_WritePin>
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d00:	4817      	ldr	r0, [pc, #92]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003d02:	f7fd fe51 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003d06:	e05a      	b.n	8003dbe <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003d0e:	4814      	ldr	r0, [pc, #80]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003d10:	f7fd fe4a 	bl	80019a8 <HAL_GPIO_WritePin>
 8003d14:	2200      	movs	r2, #0
 8003d16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d1a:	4812      	ldr	r0, [pc, #72]	@ (8003d64 <_7SEG_SetNumber+0x34c>)
 8003d1c:	f7fd fe44 	bl	80019a8 <HAL_GPIO_WritePin>
 8003d20:	2200      	movs	r2, #0
 8003d22:	2140      	movs	r1, #64	@ 0x40
 8003d24:	480e      	ldr	r0, [pc, #56]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003d26:	f7fd fe3f 	bl	80019a8 <HAL_GPIO_WritePin>
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2120      	movs	r1, #32
 8003d2e:	480c      	ldr	r0, [pc, #48]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003d30:	f7fd fe3a 	bl	80019a8 <HAL_GPIO_WritePin>
 8003d34:	2200      	movs	r2, #0
 8003d36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003d3a:	480b      	ldr	r0, [pc, #44]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003d3c:	f7fd fe34 	bl	80019a8 <HAL_GPIO_WritePin>
 8003d40:	2200      	movs	r2, #0
 8003d42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d46:	4808      	ldr	r0, [pc, #32]	@ (8003d68 <_7SEG_SetNumber+0x350>)
 8003d48:	f7fd fe2e 	bl	80019a8 <HAL_GPIO_WritePin>
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d52:	4803      	ldr	r0, [pc, #12]	@ (8003d60 <_7SEG_SetNumber+0x348>)
 8003d54:	f7fd fe28 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003d58:	e031      	b.n	8003dbe <_7SEG_SetNumber+0x3a6>
 8003d5a:	bf00      	nop
 8003d5c:	66666667 	.word	0x66666667
 8003d60:	40020c00 	.word	0x40020c00
 8003d64:	40020000 	.word	0x40020000
 8003d68:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003d72:	48c8      	ldr	r0, [pc, #800]	@ (8004094 <_7SEG_SetNumber+0x67c>)
 8003d74:	f7fd fe18 	bl	80019a8 <HAL_GPIO_WritePin>
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d7e:	48c6      	ldr	r0, [pc, #792]	@ (8004098 <_7SEG_SetNumber+0x680>)
 8003d80:	f7fd fe12 	bl	80019a8 <HAL_GPIO_WritePin>
 8003d84:	2200      	movs	r2, #0
 8003d86:	2140      	movs	r1, #64	@ 0x40
 8003d88:	48c2      	ldr	r0, [pc, #776]	@ (8004094 <_7SEG_SetNumber+0x67c>)
 8003d8a:	f7fd fe0d 	bl	80019a8 <HAL_GPIO_WritePin>
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2120      	movs	r1, #32
 8003d92:	48c0      	ldr	r0, [pc, #768]	@ (8004094 <_7SEG_SetNumber+0x67c>)
 8003d94:	f7fd fe08 	bl	80019a8 <HAL_GPIO_WritePin>
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d9e:	48bf      	ldr	r0, [pc, #764]	@ (800409c <_7SEG_SetNumber+0x684>)
 8003da0:	f7fd fe02 	bl	80019a8 <HAL_GPIO_WritePin>
 8003da4:	2200      	movs	r2, #0
 8003da6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003daa:	48ba      	ldr	r0, [pc, #744]	@ (8004094 <_7SEG_SetNumber+0x67c>)
 8003dac:	f7fd fdfc 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8003db0:	2201      	movs	r2, #1
 8003db2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003db6:	48b9      	ldr	r0, [pc, #740]	@ (800409c <_7SEG_SetNumber+0x684>)
 8003db8:	f7fd fdf6 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003dbc:	bf00      	nop
		}

		if(dp == ON)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2180      	movs	r1, #128	@ 0x80
 8003dc8:	48b2      	ldr	r0, [pc, #712]	@ (8004094 <_7SEG_SetNumber+0x67c>)
 8003dca:	f7fd fded 	bl	80019a8 <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8003dce:	e1ff      	b.n	80041d0 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f040 81fc 	bne.w	80041d0 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8003dd8:	2201      	movs	r2, #1
 8003dda:	2180      	movs	r1, #128	@ 0x80
 8003ddc:	48ad      	ldr	r0, [pc, #692]	@ (8004094 <_7SEG_SetNumber+0x67c>)
 8003dde:	f7fd fde3 	bl	80019a8 <HAL_GPIO_WritePin>
}
 8003de2:	e1f5      	b.n	80041d0 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	f040 81f2 	bne.w	80041d0 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	4bac      	ldr	r3, [pc, #688]	@ (80040a0 <_7SEG_SetNumber+0x688>)
 8003df0:	fb83 2301 	smull	r2, r3, r3, r1
 8003df4:	109a      	asrs	r2, r3, #2
 8003df6:	17cb      	asrs	r3, r1, #31
 8003df8:	1ad2      	subs	r2, r2, r3
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	1aca      	subs	r2, r1, r3
 8003e04:	2a09      	cmp	r2, #9
 8003e06:	f200 81d0 	bhi.w	80041aa <_7SEG_SetNumber+0x792>
 8003e0a:	a301      	add	r3, pc, #4	@ (adr r3, 8003e10 <_7SEG_SetNumber+0x3f8>)
 8003e0c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e8f 	.word	0x08003e8f
 8003e18:	08003ee5 	.word	0x08003ee5
 8003e1c:	08003f3b 	.word	0x08003f3b
 8003e20:	08003f91 	.word	0x08003f91
 8003e24:	08003fe7 	.word	0x08003fe7
 8003e28:	0800403d 	.word	0x0800403d
 8003e2c:	080040a9 	.word	0x080040a9
 8003e30:	080040ff 	.word	0x080040ff
 8003e34:	08004155 	.word	0x08004155
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e3e:	4899      	ldr	r0, [pc, #612]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003e40:	f7fd fdb2 	bl	80019a8 <HAL_GPIO_WritePin>
 8003e44:	2200      	movs	r2, #0
 8003e46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003e4a:	4896      	ldr	r0, [pc, #600]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003e4c:	f7fd fdac 	bl	80019a8 <HAL_GPIO_WritePin>
 8003e50:	2200      	movs	r2, #0
 8003e52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e56:	4893      	ldr	r0, [pc, #588]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003e58:	f7fd fda6 	bl	80019a8 <HAL_GPIO_WritePin>
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e62:	4890      	ldr	r0, [pc, #576]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003e64:	f7fd fda0 	bl	80019a8 <HAL_GPIO_WritePin>
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e6e:	488d      	ldr	r0, [pc, #564]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003e70:	f7fd fd9a 	bl	80019a8 <HAL_GPIO_WritePin>
 8003e74:	2200      	movs	r2, #0
 8003e76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e7a:	488a      	ldr	r0, [pc, #552]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003e7c:	f7fd fd94 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8003e80:	2201      	movs	r2, #1
 8003e82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e86:	4887      	ldr	r0, [pc, #540]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003e88:	f7fd fd8e 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003e8c:	e18d      	b.n	80041aa <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003e94:	4883      	ldr	r0, [pc, #524]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003e96:	f7fd fd87 	bl	80019a8 <HAL_GPIO_WritePin>
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ea0:	4880      	ldr	r0, [pc, #512]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003ea2:	f7fd fd81 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003eac:	487d      	ldr	r0, [pc, #500]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003eae:	f7fd fd7b 	bl	80019a8 <HAL_GPIO_WritePin>
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003eb8:	487a      	ldr	r0, [pc, #488]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003eba:	f7fd fd75 	bl	80019a8 <HAL_GPIO_WritePin>
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ec4:	4877      	ldr	r0, [pc, #476]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003ec6:	f7fd fd6f 	bl	80019a8 <HAL_GPIO_WritePin>
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ed0:	4874      	ldr	r0, [pc, #464]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003ed2:	f7fd fd69 	bl	80019a8 <HAL_GPIO_WritePin>
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003edc:	4871      	ldr	r0, [pc, #452]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003ede:	f7fd fd63 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003ee2:	e162      	b.n	80041aa <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003eea:	486e      	ldr	r0, [pc, #440]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003eec:	f7fd fd5c 	bl	80019a8 <HAL_GPIO_WritePin>
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ef6:	486b      	ldr	r0, [pc, #428]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003ef8:	f7fd fd56 	bl	80019a8 <HAL_GPIO_WritePin>
 8003efc:	2200      	movs	r2, #0
 8003efe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f02:	4868      	ldr	r0, [pc, #416]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f04:	f7fd fd50 	bl	80019a8 <HAL_GPIO_WritePin>
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f0e:	4865      	ldr	r0, [pc, #404]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f10:	f7fd fd4a 	bl	80019a8 <HAL_GPIO_WritePin>
 8003f14:	2200      	movs	r2, #0
 8003f16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003f1a:	4862      	ldr	r0, [pc, #392]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f1c:	f7fd fd44 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8003f20:	2201      	movs	r2, #1
 8003f22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f26:	485f      	ldr	r0, [pc, #380]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f28:	f7fd fd3e 	bl	80019a8 <HAL_GPIO_WritePin>
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f32:	485c      	ldr	r0, [pc, #368]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f34:	f7fd fd38 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003f38:	e137      	b.n	80041aa <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f40:	4858      	ldr	r0, [pc, #352]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f42:	f7fd fd31 	bl	80019a8 <HAL_GPIO_WritePin>
 8003f46:	2200      	movs	r2, #0
 8003f48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f4c:	4855      	ldr	r0, [pc, #340]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f4e:	f7fd fd2b 	bl	80019a8 <HAL_GPIO_WritePin>
 8003f52:	2200      	movs	r2, #0
 8003f54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f58:	4852      	ldr	r0, [pc, #328]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f5a:	f7fd fd25 	bl	80019a8 <HAL_GPIO_WritePin>
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003f64:	484f      	ldr	r0, [pc, #316]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f66:	f7fd fd1f 	bl	80019a8 <HAL_GPIO_WritePin>
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f70:	484c      	ldr	r0, [pc, #304]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f72:	f7fd fd19 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8003f76:	2201      	movs	r2, #1
 8003f78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f7c:	4849      	ldr	r0, [pc, #292]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f7e:	f7fd fd13 	bl	80019a8 <HAL_GPIO_WritePin>
 8003f82:	2201      	movs	r2, #1
 8003f84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f88:	4846      	ldr	r0, [pc, #280]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f8a:	f7fd fd0d 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003f8e:	e10c      	b.n	80041aa <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8003f90:	2200      	movs	r2, #0
 8003f92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f96:	4843      	ldr	r0, [pc, #268]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003f98:	f7fd fd06 	bl	80019a8 <HAL_GPIO_WritePin>
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003fa2:	4840      	ldr	r0, [pc, #256]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003fa4:	f7fd fd00 	bl	80019a8 <HAL_GPIO_WritePin>
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003fae:	483d      	ldr	r0, [pc, #244]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003fb0:	f7fd fcfa 	bl	80019a8 <HAL_GPIO_WritePin>
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fba:	483a      	ldr	r0, [pc, #232]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003fbc:	f7fd fcf4 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003fc6:	4837      	ldr	r0, [pc, #220]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003fc8:	f7fd fcee 	bl	80019a8 <HAL_GPIO_WritePin>
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003fd2:	4834      	ldr	r0, [pc, #208]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003fd4:	f7fd fce8 	bl	80019a8 <HAL_GPIO_WritePin>
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fde:	4831      	ldr	r0, [pc, #196]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003fe0:	f7fd fce2 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8003fe4:	e0e1      	b.n	80041aa <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003fec:	482d      	ldr	r0, [pc, #180]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003fee:	f7fd fcdb 	bl	80019a8 <HAL_GPIO_WritePin>
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ff8:	482a      	ldr	r0, [pc, #168]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8003ffa:	f7fd fcd5 	bl	80019a8 <HAL_GPIO_WritePin>
 8003ffe:	2200      	movs	r2, #0
 8004000:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004004:	4827      	ldr	r0, [pc, #156]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8004006:	f7fd fccf 	bl	80019a8 <HAL_GPIO_WritePin>
 800400a:	2200      	movs	r2, #0
 800400c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004010:	4824      	ldr	r0, [pc, #144]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8004012:	f7fd fcc9 	bl	80019a8 <HAL_GPIO_WritePin>
 8004016:	2200      	movs	r2, #0
 8004018:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800401c:	4821      	ldr	r0, [pc, #132]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 800401e:	f7fd fcc3 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8004022:	2201      	movs	r2, #1
 8004024:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004028:	481e      	ldr	r0, [pc, #120]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 800402a:	f7fd fcbd 	bl	80019a8 <HAL_GPIO_WritePin>
 800402e:	2201      	movs	r2, #1
 8004030:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004034:	481b      	ldr	r0, [pc, #108]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8004036:	f7fd fcb7 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 800403a:	e0b6      	b.n	80041aa <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 800403c:	2200      	movs	r2, #0
 800403e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004042:	4818      	ldr	r0, [pc, #96]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8004044:	f7fd fcb0 	bl	80019a8 <HAL_GPIO_WritePin>
 8004048:	2200      	movs	r2, #0
 800404a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800404e:	4815      	ldr	r0, [pc, #84]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8004050:	f7fd fcaa 	bl	80019a8 <HAL_GPIO_WritePin>
 8004054:	2200      	movs	r2, #0
 8004056:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800405a:	4812      	ldr	r0, [pc, #72]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 800405c:	f7fd fca4 	bl	80019a8 <HAL_GPIO_WritePin>
 8004060:	2200      	movs	r2, #0
 8004062:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004066:	480f      	ldr	r0, [pc, #60]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8004068:	f7fd fc9e 	bl	80019a8 <HAL_GPIO_WritePin>
 800406c:	2200      	movs	r2, #0
 800406e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004072:	480c      	ldr	r0, [pc, #48]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8004074:	f7fd fc98 	bl	80019a8 <HAL_GPIO_WritePin>
 8004078:	2200      	movs	r2, #0
 800407a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800407e:	4809      	ldr	r0, [pc, #36]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 8004080:	f7fd fc92 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8004084:	2201      	movs	r2, #1
 8004086:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800408a:	4806      	ldr	r0, [pc, #24]	@ (80040a4 <_7SEG_SetNumber+0x68c>)
 800408c:	f7fd fc8c 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8004090:	e08b      	b.n	80041aa <_7SEG_SetNumber+0x792>
 8004092:	bf00      	nop
 8004094:	40020c00 	.word	0x40020c00
 8004098:	40020000 	.word	0x40020000
 800409c:	40020800 	.word	0x40020800
 80040a0:	66666667 	.word	0x66666667
 80040a4:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 80040a8:	2200      	movs	r2, #0
 80040aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040ae:	484a      	ldr	r0, [pc, #296]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 80040b0:	f7fd fc7a 	bl	80019a8 <HAL_GPIO_WritePin>
 80040b4:	2200      	movs	r2, #0
 80040b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80040ba:	4847      	ldr	r0, [pc, #284]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 80040bc:	f7fd fc74 	bl	80019a8 <HAL_GPIO_WritePin>
 80040c0:	2200      	movs	r2, #0
 80040c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040c6:	4844      	ldr	r0, [pc, #272]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 80040c8:	f7fd fc6e 	bl	80019a8 <HAL_GPIO_WritePin>
 80040cc:	2200      	movs	r2, #0
 80040ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040d2:	4841      	ldr	r0, [pc, #260]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 80040d4:	f7fd fc68 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 80040d8:	2201      	movs	r2, #1
 80040da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80040de:	483e      	ldr	r0, [pc, #248]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 80040e0:	f7fd fc62 	bl	80019a8 <HAL_GPIO_WritePin>
 80040e4:	2201      	movs	r2, #1
 80040e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040ea:	483b      	ldr	r0, [pc, #236]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 80040ec:	f7fd fc5c 	bl	80019a8 <HAL_GPIO_WritePin>
 80040f0:	2201      	movs	r2, #1
 80040f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80040f6:	4838      	ldr	r0, [pc, #224]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 80040f8:	f7fd fc56 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 80040fc:	e055      	b.n	80041aa <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 80040fe:	2200      	movs	r2, #0
 8004100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004104:	4834      	ldr	r0, [pc, #208]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 8004106:	f7fd fc4f 	bl	80019a8 <HAL_GPIO_WritePin>
 800410a:	2200      	movs	r2, #0
 800410c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004110:	4831      	ldr	r0, [pc, #196]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 8004112:	f7fd fc49 	bl	80019a8 <HAL_GPIO_WritePin>
 8004116:	2200      	movs	r2, #0
 8004118:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800411c:	482e      	ldr	r0, [pc, #184]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 800411e:	f7fd fc43 	bl	80019a8 <HAL_GPIO_WritePin>
 8004122:	2200      	movs	r2, #0
 8004124:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004128:	482b      	ldr	r0, [pc, #172]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 800412a:	f7fd fc3d 	bl	80019a8 <HAL_GPIO_WritePin>
 800412e:	2200      	movs	r2, #0
 8004130:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004134:	4828      	ldr	r0, [pc, #160]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 8004136:	f7fd fc37 	bl	80019a8 <HAL_GPIO_WritePin>
 800413a:	2200      	movs	r2, #0
 800413c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004140:	4825      	ldr	r0, [pc, #148]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 8004142:	f7fd fc31 	bl	80019a8 <HAL_GPIO_WritePin>
 8004146:	2200      	movs	r2, #0
 8004148:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800414c:	4822      	ldr	r0, [pc, #136]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 800414e:	f7fd fc2b 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 8004152:	e02a      	b.n	80041aa <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8004154:	2200      	movs	r2, #0
 8004156:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800415a:	481f      	ldr	r0, [pc, #124]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 800415c:	f7fd fc24 	bl	80019a8 <HAL_GPIO_WritePin>
 8004160:	2200      	movs	r2, #0
 8004162:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004166:	481c      	ldr	r0, [pc, #112]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 8004168:	f7fd fc1e 	bl	80019a8 <HAL_GPIO_WritePin>
 800416c:	2200      	movs	r2, #0
 800416e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004172:	4819      	ldr	r0, [pc, #100]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 8004174:	f7fd fc18 	bl	80019a8 <HAL_GPIO_WritePin>
 8004178:	2200      	movs	r2, #0
 800417a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800417e:	4816      	ldr	r0, [pc, #88]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 8004180:	f7fd fc12 	bl	80019a8 <HAL_GPIO_WritePin>
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800418a:	4813      	ldr	r0, [pc, #76]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 800418c:	f7fd fc0c 	bl	80019a8 <HAL_GPIO_WritePin>
 8004190:	2200      	movs	r2, #0
 8004192:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004196:	4810      	ldr	r0, [pc, #64]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 8004198:	f7fd fc06 	bl	80019a8 <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 800419c:	2201      	movs	r2, #1
 800419e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041a2:	480d      	ldr	r0, [pc, #52]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 80041a4:	f7fd fc00 	bl	80019a8 <HAL_GPIO_WritePin>
				break;
 80041a8:	bf00      	nop
		if(dp == ON)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d106      	bne.n	80041be <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 80041b0:	2200      	movs	r2, #0
 80041b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80041b6:	4808      	ldr	r0, [pc, #32]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 80041b8:	f7fd fbf6 	bl	80019a8 <HAL_GPIO_WritePin>
}
 80041bc:	e008      	b.n	80041d0 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 80041c4:	2201      	movs	r2, #1
 80041c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80041ca:	4803      	ldr	r0, [pc, #12]	@ (80041d8 <_7SEG_SetNumber+0x7c0>)
 80041cc:	f7fd fbec 	bl	80019a8 <HAL_GPIO_WritePin>
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40021000 	.word	0x40021000

080041dc <update>:


#include "button.h"

static void update(Button* this)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(this->GPIOx, this->GPIO_Pin) == GPIO_PIN_SET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	889b      	ldrh	r3, [r3, #4]
 80041ec:	4619      	mov	r1, r3
 80041ee:	4610      	mov	r0, r2
 80041f0:	f7fd fbc2 	bl	8001978 <HAL_GPIO_ReadPin>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d10a      	bne.n	8004210 <update+0x34>
	{
		if (this->_is_pressed == false) this->_is_pressed = true;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	799b      	ldrb	r3, [r3, #6]
 80041fe:	f083 0301 	eor.w	r3, r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <update+0x42>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		if (this->_is_pressed == true) this->_is_pressed = false;
	}
}
 800420e:	e006      	b.n	800421e <update+0x42>
		if (this->_is_pressed == true) this->_is_pressed = false;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	799b      	ldrb	r3, [r3, #6]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <update+0x42>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	719a      	strb	r2, [r3, #6]
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <is_pressed>:

static bool is_pressed(Button* this)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
	return this->_is_pressed;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	799b      	ldrb	r3, [r3, #6]
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <get_button_1>:
static Button button_2 = { BUTTON_2_GPIO_Port, BUTTON_2_Pin, false, update, is_pressed };
static Button button_3 = { BUTTON_3_GPIO_Port, BUTTON_3_Pin, false, update, is_pressed };
static Button button_4 = { BUTTON_4_GPIO_Port, BUTTON_4_Pin, false, update, is_pressed };

Button* get_button_1(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
	return &button_1;
 8004244:	4b02      	ldr	r3, [pc, #8]	@ (8004250 <get_button_1+0x10>)
}
 8004246:	4618      	mov	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	2000000c 	.word	0x2000000c

08004254 <get_button_2>:

Button* get_button_2(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
	return &button_2;
 8004258:	4b02      	ldr	r3, [pc, #8]	@ (8004264 <get_button_2+0x10>)
}
 800425a:	4618      	mov	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	2000001c 	.word	0x2000001c

08004268 <get_button_3>:

Button* get_button_3(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
	return &button_3;
 800426c:	4b02      	ldr	r3, [pc, #8]	@ (8004278 <get_button_3+0x10>)
}
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	2000002c 	.word	0x2000002c

0800427c <get_button_4>:

Button* get_button_4(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
	return &button_4;
 8004280:	4b02      	ldr	r3, [pc, #8]	@ (800428c <get_button_4+0x10>)
}
 8004282:	4618      	mov	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	2000003c 	.word	0x2000003c

08004290 <stop>:
static void display_time(char* head, Line line, State state, Time* time);

Lcd lcd = { .operate = stop };

static void stop(Lcd* this)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	Timer* timer = GET_INSTANCE(timer);
 8004298:	f000 fd74 	bl	8004d84 <get_timer>
 800429c:	60f8      	str	r0, [r7, #12]
	Button* button_2 = GET_INSTANCE(button_2);
 800429e:	f7ff ffd9 	bl	8004254 <get_button_2>
 80042a2:	60b8      	str	r0, [r7, #8]
	static bool previous_button = false;

	timer->set_count(timer, 0);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2100      	movs	r1, #0
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	4798      	blx	r3

	display_time("STW", TOP_LINE, STOP, timer->time);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	2100      	movs	r1, #0
 80042b6:	4811      	ldr	r0, [pc, #68]	@ (80042fc <stop+0x6c>)
 80042b8:	f000 f936 	bl	8004528 <display_time>

	if (previous_button == false && button_2->is_pressed(button_2) == true)
 80042bc:	4b10      	ldr	r3, [pc, #64]	@ (8004300 <stop+0x70>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	f083 0301 	eor.w	r3, r3, #1
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <stop+0x52>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	68b8      	ldr	r0, [r7, #8]
 80042d0:	4798      	blx	r3
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d004      	beq.n	80042e2 <stop+0x52>
	{
		CLCD_Clear();
 80042d8:	f7fc ff6d 	bl	80011b6 <CLCD_Clear>
		this->operate = run;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a09      	ldr	r2, [pc, #36]	@ (8004304 <stop+0x74>)
 80042e0:	601a      	str	r2, [r3, #0]
	}

	previous_button = button_2->is_pressed(button_2);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68b8      	ldr	r0, [r7, #8]
 80042e8:	4798      	blx	r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	461a      	mov	r2, r3
 80042ee:	4b04      	ldr	r3, [pc, #16]	@ (8004300 <stop+0x70>)
 80042f0:	701a      	strb	r2, [r3, #0]
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	08005770 	.word	0x08005770
 8004300:	200001cc 	.word	0x200001cc
 8004304:	08004309 	.word	0x08004309

08004308 <run>:

static void run(Lcd* this)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	@ 0x28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	Button* button_2 = GET_INSTANCE(button_2);
 8004310:	f7ff ffa0 	bl	8004254 <get_button_2>
 8004314:	6278      	str	r0, [r7, #36]	@ 0x24
	Button* button_3 = GET_INSTANCE(button_3);
 8004316:	f7ff ffa7 	bl	8004268 <get_button_3>
 800431a:	6238      	str	r0, [r7, #32]
	Button* button_4 = GET_INSTANCE(button_4);
 800431c:	f7ff ffae 	bl	800427c <get_button_4>
 8004320:	61f8      	str	r0, [r7, #28]
	static bool previous_button_2 = false;
	static bool previous_button_3 = false;
	static bool previous_button_4 = false;
	Timer* timer = GET_INSTANCE(timer);
 8004322:	f000 fd2f 	bl	8004d84 <get_timer>
 8004326:	61b8      	str	r0, [r7, #24]
	static uint8_t lap_count = 0;
	char ttemp[5] = { 0, };
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	2300      	movs	r3, #0
 800432e:	743b      	strb	r3, [r7, #16]
	Time* lap_time = GET_INSTANCE(lap_time);
 8004330:	f000 fd32 	bl	8004d98 <get_lap_time>
 8004334:	6178      	str	r0, [r7, #20]


	display_time("STW", TOP_LINE, OTHERS, timer->time);
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2201      	movs	r2, #1
 800433c:	2100      	movs	r1, #0
 800433e:	483a      	ldr	r0, [pc, #232]	@ (8004428 <run+0x120>)
 8004340:	f000 f8f2 	bl	8004528 <display_time>

	if (previous_button_2 == false && button_2->is_pressed(button_2) == true)
 8004344:	4b39      	ldr	r3, [pc, #228]	@ (800442c <run+0x124>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	f083 0301 	eor.w	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <run+0x62>
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004358:	4798      	blx	r3
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d004      	beq.n	800436a <run+0x62>
	{
		CLCD_Clear();
 8004360:	f7fc ff29 	bl	80011b6 <CLCD_Clear>
		this->operate = pause;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a32      	ldr	r2, [pc, #200]	@ (8004430 <run+0x128>)
 8004368:	601a      	str	r2, [r3, #0]
	}

	if (previous_button_3 == false && button_3->is_pressed(button_3) == true)
 800436a:	4b32      	ldr	r3, [pc, #200]	@ (8004434 <run+0x12c>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	f083 0301 	eor.w	r3, r3, #1
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02f      	beq.n	80043d8 <run+0xd0>
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	6a38      	ldr	r0, [r7, #32]
 800437e:	4798      	blx	r3
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d028      	beq.n	80043d8 <run+0xd0>
	{
		memcpy(&(lap_time[lap_count]), timer->time, sizeof(timer->time));
 8004386:	4b2c      	ldr	r3, [pc, #176]	@ (8004438 <run+0x130>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4413      	add	r3, r2
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	601a      	str	r2, [r3, #0]

		sprintf(ttemp, "LP%d", lap_count + 1);
 800439e:	4b26      	ldr	r3, [pc, #152]	@ (8004438 <run+0x130>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	f107 030c 	add.w	r3, r7, #12
 80043a8:	4924      	ldr	r1, [pc, #144]	@ (800443c <run+0x134>)
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fd34 	bl	8004e18 <siprintf>



		if (lap_count < 10)
 80043b0:	4b21      	ldr	r3, [pc, #132]	@ (8004438 <run+0x130>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b09      	cmp	r3, #9
 80043b6:	d808      	bhi.n	80043ca <run+0xc2>
		{
			display_time(ttemp, BOTTOM_LINE, OTHERS, timer->time);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f107 000c 	add.w	r0, r7, #12
 80043c0:	2201      	movs	r2, #1
 80043c2:	2101      	movs	r1, #1
 80043c4:	f000 f8b0 	bl	8004528 <display_time>
 80043c8:	e006      	b.n	80043d8 <run+0xd0>
		}
		else
		{
			CLCD_Clear();
 80043ca:	f7fc fef4 	bl	80011b6 <CLCD_Clear>
			CLCD_Puts(0, BOTTOM_LINE, "LAP FULL(9/9)");
 80043ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004440 <run+0x138>)
 80043d0:	2101      	movs	r1, #1
 80043d2:	2000      	movs	r0, #0
 80043d4:	f7fc fea8 	bl	8001128 <CLCD_Puts>
		}
	}

	if (previous_button_4 == false && button_4->is_pressed(button_4) == true)
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <run+0x13c>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	f083 0301 	eor.w	r3, r3, #1
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <run+0xe6>
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	69f8      	ldr	r0, [r7, #28]
 80043ec:	4798      	blx	r3
	{

	}

	previous_button_2 = button_2->is_pressed(button_2);
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043f4:	4798      	blx	r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	461a      	mov	r2, r3
 80043fa:	4b0c      	ldr	r3, [pc, #48]	@ (800442c <run+0x124>)
 80043fc:	701a      	strb	r2, [r3, #0]
	previous_button_3 = button_3->is_pressed(button_3);
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	6a38      	ldr	r0, [r7, #32]
 8004404:	4798      	blx	r3
 8004406:	4603      	mov	r3, r0
 8004408:	461a      	mov	r2, r3
 800440a:	4b0a      	ldr	r3, [pc, #40]	@ (8004434 <run+0x12c>)
 800440c:	701a      	strb	r2, [r3, #0]
	previous_button_4 = button_4->is_pressed(button_4);
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	69f8      	ldr	r0, [r7, #28]
 8004414:	4798      	blx	r3
 8004416:	4603      	mov	r3, r0
 8004418:	461a      	mov	r2, r3
 800441a:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <run+0x13c>)
 800441c:	701a      	strb	r2, [r3, #0]
}
 800441e:	bf00      	nop
 8004420:	3728      	adds	r7, #40	@ 0x28
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	08005770 	.word	0x08005770
 800442c:	200001cd 	.word	0x200001cd
 8004430:	08004449 	.word	0x08004449
 8004434:	200001ce 	.word	0x200001ce
 8004438:	200001cf 	.word	0x200001cf
 800443c:	08005774 	.word	0x08005774
 8004440:	0800577c 	.word	0x0800577c
 8004444:	200001d0 	.word	0x200001d0

08004448 <pause>:

static void pause(Lcd* this)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	Button* button_2 = GET_INSTANCE(button_2);
 8004450:	f7ff ff00 	bl	8004254 <get_button_2>
 8004454:	6178      	str	r0, [r7, #20]
	Button* button_3 = GET_INSTANCE(button_3);
 8004456:	f7ff ff07 	bl	8004268 <get_button_3>
 800445a:	6138      	str	r0, [r7, #16]
	Button* button_4 = GET_INSTANCE(button_4);
 800445c:	f7ff ff0e 	bl	800427c <get_button_4>
 8004460:	60f8      	str	r0, [r7, #12]
	static bool previous_button_2 = false;
	static bool previous_button_3 = false;
	static bool previous_button_4 = false;
	Timer* timer = GET_INSTANCE(timer);
 8004462:	f000 fc8f 	bl	8004d84 <get_timer>
 8004466:	60b8      	str	r0, [r7, #8]

//	timer->set_count(timer, timer->get_recorded_count(timer));
	display_time("STW", TOP_LINE, OTHERS, timer->time);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2201      	movs	r2, #1
 800446e:	2100      	movs	r1, #0
 8004470:	4827      	ldr	r0, [pc, #156]	@ (8004510 <pause+0xc8>)
 8004472:	f000 f859 	bl	8004528 <display_time>

	if (previous_button_2 == false && button_2->is_pressed(button_2) == true)
 8004476:	4b27      	ldr	r3, [pc, #156]	@ (8004514 <pause+0xcc>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	f083 0301 	eor.w	r3, r3, #1
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <pause+0x54>
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	6978      	ldr	r0, [r7, #20]
 800448a:	4798      	blx	r3
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d004      	beq.n	800449c <pause+0x54>
	{
		CLCD_Clear();
 8004492:	f7fc fe90 	bl	80011b6 <CLCD_Clear>
		this->operate = run;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a1f      	ldr	r2, [pc, #124]	@ (8004518 <pause+0xd0>)
 800449a:	601a      	str	r2, [r3, #0]
	}

	if (previous_button_3 == false && button_3->is_pressed(button_3) == true)
 800449c:	4b1f      	ldr	r3, [pc, #124]	@ (800451c <pause+0xd4>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f083 0301 	eor.w	r3, r3, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <pause+0x7a>
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	6938      	ldr	r0, [r7, #16]
 80044b0:	4798      	blx	r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d004      	beq.n	80044c2 <pause+0x7a>
	{
		CLCD_Clear();
 80044b8:	f7fc fe7d 	bl	80011b6 <CLCD_Clear>
		this->operate = stop;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a18      	ldr	r2, [pc, #96]	@ (8004520 <pause+0xd8>)
 80044c0:	601a      	str	r2, [r3, #0]
	}

	if (previous_button_4 == false && button_4->is_pressed(button_4) == true)
 80044c2:	4b18      	ldr	r3, [pc, #96]	@ (8004524 <pause+0xdc>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	f083 0301 	eor.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <pause+0x90>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	4798      	blx	r3
	{

	}

	previous_button_2 = button_2->is_pressed(button_2);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	6978      	ldr	r0, [r7, #20]
 80044de:	4798      	blx	r3
 80044e0:	4603      	mov	r3, r0
 80044e2:	461a      	mov	r2, r3
 80044e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <pause+0xcc>)
 80044e6:	701a      	strb	r2, [r3, #0]
	previous_button_3 = button_3->is_pressed(button_3);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	6938      	ldr	r0, [r7, #16]
 80044ee:	4798      	blx	r3
 80044f0:	4603      	mov	r3, r0
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b09      	ldr	r3, [pc, #36]	@ (800451c <pause+0xd4>)
 80044f6:	701a      	strb	r2, [r3, #0]
	previous_button_4 = button_4->is_pressed(button_4);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	4798      	blx	r3
 8004500:	4603      	mov	r3, r0
 8004502:	461a      	mov	r2, r3
 8004504:	4b07      	ldr	r3, [pc, #28]	@ (8004524 <pause+0xdc>)
 8004506:	701a      	strb	r2, [r3, #0]
}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	08005770 	.word	0x08005770
 8004514:	200001d1 	.word	0x200001d1
 8004518:	08004309 	.word	0x08004309
 800451c:	200001d2 	.word	0x200001d2
 8004520:	08004291 	.word	0x08004291
 8004524:	200001d3 	.word	0x200001d3

08004528 <display_time>:

static void display_time(char* head, Line line, State state, Time* time)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b09a      	sub	sp, #104	@ 0x68
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	72fb      	strb	r3, [r7, #11]
 8004536:	4613      	mov	r3, r2
 8004538:	72bb      	strb	r3, [r7, #10]
	Timer* timer = GET_INSTANCE(timer);
 800453a:	f000 fc23 	bl	8004d84 <get_timer>
 800453e:	6678      	str	r0, [r7, #100]	@ 0x64
	char string[20] = { 0, };
 8004540:	2300      	movs	r3, #0
 8004542:	653b      	str	r3, [r7, #80]	@ 0x50
 8004544:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	605a      	str	r2, [r3, #4]
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	60da      	str	r2, [r3, #12]
	char seconds[20] = { 0, };
 8004552:	2300      	movs	r3, #0
 8004554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004556:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	605a      	str	r2, [r3, #4]
 8004560:	609a      	str	r2, [r3, #8]
 8004562:	60da      	str	r2, [r3, #12]
	char minutes[20] = { 0, };
 8004564:	2300      	movs	r3, #0
 8004566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004568:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
	char housrs[20] = { 0, };
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	f107 0318 	add.w	r3, r7, #24
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	609a      	str	r2, [r3, #8]
 8004586:	60da      	str	r2, [r3, #12]

	CLCD_Puts(0, line, head);
 8004588:	7afb      	ldrb	r3, [r7, #11]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4619      	mov	r1, r3
 800458e:	2000      	movs	r0, #0
 8004590:	f7fc fdca 	bl	8001128 <CLCD_Puts>

	sprintf(housrs,"%02d", state == STOP ? timer->get_recorded_time(timer, time, HOURS) : timer->get_time(timer, HOURS));
 8004594:	7abb      	ldrb	r3, [r7, #10]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d108      	bne.n	80045ac <display_time+0x84>
 800459a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	2200      	movs	r2, #0
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80045a4:	4798      	blx	r3
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	e006      	b.n	80045ba <display_time+0x92>
 80045ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	2100      	movs	r1, #0
 80045b2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80045b4:	4798      	blx	r3
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	f107 0314 	add.w	r3, r7, #20
 80045be:	4940      	ldr	r1, [pc, #256]	@ (80046c0 <display_time+0x198>)
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fc29 	bl	8004e18 <siprintf>
	CLCD_Puts(4, line, housrs);
 80045c6:	f107 0214 	add.w	r2, r7, #20
 80045ca:	7afb      	ldrb	r3, [r7, #11]
 80045cc:	4619      	mov	r1, r3
 80045ce:	2004      	movs	r0, #4
 80045d0:	f7fc fdaa 	bl	8001128 <CLCD_Puts>

	CLCD_Puts(6, line, ":");
 80045d4:	7afb      	ldrb	r3, [r7, #11]
 80045d6:	4a3b      	ldr	r2, [pc, #236]	@ (80046c4 <display_time+0x19c>)
 80045d8:	4619      	mov	r1, r3
 80045da:	2006      	movs	r0, #6
 80045dc:	f7fc fda4 	bl	8001128 <CLCD_Puts>

	sprintf(minutes,"%02d", state == STOP ? timer->get_recorded_time(timer, time, MINUTES) :timer->get_time(timer, MINUTES));
 80045e0:	7abb      	ldrb	r3, [r7, #10]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d108      	bne.n	80045f8 <display_time+0xd0>
 80045e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	2201      	movs	r2, #1
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80045f0:	4798      	blx	r3
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	e006      	b.n	8004606 <display_time+0xde>
 80045f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	2101      	movs	r1, #1
 80045fe:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004600:	4798      	blx	r3
 8004602:	4603      	mov	r3, r0
 8004604:	461a      	mov	r2, r3
 8004606:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800460a:	492d      	ldr	r1, [pc, #180]	@ (80046c0 <display_time+0x198>)
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fc03 	bl	8004e18 <siprintf>
	CLCD_Puts(7, line, minutes);
 8004612:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004616:	7afb      	ldrb	r3, [r7, #11]
 8004618:	4619      	mov	r1, r3
 800461a:	2007      	movs	r0, #7
 800461c:	f7fc fd84 	bl	8001128 <CLCD_Puts>

	CLCD_Puts(9, line, ":");
 8004620:	7afb      	ldrb	r3, [r7, #11]
 8004622:	4a28      	ldr	r2, [pc, #160]	@ (80046c4 <display_time+0x19c>)
 8004624:	4619      	mov	r1, r3
 8004626:	2009      	movs	r0, #9
 8004628:	f7fc fd7e 	bl	8001128 <CLCD_Puts>

	sprintf(seconds, "%02d", state == STOP ? timer->get_recorded_time(timer, time, SECONDS) : timer->get_time(timer, SECONDS));
 800462c:	7abb      	ldrb	r3, [r7, #10]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d108      	bne.n	8004644 <display_time+0x11c>
 8004632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	2202      	movs	r2, #2
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800463c:	4798      	blx	r3
 800463e:	4603      	mov	r3, r0
 8004640:	461a      	mov	r2, r3
 8004642:	e006      	b.n	8004652 <display_time+0x12a>
 8004644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	2102      	movs	r1, #2
 800464a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800464c:	4798      	blx	r3
 800464e:	4603      	mov	r3, r0
 8004650:	461a      	mov	r2, r3
 8004652:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004656:	491a      	ldr	r1, [pc, #104]	@ (80046c0 <display_time+0x198>)
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fbdd 	bl	8004e18 <siprintf>
	CLCD_Puts(10, line, seconds);
 800465e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004662:	7afb      	ldrb	r3, [r7, #11]
 8004664:	4619      	mov	r1, r3
 8004666:	200a      	movs	r0, #10
 8004668:	f7fc fd5e 	bl	8001128 <CLCD_Puts>

	CLCD_Puts(12, line, ".");
 800466c:	7afb      	ldrb	r3, [r7, #11]
 800466e:	4a16      	ldr	r2, [pc, #88]	@ (80046c8 <display_time+0x1a0>)
 8004670:	4619      	mov	r1, r3
 8004672:	200c      	movs	r0, #12
 8004674:	f7fc fd58 	bl	8001128 <CLCD_Puts>

	sprintf(string, "%03d", state == STOP ? timer->get_recorded_time(timer, time, MILLISECONDS) : timer->get_time(timer, MILLISECONDS));
 8004678:	7abb      	ldrb	r3, [r7, #10]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d108      	bne.n	8004690 <display_time+0x168>
 800467e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	2204      	movs	r2, #4
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004688:	4798      	blx	r3
 800468a:	4603      	mov	r3, r0
 800468c:	461a      	mov	r2, r3
 800468e:	e006      	b.n	800469e <display_time+0x176>
 8004690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	2104      	movs	r1, #4
 8004696:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004698:	4798      	blx	r3
 800469a:	4603      	mov	r3, r0
 800469c:	461a      	mov	r2, r3
 800469e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80046a2:	490a      	ldr	r1, [pc, #40]	@ (80046cc <display_time+0x1a4>)
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fbb7 	bl	8004e18 <siprintf>
	CLCD_Puts(13, line, string);
 80046aa:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80046ae:	7afb      	ldrb	r3, [r7, #11]
 80046b0:	4619      	mov	r1, r3
 80046b2:	200d      	movs	r0, #13
 80046b4:	f7fc fd38 	bl	8001128 <CLCD_Puts>
}
 80046b8:	bf00      	nop
 80046ba:	3768      	adds	r7, #104	@ 0x68
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	0800578c 	.word	0x0800578c
 80046c4:	08005794 	.word	0x08005794
 80046c8:	08005798 	.word	0x08005798
 80046cc:	0800579c 	.word	0x0800579c

080046d0 <get_lcd>:


Lcd* get_lcd(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
	return &lcd;
 80046d4:	4b02      	ldr	r3, [pc, #8]	@ (80046e0 <get_lcd+0x10>)
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	2000004c 	.word	0x2000004c

080046e4 <turn_on_left>:
Led right_red   = { .GPIOx = RIGHT_RED_GPIO_Port,   .GPIO_Pin = RIGHT_RED_Pin,   .previous_button = false, .operate = turn_off_right };
Led right_green = { .GPIOx = RIGHT_GREEN_GPIO_Port, .GPIO_Pin = RIGHT_GREEN_Pin, .previous_button = false, .operate = turn_off_right };
Led right_blue  = { .GPIOx = RIGHT_BLUE_GPIO_Port,  .GPIO_Pin = RIGHT_BLUE_Pin,  .previous_button = false, .operate = turn_off_right };

static void turn_on_left(Led* this, Button* button)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
	TURN_ON_LED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	889b      	ldrh	r3, [r3, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	4619      	mov	r1, r3
 80046fa:	f7fd f955 	bl	80019a8 <HAL_GPIO_WritePin>

	if (this->previous_button == false && button->is_pressed(button) == true)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	799b      	ldrb	r3, [r3, #6]
 8004702:	f083 0301 	eor.w	r3, r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <turn_on_left+0x3c>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	6838      	ldr	r0, [r7, #0]
 8004712:	4798      	blx	r3
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <turn_on_left+0x3c>
	{
		this->operate = turn_off_left;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a06      	ldr	r2, [pc, #24]	@ (8004738 <turn_on_left+0x54>)
 800471e:	609a      	str	r2, [r3, #8]
	}

	this->previous_button = button->is_pressed(button);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	6838      	ldr	r0, [r7, #0]
 8004726:	4798      	blx	r3
 8004728:	4603      	mov	r3, r0
 800472a:	461a      	mov	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	719a      	strb	r2, [r3, #6]
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	0800473d 	.word	0x0800473d

0800473c <turn_off_left>:

static void turn_off_left(Led* this, Button* button)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
	TURN_OFF_LED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	889b      	ldrh	r3, [r3, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	4619      	mov	r1, r3
 8004752:	f7fd f929 	bl	80019a8 <HAL_GPIO_WritePin>

	if (this->previous_button == false && button->is_pressed(button) == true)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	799b      	ldrb	r3, [r3, #6]
 800475a:	f083 0301 	eor.w	r3, r3, #1
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <turn_off_left+0x3c>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	6838      	ldr	r0, [r7, #0]
 800476a:	4798      	blx	r3
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <turn_off_left+0x3c>
	{
		this->operate = turn_on_left;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a06      	ldr	r2, [pc, #24]	@ (8004790 <turn_off_left+0x54>)
 8004776:	609a      	str	r2, [r3, #8]
	}

	this->previous_button = button->is_pressed(button);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	6838      	ldr	r0, [r7, #0]
 800477e:	4798      	blx	r3
 8004780:	4603      	mov	r3, r0
 8004782:	461a      	mov	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	719a      	strb	r2, [r3, #6]
}
 8004788:	bf00      	nop
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	080046e5 	.word	0x080046e5

08004794 <turn_on_right>:

static void turn_on_right(Led* this, Button* button)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
	TURN_ON_LED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	889b      	ldrh	r3, [r3, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	4619      	mov	r1, r3
 80047aa:	f7fd f8fd 	bl	80019a8 <HAL_GPIO_WritePin>

	if (this->previous_button == true && button->is_pressed(button) == false)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	799b      	ldrb	r3, [r3, #6]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00c      	beq.n	80047d0 <turn_on_right+0x3c>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	6838      	ldr	r0, [r7, #0]
 80047bc:	4798      	blx	r3
 80047be:	4603      	mov	r3, r0
 80047c0:	f083 0301 	eor.w	r3, r3, #1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <turn_on_right+0x3c>
	{
		this->operate = turn_off_right;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a06      	ldr	r2, [pc, #24]	@ (80047e8 <turn_on_right+0x54>)
 80047ce:	609a      	str	r2, [r3, #8]
	}

	this->previous_button = button->is_pressed(button);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	6838      	ldr	r0, [r7, #0]
 80047d6:	4798      	blx	r3
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	719a      	strb	r2, [r3, #6]
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	080047ed 	.word	0x080047ed

080047ec <turn_off_right>:

static void turn_off_right(Led* this, Button* button)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
	TURN_OFF_LED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	889b      	ldrh	r3, [r3, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	4619      	mov	r1, r3
 8004802:	f7fd f8d1 	bl	80019a8 <HAL_GPIO_WritePin>

	if (this->previous_button == true && button->is_pressed(button) == false)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	799b      	ldrb	r3, [r3, #6]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <turn_off_right+0x3c>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	6838      	ldr	r0, [r7, #0]
 8004814:	4798      	blx	r3
 8004816:	4603      	mov	r3, r0
 8004818:	f083 0301 	eor.w	r3, r3, #1
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <turn_off_right+0x3c>
	{
		this->operate = turn_on_right;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a06      	ldr	r2, [pc, #24]	@ (8004840 <turn_off_right+0x54>)
 8004826:	609a      	str	r2, [r3, #8]
	}

	this->previous_button = button->is_pressed(button);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	6838      	ldr	r0, [r7, #0]
 800482e:	4798      	blx	r3
 8004830:	4603      	mov	r3, r0
 8004832:	461a      	mov	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	719a      	strb	r2, [r3, #6]
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	08004795 	.word	0x08004795

08004844 <get_left_red>:

Led* get_left_red(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
	return &left_red;
 8004848:	4b02      	ldr	r3, [pc, #8]	@ (8004854 <get_left_red+0x10>)
}
 800484a:	4618      	mov	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	20000050 	.word	0x20000050

08004858 <get_left_green>:

Led* get_left_green(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
	return &left_green;
 800485c:	4b02      	ldr	r3, [pc, #8]	@ (8004868 <get_left_green+0x10>)
}
 800485e:	4618      	mov	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	2000005c 	.word	0x2000005c

0800486c <get_left_blue>:

Led* get_left_blue(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
	return &left_blue;
 8004870:	4b02      	ldr	r3, [pc, #8]	@ (800487c <get_left_blue+0x10>)
}
 8004872:	4618      	mov	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	20000068 	.word	0x20000068

08004880 <get_right_red>:

Led* get_right_red (void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
	return &right_red ;
 8004884:	4b02      	ldr	r3, [pc, #8]	@ (8004890 <get_right_red+0x10>)
}
 8004886:	4618      	mov	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	20000074 	.word	0x20000074

08004894 <stop>:
static void run(SevenSegment* this);

SevenSegment segment = { .operate = stop };

static void stop(SevenSegment* this)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	Button* button_2 = GET_INSTANCE(button_2);
 800489c:	f7ff fcda 	bl	8004254 <get_button_2>
 80048a0:	60f8      	str	r0, [r7, #12]
	Timer* timer = GET_INSTANCE(timer);
 80048a2:	f000 fa6f 	bl	8004d84 <get_timer>
 80048a6:	60b8      	str	r0, [r7, #8]
	static bool previous_button_state = false;

	DGT1_DP_ON;
 80048a8:	2200      	movs	r2, #0
 80048aa:	2180      	movs	r1, #128	@ 0x80
 80048ac:	4820      	ldr	r0, [pc, #128]	@ (8004930 <stop+0x9c>)
 80048ae:	f7fd f87b 	bl	80019a8 <HAL_GPIO_WritePin>
	DGT2_DP_OFF;
 80048b2:	2201      	movs	r2, #1
 80048b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80048b8:	481e      	ldr	r0, [pc, #120]	@ (8004934 <stop+0xa0>)
 80048ba:	f7fd f875 	bl	80019a8 <HAL_GPIO_WritePin>

	timer->set_count(timer, 0);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2100      	movs	r1, #0
 80048c4:	68b8      	ldr	r0, [r7, #8]
 80048c6:	4798      	blx	r3

	_7SEG_SetNumber(DGT1, timer->get_time(timer, SECONDS), ON);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	2102      	movs	r1, #2
 80048ce:	68b8      	ldr	r0, [r7, #8]
 80048d0:	4798      	blx	r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	2201      	movs	r2, #1
 80048d6:	4619      	mov	r1, r3
 80048d8:	2000      	movs	r0, #0
 80048da:	f7ff f89d 	bl	8003a18 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, timer->get_time(timer, _100_MILLISECONDS), OFF);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	2103      	movs	r1, #3
 80048e4:	68b8      	ldr	r0, [r7, #8]
 80048e6:	4798      	blx	r3
 80048e8:	4603      	mov	r3, r0
 80048ea:	2200      	movs	r2, #0
 80048ec:	4619      	mov	r1, r3
 80048ee:	2001      	movs	r0, #1
 80048f0:	f7ff f892 	bl	8003a18 <_7SEG_SetNumber>

	if (previous_button_state == false && button_2->is_pressed(button_2) == true)
 80048f4:	4b10      	ldr	r3, [pc, #64]	@ (8004938 <stop+0xa4>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	f083 0301 	eor.w	r3, r3, #1
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <stop+0x82>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	4798      	blx	r3
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <stop+0x82>
	{
		this->operate = run;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a0a      	ldr	r2, [pc, #40]	@ (800493c <stop+0xa8>)
 8004914:	601a      	str	r2, [r3, #0]
	}

	previous_button_state = button_2->is_pressed(button_2);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	4798      	blx	r3
 800491e:	4603      	mov	r3, r0
 8004920:	461a      	mov	r2, r3
 8004922:	4b05      	ldr	r3, [pc, #20]	@ (8004938 <stop+0xa4>)
 8004924:	701a      	strb	r2, [r3, #0]
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40020c00 	.word	0x40020c00
 8004934:	40021000 	.word	0x40021000
 8004938:	200001d4 	.word	0x200001d4
 800493c:	08004941 	.word	0x08004941

08004940 <run>:

static void run(SevenSegment* this)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	Button* button_2 = GET_INSTANCE(button_2);
 8004948:	f7ff fc84 	bl	8004254 <get_button_2>
 800494c:	60f8      	str	r0, [r7, #12]
	Timer* timer = GET_INSTANCE(timer);
 800494e:	f000 fa19 	bl	8004d84 <get_timer>
 8004952:	60b8      	str	r0, [r7, #8]
	static bool previous_button_state = false;

	_7SEG_SetNumber(DGT1, timer->get_time(timer, SECONDS), timer->get_time(timer, _100_MILLISECONDS) < 5 ? ON : OFF);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004958:	2102      	movs	r1, #2
 800495a:	68b8      	ldr	r0, [r7, #8]
 800495c:	4798      	blx	r3
 800495e:	4603      	mov	r3, r0
 8004960:	461c      	mov	r4, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	2103      	movs	r1, #3
 8004968:	68b8      	ldr	r0, [r7, #8]
 800496a:	4798      	blx	r3
 800496c:	4603      	mov	r3, r0
 800496e:	2b04      	cmp	r3, #4
 8004970:	bf94      	ite	ls
 8004972:	2301      	movls	r3, #1
 8004974:	2300      	movhi	r3, #0
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	4621      	mov	r1, r4
 800497c:	2000      	movs	r0, #0
 800497e:	f7ff f84b 	bl	8003a18 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, timer->get_time(timer, _100_MILLISECONDS), OFF);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	2103      	movs	r1, #3
 8004988:	68b8      	ldr	r0, [r7, #8]
 800498a:	4798      	blx	r3
 800498c:	4603      	mov	r3, r0
 800498e:	2200      	movs	r2, #0
 8004990:	4619      	mov	r1, r3
 8004992:	2001      	movs	r0, #1
 8004994:	f7ff f840 	bl	8003a18 <_7SEG_SetNumber>

	if (previous_button_state == false && button_2->is_pressed(button_2) == true)
 8004998:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <run+0x9c>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	f083 0301 	eor.w	r3, r3, #1
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <run+0x82>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	4798      	blx	r3
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d006      	beq.n	80049c2 <run+0x82>
	{
		timer->record_count(timer);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	68b8      	ldr	r0, [r7, #8]
 80049ba:	4798      	blx	r3
//		timer->record_time(timer, run_time);
		this->operate = pause;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a08      	ldr	r2, [pc, #32]	@ (80049e0 <run+0xa0>)
 80049c0:	601a      	str	r2, [r3, #0]
	}

	previous_button_state = button_2->is_pressed(button_2);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	4798      	blx	r3
 80049ca:	4603      	mov	r3, r0
 80049cc:	461a      	mov	r2, r3
 80049ce:	4b03      	ldr	r3, [pc, #12]	@ (80049dc <run+0x9c>)
 80049d0:	701a      	strb	r2, [r3, #0]
}
 80049d2:	bf00      	nop
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd90      	pop	{r4, r7, pc}
 80049da:	bf00      	nop
 80049dc:	200001d5 	.word	0x200001d5
 80049e0:	080049e5 	.word	0x080049e5

080049e4 <pause>:

static void pause(SevenSegment* this)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
	Button* button_2 = GET_INSTANCE(button_2);
 80049ec:	f7ff fc32 	bl	8004254 <get_button_2>
 80049f0:	6178      	str	r0, [r7, #20]
	Button* button_3 = GET_INSTANCE(button_3);
 80049f2:	f7ff fc39 	bl	8004268 <get_button_3>
 80049f6:	6138      	str	r0, [r7, #16]
	Timer* timer = GET_INSTANCE(timer);
 80049f8:	f000 f9c4 	bl	8004d84 <get_timer>
 80049fc:	60f8      	str	r0, [r7, #12]
	static bool previous_button_state_2 = false;
	static bool previous_button_state_3 = false;

	DGT1_DP_ON;
 80049fe:	2200      	movs	r2, #0
 8004a00:	2180      	movs	r1, #128	@ 0x80
 8004a02:	4834      	ldr	r0, [pc, #208]	@ (8004ad4 <pause+0xf0>)
 8004a04:	f7fc ffd0 	bl	80019a8 <HAL_GPIO_WritePin>

	timer->set_count(timer, timer->get_recorded_count(timer));
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	691c      	ldr	r4, [r3, #16]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	4798      	blx	r3
 8004a14:	4603      	mov	r3, r0
 8004a16:	4619      	mov	r1, r3
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	47a0      	blx	r4

	_7SEG_SetNumber(DGT1, timer->get_time(timer, SECONDS), ON);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	2102      	movs	r1, #2
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	4798      	blx	r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	2201      	movs	r2, #1
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f7fe fff3 	bl	8003a18 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, timer->get_time(timer, _100_MILLISECONDS), OFF);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	2103      	movs	r1, #3
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	4798      	blx	r3
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2200      	movs	r2, #0
 8004a40:	4619      	mov	r1, r3
 8004a42:	2001      	movs	r0, #1
 8004a44:	f7fe ffe8 	bl	8003a18 <_7SEG_SetNumber>

	if (previous_button_state_2 == false && button_2->is_pressed(button_2) == true)
 8004a48:	4b23      	ldr	r3, [pc, #140]	@ (8004ad8 <pause+0xf4>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	f083 0301 	eor.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d013      	beq.n	8004a7e <pause+0x9a>
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	6978      	ldr	r0, [r7, #20]
 8004a5c:	4798      	blx	r3
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00c      	beq.n	8004a7e <pause+0x9a>
	{
		timer->set_count(timer, timer->get_recorded_count(timer));
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	691c      	ldr	r4, [r3, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	4798      	blx	r3
 8004a70:	4603      	mov	r3, r0
 8004a72:	4619      	mov	r1, r3
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	47a0      	blx	r4
		this->operate = run;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a18      	ldr	r2, [pc, #96]	@ (8004adc <pause+0xf8>)
 8004a7c:	601a      	str	r2, [r3, #0]
	}

	if (previous_button_state_3 == false && button_3->is_pressed(button_3) == true)
 8004a7e:	4b18      	ldr	r3, [pc, #96]	@ (8004ae0 <pause+0xfc>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	f083 0301 	eor.w	r3, r3, #1
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <pause+0xc6>
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	6938      	ldr	r0, [r7, #16]
 8004a92:	4798      	blx	r3
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <pause+0xc6>
	{
		timer->set_count(timer, 0);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	4798      	blx	r3
		this->operate = stop;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8004ae4 <pause+0x100>)
 8004aa8:	601a      	str	r2, [r3, #0]
	}

	previous_button_state_2 = button_2->is_pressed(button_2);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	6978      	ldr	r0, [r7, #20]
 8004ab0:	4798      	blx	r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4b08      	ldr	r3, [pc, #32]	@ (8004ad8 <pause+0xf4>)
 8004ab8:	701a      	strb	r2, [r3, #0]
	previous_button_state_3 = button_3->is_pressed(button_3);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	6938      	ldr	r0, [r7, #16]
 8004ac0:	4798      	blx	r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4b06      	ldr	r3, [pc, #24]	@ (8004ae0 <pause+0xfc>)
 8004ac8:	701a      	strb	r2, [r3, #0]
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd90      	pop	{r4, r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40020c00 	.word	0x40020c00
 8004ad8:	200001d6 	.word	0x200001d6
 8004adc:	08004941 	.word	0x08004941
 8004ae0:	200001d7 	.word	0x200001d7
 8004ae4:	08004895 	.word	0x08004895

08004ae8 <get_segment>:

SevenSegment* get_segment(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
	return &segment;
 8004aec:	4b02      	ldr	r3, [pc, #8]	@ (8004af8 <get_segment+0x10>)
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	20000080 	.word	0x20000080

08004afc <count_up>:
		get_recorded_time,
		get_time
};

static void count_up(Timer* this)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	this->count++;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	605a      	str	r2, [r3, #4]
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <set_count>:

static void set_count(Timer* this, uint32_t count)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
	this->count = count;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	605a      	str	r2, [r3, #4]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <record_count>:

static void record_count(Timer* this)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
	this->recorded_count = this->count;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	609a      	str	r2, [r3, #8]
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <get_recorded_count>:

static uint32_t get_recorded_count(Timer* this)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
	return this->recorded_count;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <record_time>:

static void record_time(Timer* this, Time* time)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
	this->time = time;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	601a      	str	r2, [r3, #0]
	this->time->hours             = this->count / 3600000 % 24;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a26      	ldr	r2, [pc, #152]	@ (8004c1c <record_time+0xb0>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	0d59      	lsrs	r1, r3, #21
 8004b88:	4b25      	ldr	r3, [pc, #148]	@ (8004c20 <record_time+0xb4>)
 8004b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b8e:	091a      	lsrs	r2, r3, #4
 8004b90:	4613      	mov	r3, r2
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	4413      	add	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	1aca      	subs	r2, r1, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]
	this->time->minutes           = this->count / 60000 % 60;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c24 <record_time+0xb8>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	0b99      	lsrs	r1, r3, #14
 8004bae:	4b1e      	ldr	r3, [pc, #120]	@ (8004c28 <record_time+0xbc>)
 8004bb0:	fba3 2301 	umull	r2, r3, r3, r1
 8004bb4:	095a      	lsrs	r2, r3, #5
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	1aca      	subs	r2, r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	705a      	strb	r2, [r3, #1]
	this->time->seconds           = this->count / 1000 % 60;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4a17      	ldr	r2, [pc, #92]	@ (8004c2c <record_time+0xc0>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	0999      	lsrs	r1, r3, #6
 8004bd4:	4b14      	ldr	r3, [pc, #80]	@ (8004c28 <record_time+0xbc>)
 8004bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bda:	095a      	lsrs	r2, r3, #5
 8004bdc:	4613      	mov	r3, r2
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	1aca      	subs	r2, r1, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	709a      	strb	r2, [r3, #2]
	this->time->_100_milliseconds = this->count / 100;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8004c30 <record_time+0xc4>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	095a      	lsrs	r2, r3, #5
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	70da      	strb	r2, [r3, #3]
	this->time->milliseconds      = this->count;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	711a      	strb	r2, [r3, #4]
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	95217cb1 	.word	0x95217cb1
 8004c20:	aaaaaaab 	.word	0xaaaaaaab
 8004c24:	45e7b273 	.word	0x45e7b273
 8004c28:	88888889 	.word	0x88888889
 8004c2c:	10624dd3 	.word	0x10624dd3
 8004c30:	51eb851f 	.word	0x51eb851f

08004c34 <get_recorded_time>:

static uint8_t get_recorded_time(Timer* this, Time* time, TimeKind time_kind)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	71fb      	strb	r3, [r7, #7]
	this->time = time;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	601a      	str	r2, [r3, #0]
	switch(time_kind)
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d820      	bhi.n	8004c90 <get_recorded_time+0x5c>
 8004c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c54 <get_recorded_time+0x20>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c69 	.word	0x08004c69
 8004c58:	08004c71 	.word	0x08004c71
 8004c5c:	08004c79 	.word	0x08004c79
 8004c60:	08004c81 	.word	0x08004c81
 8004c64:	08004c89 	.word	0x08004c89
	{
	case HOURS:
		return this->time->hours;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	e011      	b.n	8004c94 <get_recorded_time+0x60>
		break;
	case MINUTES:
		return this->time->minutes;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	785b      	ldrb	r3, [r3, #1]
 8004c76:	e00d      	b.n	8004c94 <get_recorded_time+0x60>
		break;
	case SECONDS:
		return this->time->seconds;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	789b      	ldrb	r3, [r3, #2]
 8004c7e:	e009      	b.n	8004c94 <get_recorded_time+0x60>
		break;
	case _100_MILLISECONDS:
		return this->time->_100_milliseconds;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	78db      	ldrb	r3, [r3, #3]
 8004c86:	e005      	b.n	8004c94 <get_recorded_time+0x60>
		break;
	case MILLISECONDS:
		return this->time->milliseconds;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	791b      	ldrb	r3, [r3, #4]
 8004c8e:	e001      	b.n	8004c94 <get_recorded_time+0x60>
		break;
	default:
		break;
 8004c90:	bf00      	nop
	}

	return -1;
 8004c92:	23ff      	movs	r3, #255	@ 0xff
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <get_time>:

static uint8_t get_time(Timer* this, TimeKind time_kind)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
	switch(time_kind)
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d854      	bhi.n	8004d5c <get_time+0xbc>
 8004cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <get_time+0x18>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004ccd 	.word	0x08004ccd
 8004cbc:	08004cef 	.word	0x08004cef
 8004cc0:	08004d11 	.word	0x08004d11
 8004cc4:	08004d33 	.word	0x08004d33
 8004cc8:	08004d55 	.word	0x08004d55
	{
	case HOURS:
		return this->count / 3600000 % 24;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4a26      	ldr	r2, [pc, #152]	@ (8004d6c <get_time+0xcc>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	0d59      	lsrs	r1, r3, #21
 8004cd8:	4b25      	ldr	r3, [pc, #148]	@ (8004d70 <get_time+0xd0>)
 8004cda:	fba3 2301 	umull	r2, r3, r3, r1
 8004cde:	091a      	lsrs	r2, r3, #4
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	4413      	add	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	1aca      	subs	r2, r1, r3
 8004cea:	b2d3      	uxtb	r3, r2
 8004cec:	e038      	b.n	8004d60 <get_time+0xc0>
		break;
	case MINUTES:
		return this->count / 60000 % 60;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4a20      	ldr	r2, [pc, #128]	@ (8004d74 <get_time+0xd4>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	0b99      	lsrs	r1, r3, #14
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8004d78 <get_time+0xd8>)
 8004cfc:	fba3 2301 	umull	r2, r3, r3, r1
 8004d00:	095a      	lsrs	r2, r3, #5
 8004d02:	4613      	mov	r3, r2
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	1aca      	subs	r2, r1, r3
 8004d0c:	b2d3      	uxtb	r3, r2
 8004d0e:	e027      	b.n	8004d60 <get_time+0xc0>
		break;
	case SECONDS:
		return this->count / 1000 % 60;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	4a19      	ldr	r2, [pc, #100]	@ (8004d7c <get_time+0xdc>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	0999      	lsrs	r1, r3, #6
 8004d1c:	4b16      	ldr	r3, [pc, #88]	@ (8004d78 <get_time+0xd8>)
 8004d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d22:	095a      	lsrs	r2, r3, #5
 8004d24:	4613      	mov	r3, r2
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	1aca      	subs	r2, r1, r3
 8004d2e:	b2d3      	uxtb	r3, r2
 8004d30:	e016      	b.n	8004d60 <get_time+0xc0>
		break;
	case _100_MILLISECONDS:
		return this->count % 1000 / 100;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	4b11      	ldr	r3, [pc, #68]	@ (8004d7c <get_time+0xdc>)
 8004d38:	fba3 1302 	umull	r1, r3, r3, r2
 8004d3c:	099b      	lsrs	r3, r3, #6
 8004d3e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	4a0d      	ldr	r2, [pc, #52]	@ (8004d80 <get_time+0xe0>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e005      	b.n	8004d60 <get_time+0xc0>
		break;
	case MILLISECONDS:
		return this->count;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e001      	b.n	8004d60 <get_time+0xc0>
		break;
	default:
		break;
 8004d5c:	bf00      	nop
	}

	return -1;
 8004d5e:	23ff      	movs	r3, #255	@ 0xff
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	95217cb1 	.word	0x95217cb1
 8004d70:	aaaaaaab 	.word	0xaaaaaaab
 8004d74:	45e7b273 	.word	0x45e7b273
 8004d78:	88888889 	.word	0x88888889
 8004d7c:	10624dd3 	.word	0x10624dd3
 8004d80:	51eb851f 	.word	0x51eb851f

08004d84 <get_timer>:
{
	return &recorded_run_time;
}

Timer* get_timer(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
	return &timer;
 8004d88:	4b02      	ldr	r3, [pc, #8]	@ (8004d94 <get_timer+0x10>)
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	20000084 	.word	0x20000084

08004d98 <get_lap_time>:

Time* get_lap_time(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
	return lap_time;
 8004d9c:	4b02      	ldr	r3, [pc, #8]	@ (8004da8 <get_lap_time+0x10>)
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	200001e0 	.word	0x200001e0

08004dac <receive>:
#include "uart.h"

extern UART_HandleTypeDef huart3;

static void receive(Uart* this)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(this->huart, this->pData, this->Size);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6859      	ldr	r1, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	891b      	ldrh	r3, [r3, #8]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f7fd fe1f 	bl	8002a04 <HAL_UART_Receive_IT>
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <get_data>:

static uint8_t get_data(Uart* this)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
	return *this->pData;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	781b      	ldrb	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <reset_data>:

static void reset_data(Uart* this)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	*(this->pData) = 0;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <get_uart>:
static uint8_t data;

static Uart uart = { &huart3, &data, 1, NULL, receive, get_data, reset_data };

Uart* get_uart(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
	return &uart;
 8004e08:	4b02      	ldr	r3, [pc, #8]	@ (8004e14 <get_uart+0x10>)
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	200000ac 	.word	0x200000ac

08004e18 <siprintf>:
 8004e18:	b40e      	push	{r1, r2, r3}
 8004e1a:	b500      	push	{lr}
 8004e1c:	b09c      	sub	sp, #112	@ 0x70
 8004e1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e20:	9002      	str	r0, [sp, #8]
 8004e22:	9006      	str	r0, [sp, #24]
 8004e24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e28:	4809      	ldr	r0, [pc, #36]	@ (8004e50 <siprintf+0x38>)
 8004e2a:	9107      	str	r1, [sp, #28]
 8004e2c:	9104      	str	r1, [sp, #16]
 8004e2e:	4909      	ldr	r1, [pc, #36]	@ (8004e54 <siprintf+0x3c>)
 8004e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e34:	9105      	str	r1, [sp, #20]
 8004e36:	6800      	ldr	r0, [r0, #0]
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	a902      	add	r1, sp, #8
 8004e3c:	f000 f994 	bl	8005168 <_svfiprintf_r>
 8004e40:	9b02      	ldr	r3, [sp, #8]
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	b01c      	add	sp, #112	@ 0x70
 8004e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e4c:	b003      	add	sp, #12
 8004e4e:	4770      	bx	lr
 8004e50:	200000c8 	.word	0x200000c8
 8004e54:	ffff0208 	.word	0xffff0208

08004e58 <memset>:
 8004e58:	4402      	add	r2, r0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d100      	bne.n	8004e62 <memset+0xa>
 8004e60:	4770      	bx	lr
 8004e62:	f803 1b01 	strb.w	r1, [r3], #1
 8004e66:	e7f9      	b.n	8004e5c <memset+0x4>

08004e68 <__errno>:
 8004e68:	4b01      	ldr	r3, [pc, #4]	@ (8004e70 <__errno+0x8>)
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	200000c8 	.word	0x200000c8

08004e74 <__libc_init_array>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	4d0d      	ldr	r5, [pc, #52]	@ (8004eac <__libc_init_array+0x38>)
 8004e78:	4c0d      	ldr	r4, [pc, #52]	@ (8004eb0 <__libc_init_array+0x3c>)
 8004e7a:	1b64      	subs	r4, r4, r5
 8004e7c:	10a4      	asrs	r4, r4, #2
 8004e7e:	2600      	movs	r6, #0
 8004e80:	42a6      	cmp	r6, r4
 8004e82:	d109      	bne.n	8004e98 <__libc_init_array+0x24>
 8004e84:	4d0b      	ldr	r5, [pc, #44]	@ (8004eb4 <__libc_init_array+0x40>)
 8004e86:	4c0c      	ldr	r4, [pc, #48]	@ (8004eb8 <__libc_init_array+0x44>)
 8004e88:	f000 fc66 	bl	8005758 <_init>
 8004e8c:	1b64      	subs	r4, r4, r5
 8004e8e:	10a4      	asrs	r4, r4, #2
 8004e90:	2600      	movs	r6, #0
 8004e92:	42a6      	cmp	r6, r4
 8004e94:	d105      	bne.n	8004ea2 <__libc_init_array+0x2e>
 8004e96:	bd70      	pop	{r4, r5, r6, pc}
 8004e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e9c:	4798      	blx	r3
 8004e9e:	3601      	adds	r6, #1
 8004ea0:	e7ee      	b.n	8004e80 <__libc_init_array+0xc>
 8004ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea6:	4798      	blx	r3
 8004ea8:	3601      	adds	r6, #1
 8004eaa:	e7f2      	b.n	8004e92 <__libc_init_array+0x1e>
 8004eac:	080057f8 	.word	0x080057f8
 8004eb0:	080057f8 	.word	0x080057f8
 8004eb4:	080057f8 	.word	0x080057f8
 8004eb8:	080057fc 	.word	0x080057fc

08004ebc <__retarget_lock_acquire_recursive>:
 8004ebc:	4770      	bx	lr

08004ebe <__retarget_lock_release_recursive>:
 8004ebe:	4770      	bx	lr

08004ec0 <_free_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4605      	mov	r5, r0
 8004ec4:	2900      	cmp	r1, #0
 8004ec6:	d041      	beq.n	8004f4c <_free_r+0x8c>
 8004ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ecc:	1f0c      	subs	r4, r1, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bfb8      	it	lt
 8004ed2:	18e4      	addlt	r4, r4, r3
 8004ed4:	f000 f8e0 	bl	8005098 <__malloc_lock>
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f50 <_free_r+0x90>)
 8004eda:	6813      	ldr	r3, [r2, #0]
 8004edc:	b933      	cbnz	r3, 8004eec <_free_r+0x2c>
 8004ede:	6063      	str	r3, [r4, #4]
 8004ee0:	6014      	str	r4, [r2, #0]
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ee8:	f000 b8dc 	b.w	80050a4 <__malloc_unlock>
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	d908      	bls.n	8004f02 <_free_r+0x42>
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	1821      	adds	r1, r4, r0
 8004ef4:	428b      	cmp	r3, r1
 8004ef6:	bf01      	itttt	eq
 8004ef8:	6819      	ldreq	r1, [r3, #0]
 8004efa:	685b      	ldreq	r3, [r3, #4]
 8004efc:	1809      	addeq	r1, r1, r0
 8004efe:	6021      	streq	r1, [r4, #0]
 8004f00:	e7ed      	b.n	8004ede <_free_r+0x1e>
 8004f02:	461a      	mov	r2, r3
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	b10b      	cbz	r3, 8004f0c <_free_r+0x4c>
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	d9fa      	bls.n	8004f02 <_free_r+0x42>
 8004f0c:	6811      	ldr	r1, [r2, #0]
 8004f0e:	1850      	adds	r0, r2, r1
 8004f10:	42a0      	cmp	r0, r4
 8004f12:	d10b      	bne.n	8004f2c <_free_r+0x6c>
 8004f14:	6820      	ldr	r0, [r4, #0]
 8004f16:	4401      	add	r1, r0
 8004f18:	1850      	adds	r0, r2, r1
 8004f1a:	4283      	cmp	r3, r0
 8004f1c:	6011      	str	r1, [r2, #0]
 8004f1e:	d1e0      	bne.n	8004ee2 <_free_r+0x22>
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	6053      	str	r3, [r2, #4]
 8004f26:	4408      	add	r0, r1
 8004f28:	6010      	str	r0, [r2, #0]
 8004f2a:	e7da      	b.n	8004ee2 <_free_r+0x22>
 8004f2c:	d902      	bls.n	8004f34 <_free_r+0x74>
 8004f2e:	230c      	movs	r3, #12
 8004f30:	602b      	str	r3, [r5, #0]
 8004f32:	e7d6      	b.n	8004ee2 <_free_r+0x22>
 8004f34:	6820      	ldr	r0, [r4, #0]
 8004f36:	1821      	adds	r1, r4, r0
 8004f38:	428b      	cmp	r3, r1
 8004f3a:	bf04      	itt	eq
 8004f3c:	6819      	ldreq	r1, [r3, #0]
 8004f3e:	685b      	ldreq	r3, [r3, #4]
 8004f40:	6063      	str	r3, [r4, #4]
 8004f42:	bf04      	itt	eq
 8004f44:	1809      	addeq	r1, r1, r0
 8004f46:	6021      	streq	r1, [r4, #0]
 8004f48:	6054      	str	r4, [r2, #4]
 8004f4a:	e7ca      	b.n	8004ee2 <_free_r+0x22>
 8004f4c:	bd38      	pop	{r3, r4, r5, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000354 	.word	0x20000354

08004f54 <sbrk_aligned>:
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	4e0f      	ldr	r6, [pc, #60]	@ (8004f94 <sbrk_aligned+0x40>)
 8004f58:	460c      	mov	r4, r1
 8004f5a:	6831      	ldr	r1, [r6, #0]
 8004f5c:	4605      	mov	r5, r0
 8004f5e:	b911      	cbnz	r1, 8004f66 <sbrk_aligned+0x12>
 8004f60:	f000 fba6 	bl	80056b0 <_sbrk_r>
 8004f64:	6030      	str	r0, [r6, #0]
 8004f66:	4621      	mov	r1, r4
 8004f68:	4628      	mov	r0, r5
 8004f6a:	f000 fba1 	bl	80056b0 <_sbrk_r>
 8004f6e:	1c43      	adds	r3, r0, #1
 8004f70:	d103      	bne.n	8004f7a <sbrk_aligned+0x26>
 8004f72:	f04f 34ff 	mov.w	r4, #4294967295
 8004f76:	4620      	mov	r0, r4
 8004f78:	bd70      	pop	{r4, r5, r6, pc}
 8004f7a:	1cc4      	adds	r4, r0, #3
 8004f7c:	f024 0403 	bic.w	r4, r4, #3
 8004f80:	42a0      	cmp	r0, r4
 8004f82:	d0f8      	beq.n	8004f76 <sbrk_aligned+0x22>
 8004f84:	1a21      	subs	r1, r4, r0
 8004f86:	4628      	mov	r0, r5
 8004f88:	f000 fb92 	bl	80056b0 <_sbrk_r>
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d1f2      	bne.n	8004f76 <sbrk_aligned+0x22>
 8004f90:	e7ef      	b.n	8004f72 <sbrk_aligned+0x1e>
 8004f92:	bf00      	nop
 8004f94:	20000350 	.word	0x20000350

08004f98 <_malloc_r>:
 8004f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f9c:	1ccd      	adds	r5, r1, #3
 8004f9e:	f025 0503 	bic.w	r5, r5, #3
 8004fa2:	3508      	adds	r5, #8
 8004fa4:	2d0c      	cmp	r5, #12
 8004fa6:	bf38      	it	cc
 8004fa8:	250c      	movcc	r5, #12
 8004faa:	2d00      	cmp	r5, #0
 8004fac:	4606      	mov	r6, r0
 8004fae:	db01      	blt.n	8004fb4 <_malloc_r+0x1c>
 8004fb0:	42a9      	cmp	r1, r5
 8004fb2:	d904      	bls.n	8004fbe <_malloc_r+0x26>
 8004fb4:	230c      	movs	r3, #12
 8004fb6:	6033      	str	r3, [r6, #0]
 8004fb8:	2000      	movs	r0, #0
 8004fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005094 <_malloc_r+0xfc>
 8004fc2:	f000 f869 	bl	8005098 <__malloc_lock>
 8004fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004fca:	461c      	mov	r4, r3
 8004fcc:	bb44      	cbnz	r4, 8005020 <_malloc_r+0x88>
 8004fce:	4629      	mov	r1, r5
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	f7ff ffbf 	bl	8004f54 <sbrk_aligned>
 8004fd6:	1c43      	adds	r3, r0, #1
 8004fd8:	4604      	mov	r4, r0
 8004fda:	d158      	bne.n	800508e <_malloc_r+0xf6>
 8004fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8004fe0:	4627      	mov	r7, r4
 8004fe2:	2f00      	cmp	r7, #0
 8004fe4:	d143      	bne.n	800506e <_malloc_r+0xd6>
 8004fe6:	2c00      	cmp	r4, #0
 8004fe8:	d04b      	beq.n	8005082 <_malloc_r+0xea>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	4639      	mov	r1, r7
 8004fee:	4630      	mov	r0, r6
 8004ff0:	eb04 0903 	add.w	r9, r4, r3
 8004ff4:	f000 fb5c 	bl	80056b0 <_sbrk_r>
 8004ff8:	4581      	cmp	r9, r0
 8004ffa:	d142      	bne.n	8005082 <_malloc_r+0xea>
 8004ffc:	6821      	ldr	r1, [r4, #0]
 8004ffe:	1a6d      	subs	r5, r5, r1
 8005000:	4629      	mov	r1, r5
 8005002:	4630      	mov	r0, r6
 8005004:	f7ff ffa6 	bl	8004f54 <sbrk_aligned>
 8005008:	3001      	adds	r0, #1
 800500a:	d03a      	beq.n	8005082 <_malloc_r+0xea>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	442b      	add	r3, r5
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	f8d8 3000 	ldr.w	r3, [r8]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	bb62      	cbnz	r2, 8005074 <_malloc_r+0xdc>
 800501a:	f8c8 7000 	str.w	r7, [r8]
 800501e:	e00f      	b.n	8005040 <_malloc_r+0xa8>
 8005020:	6822      	ldr	r2, [r4, #0]
 8005022:	1b52      	subs	r2, r2, r5
 8005024:	d420      	bmi.n	8005068 <_malloc_r+0xd0>
 8005026:	2a0b      	cmp	r2, #11
 8005028:	d917      	bls.n	800505a <_malloc_r+0xc2>
 800502a:	1961      	adds	r1, r4, r5
 800502c:	42a3      	cmp	r3, r4
 800502e:	6025      	str	r5, [r4, #0]
 8005030:	bf18      	it	ne
 8005032:	6059      	strne	r1, [r3, #4]
 8005034:	6863      	ldr	r3, [r4, #4]
 8005036:	bf08      	it	eq
 8005038:	f8c8 1000 	streq.w	r1, [r8]
 800503c:	5162      	str	r2, [r4, r5]
 800503e:	604b      	str	r3, [r1, #4]
 8005040:	4630      	mov	r0, r6
 8005042:	f000 f82f 	bl	80050a4 <__malloc_unlock>
 8005046:	f104 000b 	add.w	r0, r4, #11
 800504a:	1d23      	adds	r3, r4, #4
 800504c:	f020 0007 	bic.w	r0, r0, #7
 8005050:	1ac2      	subs	r2, r0, r3
 8005052:	bf1c      	itt	ne
 8005054:	1a1b      	subne	r3, r3, r0
 8005056:	50a3      	strne	r3, [r4, r2]
 8005058:	e7af      	b.n	8004fba <_malloc_r+0x22>
 800505a:	6862      	ldr	r2, [r4, #4]
 800505c:	42a3      	cmp	r3, r4
 800505e:	bf0c      	ite	eq
 8005060:	f8c8 2000 	streq.w	r2, [r8]
 8005064:	605a      	strne	r2, [r3, #4]
 8005066:	e7eb      	b.n	8005040 <_malloc_r+0xa8>
 8005068:	4623      	mov	r3, r4
 800506a:	6864      	ldr	r4, [r4, #4]
 800506c:	e7ae      	b.n	8004fcc <_malloc_r+0x34>
 800506e:	463c      	mov	r4, r7
 8005070:	687f      	ldr	r7, [r7, #4]
 8005072:	e7b6      	b.n	8004fe2 <_malloc_r+0x4a>
 8005074:	461a      	mov	r2, r3
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	42a3      	cmp	r3, r4
 800507a:	d1fb      	bne.n	8005074 <_malloc_r+0xdc>
 800507c:	2300      	movs	r3, #0
 800507e:	6053      	str	r3, [r2, #4]
 8005080:	e7de      	b.n	8005040 <_malloc_r+0xa8>
 8005082:	230c      	movs	r3, #12
 8005084:	6033      	str	r3, [r6, #0]
 8005086:	4630      	mov	r0, r6
 8005088:	f000 f80c 	bl	80050a4 <__malloc_unlock>
 800508c:	e794      	b.n	8004fb8 <_malloc_r+0x20>
 800508e:	6005      	str	r5, [r0, #0]
 8005090:	e7d6      	b.n	8005040 <_malloc_r+0xa8>
 8005092:	bf00      	nop
 8005094:	20000354 	.word	0x20000354

08005098 <__malloc_lock>:
 8005098:	4801      	ldr	r0, [pc, #4]	@ (80050a0 <__malloc_lock+0x8>)
 800509a:	f7ff bf0f 	b.w	8004ebc <__retarget_lock_acquire_recursive>
 800509e:	bf00      	nop
 80050a0:	2000034c 	.word	0x2000034c

080050a4 <__malloc_unlock>:
 80050a4:	4801      	ldr	r0, [pc, #4]	@ (80050ac <__malloc_unlock+0x8>)
 80050a6:	f7ff bf0a 	b.w	8004ebe <__retarget_lock_release_recursive>
 80050aa:	bf00      	nop
 80050ac:	2000034c 	.word	0x2000034c

080050b0 <__ssputs_r>:
 80050b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b4:	688e      	ldr	r6, [r1, #8]
 80050b6:	461f      	mov	r7, r3
 80050b8:	42be      	cmp	r6, r7
 80050ba:	680b      	ldr	r3, [r1, #0]
 80050bc:	4682      	mov	sl, r0
 80050be:	460c      	mov	r4, r1
 80050c0:	4690      	mov	r8, r2
 80050c2:	d82d      	bhi.n	8005120 <__ssputs_r+0x70>
 80050c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050cc:	d026      	beq.n	800511c <__ssputs_r+0x6c>
 80050ce:	6965      	ldr	r5, [r4, #20]
 80050d0:	6909      	ldr	r1, [r1, #16]
 80050d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050d6:	eba3 0901 	sub.w	r9, r3, r1
 80050da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050de:	1c7b      	adds	r3, r7, #1
 80050e0:	444b      	add	r3, r9
 80050e2:	106d      	asrs	r5, r5, #1
 80050e4:	429d      	cmp	r5, r3
 80050e6:	bf38      	it	cc
 80050e8:	461d      	movcc	r5, r3
 80050ea:	0553      	lsls	r3, r2, #21
 80050ec:	d527      	bpl.n	800513e <__ssputs_r+0x8e>
 80050ee:	4629      	mov	r1, r5
 80050f0:	f7ff ff52 	bl	8004f98 <_malloc_r>
 80050f4:	4606      	mov	r6, r0
 80050f6:	b360      	cbz	r0, 8005152 <__ssputs_r+0xa2>
 80050f8:	6921      	ldr	r1, [r4, #16]
 80050fa:	464a      	mov	r2, r9
 80050fc:	f000 fae8 	bl	80056d0 <memcpy>
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	6126      	str	r6, [r4, #16]
 800510e:	6165      	str	r5, [r4, #20]
 8005110:	444e      	add	r6, r9
 8005112:	eba5 0509 	sub.w	r5, r5, r9
 8005116:	6026      	str	r6, [r4, #0]
 8005118:	60a5      	str	r5, [r4, #8]
 800511a:	463e      	mov	r6, r7
 800511c:	42be      	cmp	r6, r7
 800511e:	d900      	bls.n	8005122 <__ssputs_r+0x72>
 8005120:	463e      	mov	r6, r7
 8005122:	6820      	ldr	r0, [r4, #0]
 8005124:	4632      	mov	r2, r6
 8005126:	4641      	mov	r1, r8
 8005128:	f000 faa8 	bl	800567c <memmove>
 800512c:	68a3      	ldr	r3, [r4, #8]
 800512e:	1b9b      	subs	r3, r3, r6
 8005130:	60a3      	str	r3, [r4, #8]
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	4433      	add	r3, r6
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	2000      	movs	r0, #0
 800513a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513e:	462a      	mov	r2, r5
 8005140:	f000 fad4 	bl	80056ec <_realloc_r>
 8005144:	4606      	mov	r6, r0
 8005146:	2800      	cmp	r0, #0
 8005148:	d1e0      	bne.n	800510c <__ssputs_r+0x5c>
 800514a:	6921      	ldr	r1, [r4, #16]
 800514c:	4650      	mov	r0, sl
 800514e:	f7ff feb7 	bl	8004ec0 <_free_r>
 8005152:	230c      	movs	r3, #12
 8005154:	f8ca 3000 	str.w	r3, [sl]
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800515e:	81a3      	strh	r3, [r4, #12]
 8005160:	f04f 30ff 	mov.w	r0, #4294967295
 8005164:	e7e9      	b.n	800513a <__ssputs_r+0x8a>
	...

08005168 <_svfiprintf_r>:
 8005168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	4698      	mov	r8, r3
 800516e:	898b      	ldrh	r3, [r1, #12]
 8005170:	061b      	lsls	r3, r3, #24
 8005172:	b09d      	sub	sp, #116	@ 0x74
 8005174:	4607      	mov	r7, r0
 8005176:	460d      	mov	r5, r1
 8005178:	4614      	mov	r4, r2
 800517a:	d510      	bpl.n	800519e <_svfiprintf_r+0x36>
 800517c:	690b      	ldr	r3, [r1, #16]
 800517e:	b973      	cbnz	r3, 800519e <_svfiprintf_r+0x36>
 8005180:	2140      	movs	r1, #64	@ 0x40
 8005182:	f7ff ff09 	bl	8004f98 <_malloc_r>
 8005186:	6028      	str	r0, [r5, #0]
 8005188:	6128      	str	r0, [r5, #16]
 800518a:	b930      	cbnz	r0, 800519a <_svfiprintf_r+0x32>
 800518c:	230c      	movs	r3, #12
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	f04f 30ff 	mov.w	r0, #4294967295
 8005194:	b01d      	add	sp, #116	@ 0x74
 8005196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519a:	2340      	movs	r3, #64	@ 0x40
 800519c:	616b      	str	r3, [r5, #20]
 800519e:	2300      	movs	r3, #0
 80051a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80051a2:	2320      	movs	r3, #32
 80051a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ac:	2330      	movs	r3, #48	@ 0x30
 80051ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800534c <_svfiprintf_r+0x1e4>
 80051b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051b6:	f04f 0901 	mov.w	r9, #1
 80051ba:	4623      	mov	r3, r4
 80051bc:	469a      	mov	sl, r3
 80051be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051c2:	b10a      	cbz	r2, 80051c8 <_svfiprintf_r+0x60>
 80051c4:	2a25      	cmp	r2, #37	@ 0x25
 80051c6:	d1f9      	bne.n	80051bc <_svfiprintf_r+0x54>
 80051c8:	ebba 0b04 	subs.w	fp, sl, r4
 80051cc:	d00b      	beq.n	80051e6 <_svfiprintf_r+0x7e>
 80051ce:	465b      	mov	r3, fp
 80051d0:	4622      	mov	r2, r4
 80051d2:	4629      	mov	r1, r5
 80051d4:	4638      	mov	r0, r7
 80051d6:	f7ff ff6b 	bl	80050b0 <__ssputs_r>
 80051da:	3001      	adds	r0, #1
 80051dc:	f000 80a7 	beq.w	800532e <_svfiprintf_r+0x1c6>
 80051e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051e2:	445a      	add	r2, fp
 80051e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80051e6:	f89a 3000 	ldrb.w	r3, [sl]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 809f 	beq.w	800532e <_svfiprintf_r+0x1c6>
 80051f0:	2300      	movs	r3, #0
 80051f2:	f04f 32ff 	mov.w	r2, #4294967295
 80051f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051fa:	f10a 0a01 	add.w	sl, sl, #1
 80051fe:	9304      	str	r3, [sp, #16]
 8005200:	9307      	str	r3, [sp, #28]
 8005202:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005206:	931a      	str	r3, [sp, #104]	@ 0x68
 8005208:	4654      	mov	r4, sl
 800520a:	2205      	movs	r2, #5
 800520c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005210:	484e      	ldr	r0, [pc, #312]	@ (800534c <_svfiprintf_r+0x1e4>)
 8005212:	f7fa ffdd 	bl	80001d0 <memchr>
 8005216:	9a04      	ldr	r2, [sp, #16]
 8005218:	b9d8      	cbnz	r0, 8005252 <_svfiprintf_r+0xea>
 800521a:	06d0      	lsls	r0, r2, #27
 800521c:	bf44      	itt	mi
 800521e:	2320      	movmi	r3, #32
 8005220:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005224:	0711      	lsls	r1, r2, #28
 8005226:	bf44      	itt	mi
 8005228:	232b      	movmi	r3, #43	@ 0x2b
 800522a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800522e:	f89a 3000 	ldrb.w	r3, [sl]
 8005232:	2b2a      	cmp	r3, #42	@ 0x2a
 8005234:	d015      	beq.n	8005262 <_svfiprintf_r+0xfa>
 8005236:	9a07      	ldr	r2, [sp, #28]
 8005238:	4654      	mov	r4, sl
 800523a:	2000      	movs	r0, #0
 800523c:	f04f 0c0a 	mov.w	ip, #10
 8005240:	4621      	mov	r1, r4
 8005242:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005246:	3b30      	subs	r3, #48	@ 0x30
 8005248:	2b09      	cmp	r3, #9
 800524a:	d94b      	bls.n	80052e4 <_svfiprintf_r+0x17c>
 800524c:	b1b0      	cbz	r0, 800527c <_svfiprintf_r+0x114>
 800524e:	9207      	str	r2, [sp, #28]
 8005250:	e014      	b.n	800527c <_svfiprintf_r+0x114>
 8005252:	eba0 0308 	sub.w	r3, r0, r8
 8005256:	fa09 f303 	lsl.w	r3, r9, r3
 800525a:	4313      	orrs	r3, r2
 800525c:	9304      	str	r3, [sp, #16]
 800525e:	46a2      	mov	sl, r4
 8005260:	e7d2      	b.n	8005208 <_svfiprintf_r+0xa0>
 8005262:	9b03      	ldr	r3, [sp, #12]
 8005264:	1d19      	adds	r1, r3, #4
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	9103      	str	r1, [sp, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	bfbb      	ittet	lt
 800526e:	425b      	neglt	r3, r3
 8005270:	f042 0202 	orrlt.w	r2, r2, #2
 8005274:	9307      	strge	r3, [sp, #28]
 8005276:	9307      	strlt	r3, [sp, #28]
 8005278:	bfb8      	it	lt
 800527a:	9204      	strlt	r2, [sp, #16]
 800527c:	7823      	ldrb	r3, [r4, #0]
 800527e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005280:	d10a      	bne.n	8005298 <_svfiprintf_r+0x130>
 8005282:	7863      	ldrb	r3, [r4, #1]
 8005284:	2b2a      	cmp	r3, #42	@ 0x2a
 8005286:	d132      	bne.n	80052ee <_svfiprintf_r+0x186>
 8005288:	9b03      	ldr	r3, [sp, #12]
 800528a:	1d1a      	adds	r2, r3, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	9203      	str	r2, [sp, #12]
 8005290:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005294:	3402      	adds	r4, #2
 8005296:	9305      	str	r3, [sp, #20]
 8005298:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800535c <_svfiprintf_r+0x1f4>
 800529c:	7821      	ldrb	r1, [r4, #0]
 800529e:	2203      	movs	r2, #3
 80052a0:	4650      	mov	r0, sl
 80052a2:	f7fa ff95 	bl	80001d0 <memchr>
 80052a6:	b138      	cbz	r0, 80052b8 <_svfiprintf_r+0x150>
 80052a8:	9b04      	ldr	r3, [sp, #16]
 80052aa:	eba0 000a 	sub.w	r0, r0, sl
 80052ae:	2240      	movs	r2, #64	@ 0x40
 80052b0:	4082      	lsls	r2, r0
 80052b2:	4313      	orrs	r3, r2
 80052b4:	3401      	adds	r4, #1
 80052b6:	9304      	str	r3, [sp, #16]
 80052b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052bc:	4824      	ldr	r0, [pc, #144]	@ (8005350 <_svfiprintf_r+0x1e8>)
 80052be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052c2:	2206      	movs	r2, #6
 80052c4:	f7fa ff84 	bl	80001d0 <memchr>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d036      	beq.n	800533a <_svfiprintf_r+0x1d2>
 80052cc:	4b21      	ldr	r3, [pc, #132]	@ (8005354 <_svfiprintf_r+0x1ec>)
 80052ce:	bb1b      	cbnz	r3, 8005318 <_svfiprintf_r+0x1b0>
 80052d0:	9b03      	ldr	r3, [sp, #12]
 80052d2:	3307      	adds	r3, #7
 80052d4:	f023 0307 	bic.w	r3, r3, #7
 80052d8:	3308      	adds	r3, #8
 80052da:	9303      	str	r3, [sp, #12]
 80052dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052de:	4433      	add	r3, r6
 80052e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80052e2:	e76a      	b.n	80051ba <_svfiprintf_r+0x52>
 80052e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80052e8:	460c      	mov	r4, r1
 80052ea:	2001      	movs	r0, #1
 80052ec:	e7a8      	b.n	8005240 <_svfiprintf_r+0xd8>
 80052ee:	2300      	movs	r3, #0
 80052f0:	3401      	adds	r4, #1
 80052f2:	9305      	str	r3, [sp, #20]
 80052f4:	4619      	mov	r1, r3
 80052f6:	f04f 0c0a 	mov.w	ip, #10
 80052fa:	4620      	mov	r0, r4
 80052fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005300:	3a30      	subs	r2, #48	@ 0x30
 8005302:	2a09      	cmp	r2, #9
 8005304:	d903      	bls.n	800530e <_svfiprintf_r+0x1a6>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0c6      	beq.n	8005298 <_svfiprintf_r+0x130>
 800530a:	9105      	str	r1, [sp, #20]
 800530c:	e7c4      	b.n	8005298 <_svfiprintf_r+0x130>
 800530e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005312:	4604      	mov	r4, r0
 8005314:	2301      	movs	r3, #1
 8005316:	e7f0      	b.n	80052fa <_svfiprintf_r+0x192>
 8005318:	ab03      	add	r3, sp, #12
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	462a      	mov	r2, r5
 800531e:	4b0e      	ldr	r3, [pc, #56]	@ (8005358 <_svfiprintf_r+0x1f0>)
 8005320:	a904      	add	r1, sp, #16
 8005322:	4638      	mov	r0, r7
 8005324:	f3af 8000 	nop.w
 8005328:	1c42      	adds	r2, r0, #1
 800532a:	4606      	mov	r6, r0
 800532c:	d1d6      	bne.n	80052dc <_svfiprintf_r+0x174>
 800532e:	89ab      	ldrh	r3, [r5, #12]
 8005330:	065b      	lsls	r3, r3, #25
 8005332:	f53f af2d 	bmi.w	8005190 <_svfiprintf_r+0x28>
 8005336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005338:	e72c      	b.n	8005194 <_svfiprintf_r+0x2c>
 800533a:	ab03      	add	r3, sp, #12
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	462a      	mov	r2, r5
 8005340:	4b05      	ldr	r3, [pc, #20]	@ (8005358 <_svfiprintf_r+0x1f0>)
 8005342:	a904      	add	r1, sp, #16
 8005344:	4638      	mov	r0, r7
 8005346:	f000 f879 	bl	800543c <_printf_i>
 800534a:	e7ed      	b.n	8005328 <_svfiprintf_r+0x1c0>
 800534c:	080057bc 	.word	0x080057bc
 8005350:	080057c6 	.word	0x080057c6
 8005354:	00000000 	.word	0x00000000
 8005358:	080050b1 	.word	0x080050b1
 800535c:	080057c2 	.word	0x080057c2

08005360 <_printf_common>:
 8005360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005364:	4616      	mov	r6, r2
 8005366:	4698      	mov	r8, r3
 8005368:	688a      	ldr	r2, [r1, #8]
 800536a:	690b      	ldr	r3, [r1, #16]
 800536c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005370:	4293      	cmp	r3, r2
 8005372:	bfb8      	it	lt
 8005374:	4613      	movlt	r3, r2
 8005376:	6033      	str	r3, [r6, #0]
 8005378:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800537c:	4607      	mov	r7, r0
 800537e:	460c      	mov	r4, r1
 8005380:	b10a      	cbz	r2, 8005386 <_printf_common+0x26>
 8005382:	3301      	adds	r3, #1
 8005384:	6033      	str	r3, [r6, #0]
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	0699      	lsls	r1, r3, #26
 800538a:	bf42      	ittt	mi
 800538c:	6833      	ldrmi	r3, [r6, #0]
 800538e:	3302      	addmi	r3, #2
 8005390:	6033      	strmi	r3, [r6, #0]
 8005392:	6825      	ldr	r5, [r4, #0]
 8005394:	f015 0506 	ands.w	r5, r5, #6
 8005398:	d106      	bne.n	80053a8 <_printf_common+0x48>
 800539a:	f104 0a19 	add.w	sl, r4, #25
 800539e:	68e3      	ldr	r3, [r4, #12]
 80053a0:	6832      	ldr	r2, [r6, #0]
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	42ab      	cmp	r3, r5
 80053a6:	dc26      	bgt.n	80053f6 <_printf_common+0x96>
 80053a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053ac:	6822      	ldr	r2, [r4, #0]
 80053ae:	3b00      	subs	r3, #0
 80053b0:	bf18      	it	ne
 80053b2:	2301      	movne	r3, #1
 80053b4:	0692      	lsls	r2, r2, #26
 80053b6:	d42b      	bmi.n	8005410 <_printf_common+0xb0>
 80053b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053bc:	4641      	mov	r1, r8
 80053be:	4638      	mov	r0, r7
 80053c0:	47c8      	blx	r9
 80053c2:	3001      	adds	r0, #1
 80053c4:	d01e      	beq.n	8005404 <_printf_common+0xa4>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	6922      	ldr	r2, [r4, #16]
 80053ca:	f003 0306 	and.w	r3, r3, #6
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	bf02      	ittt	eq
 80053d2:	68e5      	ldreq	r5, [r4, #12]
 80053d4:	6833      	ldreq	r3, [r6, #0]
 80053d6:	1aed      	subeq	r5, r5, r3
 80053d8:	68a3      	ldr	r3, [r4, #8]
 80053da:	bf0c      	ite	eq
 80053dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053e0:	2500      	movne	r5, #0
 80053e2:	4293      	cmp	r3, r2
 80053e4:	bfc4      	itt	gt
 80053e6:	1a9b      	subgt	r3, r3, r2
 80053e8:	18ed      	addgt	r5, r5, r3
 80053ea:	2600      	movs	r6, #0
 80053ec:	341a      	adds	r4, #26
 80053ee:	42b5      	cmp	r5, r6
 80053f0:	d11a      	bne.n	8005428 <_printf_common+0xc8>
 80053f2:	2000      	movs	r0, #0
 80053f4:	e008      	b.n	8005408 <_printf_common+0xa8>
 80053f6:	2301      	movs	r3, #1
 80053f8:	4652      	mov	r2, sl
 80053fa:	4641      	mov	r1, r8
 80053fc:	4638      	mov	r0, r7
 80053fe:	47c8      	blx	r9
 8005400:	3001      	adds	r0, #1
 8005402:	d103      	bne.n	800540c <_printf_common+0xac>
 8005404:	f04f 30ff 	mov.w	r0, #4294967295
 8005408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540c:	3501      	adds	r5, #1
 800540e:	e7c6      	b.n	800539e <_printf_common+0x3e>
 8005410:	18e1      	adds	r1, r4, r3
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	2030      	movs	r0, #48	@ 0x30
 8005416:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800541a:	4422      	add	r2, r4
 800541c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005420:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005424:	3302      	adds	r3, #2
 8005426:	e7c7      	b.n	80053b8 <_printf_common+0x58>
 8005428:	2301      	movs	r3, #1
 800542a:	4622      	mov	r2, r4
 800542c:	4641      	mov	r1, r8
 800542e:	4638      	mov	r0, r7
 8005430:	47c8      	blx	r9
 8005432:	3001      	adds	r0, #1
 8005434:	d0e6      	beq.n	8005404 <_printf_common+0xa4>
 8005436:	3601      	adds	r6, #1
 8005438:	e7d9      	b.n	80053ee <_printf_common+0x8e>
	...

0800543c <_printf_i>:
 800543c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	7e0f      	ldrb	r7, [r1, #24]
 8005442:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005444:	2f78      	cmp	r7, #120	@ 0x78
 8005446:	4691      	mov	r9, r2
 8005448:	4680      	mov	r8, r0
 800544a:	460c      	mov	r4, r1
 800544c:	469a      	mov	sl, r3
 800544e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005452:	d807      	bhi.n	8005464 <_printf_i+0x28>
 8005454:	2f62      	cmp	r7, #98	@ 0x62
 8005456:	d80a      	bhi.n	800546e <_printf_i+0x32>
 8005458:	2f00      	cmp	r7, #0
 800545a:	f000 80d2 	beq.w	8005602 <_printf_i+0x1c6>
 800545e:	2f58      	cmp	r7, #88	@ 0x58
 8005460:	f000 80b9 	beq.w	80055d6 <_printf_i+0x19a>
 8005464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005468:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800546c:	e03a      	b.n	80054e4 <_printf_i+0xa8>
 800546e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005472:	2b15      	cmp	r3, #21
 8005474:	d8f6      	bhi.n	8005464 <_printf_i+0x28>
 8005476:	a101      	add	r1, pc, #4	@ (adr r1, 800547c <_printf_i+0x40>)
 8005478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800547c:	080054d5 	.word	0x080054d5
 8005480:	080054e9 	.word	0x080054e9
 8005484:	08005465 	.word	0x08005465
 8005488:	08005465 	.word	0x08005465
 800548c:	08005465 	.word	0x08005465
 8005490:	08005465 	.word	0x08005465
 8005494:	080054e9 	.word	0x080054e9
 8005498:	08005465 	.word	0x08005465
 800549c:	08005465 	.word	0x08005465
 80054a0:	08005465 	.word	0x08005465
 80054a4:	08005465 	.word	0x08005465
 80054a8:	080055e9 	.word	0x080055e9
 80054ac:	08005513 	.word	0x08005513
 80054b0:	080055a3 	.word	0x080055a3
 80054b4:	08005465 	.word	0x08005465
 80054b8:	08005465 	.word	0x08005465
 80054bc:	0800560b 	.word	0x0800560b
 80054c0:	08005465 	.word	0x08005465
 80054c4:	08005513 	.word	0x08005513
 80054c8:	08005465 	.word	0x08005465
 80054cc:	08005465 	.word	0x08005465
 80054d0:	080055ab 	.word	0x080055ab
 80054d4:	6833      	ldr	r3, [r6, #0]
 80054d6:	1d1a      	adds	r2, r3, #4
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6032      	str	r2, [r6, #0]
 80054dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054e4:	2301      	movs	r3, #1
 80054e6:	e09d      	b.n	8005624 <_printf_i+0x1e8>
 80054e8:	6833      	ldr	r3, [r6, #0]
 80054ea:	6820      	ldr	r0, [r4, #0]
 80054ec:	1d19      	adds	r1, r3, #4
 80054ee:	6031      	str	r1, [r6, #0]
 80054f0:	0606      	lsls	r6, r0, #24
 80054f2:	d501      	bpl.n	80054f8 <_printf_i+0xbc>
 80054f4:	681d      	ldr	r5, [r3, #0]
 80054f6:	e003      	b.n	8005500 <_printf_i+0xc4>
 80054f8:	0645      	lsls	r5, r0, #25
 80054fa:	d5fb      	bpl.n	80054f4 <_printf_i+0xb8>
 80054fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005500:	2d00      	cmp	r5, #0
 8005502:	da03      	bge.n	800550c <_printf_i+0xd0>
 8005504:	232d      	movs	r3, #45	@ 0x2d
 8005506:	426d      	negs	r5, r5
 8005508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800550c:	4859      	ldr	r0, [pc, #356]	@ (8005674 <_printf_i+0x238>)
 800550e:	230a      	movs	r3, #10
 8005510:	e011      	b.n	8005536 <_printf_i+0xfa>
 8005512:	6821      	ldr	r1, [r4, #0]
 8005514:	6833      	ldr	r3, [r6, #0]
 8005516:	0608      	lsls	r0, r1, #24
 8005518:	f853 5b04 	ldr.w	r5, [r3], #4
 800551c:	d402      	bmi.n	8005524 <_printf_i+0xe8>
 800551e:	0649      	lsls	r1, r1, #25
 8005520:	bf48      	it	mi
 8005522:	b2ad      	uxthmi	r5, r5
 8005524:	2f6f      	cmp	r7, #111	@ 0x6f
 8005526:	4853      	ldr	r0, [pc, #332]	@ (8005674 <_printf_i+0x238>)
 8005528:	6033      	str	r3, [r6, #0]
 800552a:	bf14      	ite	ne
 800552c:	230a      	movne	r3, #10
 800552e:	2308      	moveq	r3, #8
 8005530:	2100      	movs	r1, #0
 8005532:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005536:	6866      	ldr	r6, [r4, #4]
 8005538:	60a6      	str	r6, [r4, #8]
 800553a:	2e00      	cmp	r6, #0
 800553c:	bfa2      	ittt	ge
 800553e:	6821      	ldrge	r1, [r4, #0]
 8005540:	f021 0104 	bicge.w	r1, r1, #4
 8005544:	6021      	strge	r1, [r4, #0]
 8005546:	b90d      	cbnz	r5, 800554c <_printf_i+0x110>
 8005548:	2e00      	cmp	r6, #0
 800554a:	d04b      	beq.n	80055e4 <_printf_i+0x1a8>
 800554c:	4616      	mov	r6, r2
 800554e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005552:	fb03 5711 	mls	r7, r3, r1, r5
 8005556:	5dc7      	ldrb	r7, [r0, r7]
 8005558:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800555c:	462f      	mov	r7, r5
 800555e:	42bb      	cmp	r3, r7
 8005560:	460d      	mov	r5, r1
 8005562:	d9f4      	bls.n	800554e <_printf_i+0x112>
 8005564:	2b08      	cmp	r3, #8
 8005566:	d10b      	bne.n	8005580 <_printf_i+0x144>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	07df      	lsls	r7, r3, #31
 800556c:	d508      	bpl.n	8005580 <_printf_i+0x144>
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	6861      	ldr	r1, [r4, #4]
 8005572:	4299      	cmp	r1, r3
 8005574:	bfde      	ittt	le
 8005576:	2330      	movle	r3, #48	@ 0x30
 8005578:	f806 3c01 	strble.w	r3, [r6, #-1]
 800557c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005580:	1b92      	subs	r2, r2, r6
 8005582:	6122      	str	r2, [r4, #16]
 8005584:	f8cd a000 	str.w	sl, [sp]
 8005588:	464b      	mov	r3, r9
 800558a:	aa03      	add	r2, sp, #12
 800558c:	4621      	mov	r1, r4
 800558e:	4640      	mov	r0, r8
 8005590:	f7ff fee6 	bl	8005360 <_printf_common>
 8005594:	3001      	adds	r0, #1
 8005596:	d14a      	bne.n	800562e <_printf_i+0x1f2>
 8005598:	f04f 30ff 	mov.w	r0, #4294967295
 800559c:	b004      	add	sp, #16
 800559e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	f043 0320 	orr.w	r3, r3, #32
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	4833      	ldr	r0, [pc, #204]	@ (8005678 <_printf_i+0x23c>)
 80055ac:	2778      	movs	r7, #120	@ 0x78
 80055ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	6831      	ldr	r1, [r6, #0]
 80055b6:	061f      	lsls	r7, r3, #24
 80055b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80055bc:	d402      	bmi.n	80055c4 <_printf_i+0x188>
 80055be:	065f      	lsls	r7, r3, #25
 80055c0:	bf48      	it	mi
 80055c2:	b2ad      	uxthmi	r5, r5
 80055c4:	6031      	str	r1, [r6, #0]
 80055c6:	07d9      	lsls	r1, r3, #31
 80055c8:	bf44      	itt	mi
 80055ca:	f043 0320 	orrmi.w	r3, r3, #32
 80055ce:	6023      	strmi	r3, [r4, #0]
 80055d0:	b11d      	cbz	r5, 80055da <_printf_i+0x19e>
 80055d2:	2310      	movs	r3, #16
 80055d4:	e7ac      	b.n	8005530 <_printf_i+0xf4>
 80055d6:	4827      	ldr	r0, [pc, #156]	@ (8005674 <_printf_i+0x238>)
 80055d8:	e7e9      	b.n	80055ae <_printf_i+0x172>
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	f023 0320 	bic.w	r3, r3, #32
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	e7f6      	b.n	80055d2 <_printf_i+0x196>
 80055e4:	4616      	mov	r6, r2
 80055e6:	e7bd      	b.n	8005564 <_printf_i+0x128>
 80055e8:	6833      	ldr	r3, [r6, #0]
 80055ea:	6825      	ldr	r5, [r4, #0]
 80055ec:	6961      	ldr	r1, [r4, #20]
 80055ee:	1d18      	adds	r0, r3, #4
 80055f0:	6030      	str	r0, [r6, #0]
 80055f2:	062e      	lsls	r6, r5, #24
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	d501      	bpl.n	80055fc <_printf_i+0x1c0>
 80055f8:	6019      	str	r1, [r3, #0]
 80055fa:	e002      	b.n	8005602 <_printf_i+0x1c6>
 80055fc:	0668      	lsls	r0, r5, #25
 80055fe:	d5fb      	bpl.n	80055f8 <_printf_i+0x1bc>
 8005600:	8019      	strh	r1, [r3, #0]
 8005602:	2300      	movs	r3, #0
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	4616      	mov	r6, r2
 8005608:	e7bc      	b.n	8005584 <_printf_i+0x148>
 800560a:	6833      	ldr	r3, [r6, #0]
 800560c:	1d1a      	adds	r2, r3, #4
 800560e:	6032      	str	r2, [r6, #0]
 8005610:	681e      	ldr	r6, [r3, #0]
 8005612:	6862      	ldr	r2, [r4, #4]
 8005614:	2100      	movs	r1, #0
 8005616:	4630      	mov	r0, r6
 8005618:	f7fa fdda 	bl	80001d0 <memchr>
 800561c:	b108      	cbz	r0, 8005622 <_printf_i+0x1e6>
 800561e:	1b80      	subs	r0, r0, r6
 8005620:	6060      	str	r0, [r4, #4]
 8005622:	6863      	ldr	r3, [r4, #4]
 8005624:	6123      	str	r3, [r4, #16]
 8005626:	2300      	movs	r3, #0
 8005628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800562c:	e7aa      	b.n	8005584 <_printf_i+0x148>
 800562e:	6923      	ldr	r3, [r4, #16]
 8005630:	4632      	mov	r2, r6
 8005632:	4649      	mov	r1, r9
 8005634:	4640      	mov	r0, r8
 8005636:	47d0      	blx	sl
 8005638:	3001      	adds	r0, #1
 800563a:	d0ad      	beq.n	8005598 <_printf_i+0x15c>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	079b      	lsls	r3, r3, #30
 8005640:	d413      	bmi.n	800566a <_printf_i+0x22e>
 8005642:	68e0      	ldr	r0, [r4, #12]
 8005644:	9b03      	ldr	r3, [sp, #12]
 8005646:	4298      	cmp	r0, r3
 8005648:	bfb8      	it	lt
 800564a:	4618      	movlt	r0, r3
 800564c:	e7a6      	b.n	800559c <_printf_i+0x160>
 800564e:	2301      	movs	r3, #1
 8005650:	4632      	mov	r2, r6
 8005652:	4649      	mov	r1, r9
 8005654:	4640      	mov	r0, r8
 8005656:	47d0      	blx	sl
 8005658:	3001      	adds	r0, #1
 800565a:	d09d      	beq.n	8005598 <_printf_i+0x15c>
 800565c:	3501      	adds	r5, #1
 800565e:	68e3      	ldr	r3, [r4, #12]
 8005660:	9903      	ldr	r1, [sp, #12]
 8005662:	1a5b      	subs	r3, r3, r1
 8005664:	42ab      	cmp	r3, r5
 8005666:	dcf2      	bgt.n	800564e <_printf_i+0x212>
 8005668:	e7eb      	b.n	8005642 <_printf_i+0x206>
 800566a:	2500      	movs	r5, #0
 800566c:	f104 0619 	add.w	r6, r4, #25
 8005670:	e7f5      	b.n	800565e <_printf_i+0x222>
 8005672:	bf00      	nop
 8005674:	080057cd 	.word	0x080057cd
 8005678:	080057de 	.word	0x080057de

0800567c <memmove>:
 800567c:	4288      	cmp	r0, r1
 800567e:	b510      	push	{r4, lr}
 8005680:	eb01 0402 	add.w	r4, r1, r2
 8005684:	d902      	bls.n	800568c <memmove+0x10>
 8005686:	4284      	cmp	r4, r0
 8005688:	4623      	mov	r3, r4
 800568a:	d807      	bhi.n	800569c <memmove+0x20>
 800568c:	1e43      	subs	r3, r0, #1
 800568e:	42a1      	cmp	r1, r4
 8005690:	d008      	beq.n	80056a4 <memmove+0x28>
 8005692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800569a:	e7f8      	b.n	800568e <memmove+0x12>
 800569c:	4402      	add	r2, r0
 800569e:	4601      	mov	r1, r0
 80056a0:	428a      	cmp	r2, r1
 80056a2:	d100      	bne.n	80056a6 <memmove+0x2a>
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056ae:	e7f7      	b.n	80056a0 <memmove+0x24>

080056b0 <_sbrk_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d06      	ldr	r5, [pc, #24]	@ (80056cc <_sbrk_r+0x1c>)
 80056b4:	2300      	movs	r3, #0
 80056b6:	4604      	mov	r4, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	f7fb fabe 	bl	8000c3c <_sbrk>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d102      	bne.n	80056ca <_sbrk_r+0x1a>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	b103      	cbz	r3, 80056ca <_sbrk_r+0x1a>
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	20000348 	.word	0x20000348

080056d0 <memcpy>:
 80056d0:	440a      	add	r2, r1
 80056d2:	4291      	cmp	r1, r2
 80056d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056d8:	d100      	bne.n	80056dc <memcpy+0xc>
 80056da:	4770      	bx	lr
 80056dc:	b510      	push	{r4, lr}
 80056de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056e6:	4291      	cmp	r1, r2
 80056e8:	d1f9      	bne.n	80056de <memcpy+0xe>
 80056ea:	bd10      	pop	{r4, pc}

080056ec <_realloc_r>:
 80056ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f0:	4680      	mov	r8, r0
 80056f2:	4615      	mov	r5, r2
 80056f4:	460c      	mov	r4, r1
 80056f6:	b921      	cbnz	r1, 8005702 <_realloc_r+0x16>
 80056f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056fc:	4611      	mov	r1, r2
 80056fe:	f7ff bc4b 	b.w	8004f98 <_malloc_r>
 8005702:	b92a      	cbnz	r2, 8005710 <_realloc_r+0x24>
 8005704:	f7ff fbdc 	bl	8004ec0 <_free_r>
 8005708:	2400      	movs	r4, #0
 800570a:	4620      	mov	r0, r4
 800570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005710:	f000 f81a 	bl	8005748 <_malloc_usable_size_r>
 8005714:	4285      	cmp	r5, r0
 8005716:	4606      	mov	r6, r0
 8005718:	d802      	bhi.n	8005720 <_realloc_r+0x34>
 800571a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800571e:	d8f4      	bhi.n	800570a <_realloc_r+0x1e>
 8005720:	4629      	mov	r1, r5
 8005722:	4640      	mov	r0, r8
 8005724:	f7ff fc38 	bl	8004f98 <_malloc_r>
 8005728:	4607      	mov	r7, r0
 800572a:	2800      	cmp	r0, #0
 800572c:	d0ec      	beq.n	8005708 <_realloc_r+0x1c>
 800572e:	42b5      	cmp	r5, r6
 8005730:	462a      	mov	r2, r5
 8005732:	4621      	mov	r1, r4
 8005734:	bf28      	it	cs
 8005736:	4632      	movcs	r2, r6
 8005738:	f7ff ffca 	bl	80056d0 <memcpy>
 800573c:	4621      	mov	r1, r4
 800573e:	4640      	mov	r0, r8
 8005740:	f7ff fbbe 	bl	8004ec0 <_free_r>
 8005744:	463c      	mov	r4, r7
 8005746:	e7e0      	b.n	800570a <_realloc_r+0x1e>

08005748 <_malloc_usable_size_r>:
 8005748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800574c:	1f18      	subs	r0, r3, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	bfbc      	itt	lt
 8005752:	580b      	ldrlt	r3, [r1, r0]
 8005754:	18c0      	addlt	r0, r0, r3
 8005756:	4770      	bx	lr

08005758 <_init>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr

08005764 <_fini>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr
