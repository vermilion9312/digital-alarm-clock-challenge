
Challenge 3. Stopwatch - Display Time on CLCD and Save and Display Lap Times.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004328  08004328  00005328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004340  08004340  000060ac  2**0
                  CONTENTS
  4 .ARM          00000008  08004340  08004340  00005340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004348  08004348  000060ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004348  08004348  00005348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800434c  0800434c  0000534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08004350  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000060ac  2**0
                  CONTENTS
 10 .bss          000000b8  200000ac  200000ac  000060ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000164  20000164  000060ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   000106c5  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af1  00000000  00000000  000167a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  00019298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b8e  00000000  00000000  0001a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002277d  00000000  00000000  0001ad26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a62  00000000  00000000  0003d4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc5ba  00000000  00000000  00050f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d4bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cfc  00000000  00000000  0011d504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  00121200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ac 	.word	0x200000ac
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004310 	.word	0x08004310

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b0 	.word	0x200000b0
 80001c4:	08004310 	.word	0x08004310

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fcc5 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f81b 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f90f 	bl	80006e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004ca:	f000 f8e3 	bl	8000694 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80004ce:	f000 f8ab 	bl	8000628 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004d2:	f000 f87d 	bl	80005d0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80004d6:	4808      	ldr	r0, [pc, #32]	@ (80004f8 <main+0x40>)
 80004d8:	f001 fdc0 	bl	800205c <HAL_TIM_Base_Start_IT>
  _7SEG_GPIO_Init();
 80004dc:	f002 fff6 	bl	80034cc <_7SEG_GPIO_Init>
  CLCD_GPIO_Init();
 80004e0:	f000 fb78 	bl	8000bd4 <CLCD_GPIO_Init>
  CLCD_Init();
 80004e4:	f000 fc90 	bl	8000e08 <CLCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  DigitalClock* clock = GET_INSTANCE(clock);
 80004e8:	f003 fe6c 	bl	80041c4 <get_clock>
 80004ec:	6078      	str	r0, [r7, #4]

  while (1)
  {

	  clock->operate(clock);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	4798      	blx	r3
 80004f6:	e7fa      	b.n	80004ee <main+0x36>
 80004f8:	200000c8 	.word	0x200000c8

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	@ 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	@ 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f003 fed4 	bl	80042b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000528:	4a27      	ldr	r2, [pc, #156]	@ (80005c8 <SystemClock_Config+0xcc>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000530:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b22      	ldr	r3, [pc, #136]	@ (80005cc <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a21      	ldr	r2, [pc, #132]	@ (80005cc <SystemClock_Config+0xd0>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	@ (80005cc <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000560:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000570:	23a8      	movs	r3, #168	@ 0xa8
 8000572:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000578:	2304      	movs	r3, #4
 800057a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f001 f883 	bl	800168c <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800058c:	f000 f9ef 	bl	800096e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2105      	movs	r1, #5
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fae4 	bl	8001b7c <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ba:	f000 f9d8 	bl	800096e <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	@ 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2100      	movs	r1, #0
 80005d8:	2036      	movs	r0, #54	@ 0x36
 80005da:	f000 fda8 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005de:	2036      	movs	r0, #54	@ 0x36
 80005e0:	f000 fdc1 	bl	8001166 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	2027      	movs	r0, #39	@ 0x27
 80005ea:	f000 fda0 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80005ee:	2027      	movs	r0, #39	@ 0x27
 80005f0:	f000 fdb9 	bl	8001166 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	2009      	movs	r0, #9
 80005fa:	f000 fd98 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80005fe:	2009      	movs	r0, #9
 8000600:	f000 fdb1 	bl	8001166 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	200a      	movs	r0, #10
 800060a:	f000 fd90 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800060e:	200a      	movs	r0, #10
 8000610:	f000 fda9 	bl	8001166 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	2028      	movs	r0, #40	@ 0x28
 800061a:	f000 fd88 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800061e:	2028      	movs	r0, #40	@ 0x28
 8000620:	f000 fda1 	bl	8001166 <HAL_NVIC_EnableIRQ>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000636:	4b15      	ldr	r3, [pc, #84]	@ (800068c <MX_TIM6_Init+0x64>)
 8000638:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <MX_TIM6_Init+0x68>)
 800063a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84 - 1;
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_TIM6_Init+0x64>)
 800063e:	2253      	movs	r2, #83	@ 0x53
 8000640:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_TIM6_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8000648:	4b10      	ldr	r3, [pc, #64]	@ (800068c <MX_TIM6_Init+0x64>)
 800064a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800064e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_TIM6_Init+0x64>)
 8000652:	2280      	movs	r2, #128	@ 0x80
 8000654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000656:	480d      	ldr	r0, [pc, #52]	@ (800068c <MX_TIM6_Init+0x64>)
 8000658:	f001 fcb0 	bl	8001fbc <HAL_TIM_Base_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000662:	f000 f984 	bl	800096e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	@ (800068c <MX_TIM6_Init+0x64>)
 8000674:	f001 ff26 	bl	80024c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800067e:	f000 f976 	bl	800096e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000c8 	.word	0x200000c8
 8000690:	40001000 	.word	0x40001000

08000694 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_USART3_UART_Init+0x4c>)
 800069a:	4a12      	ldr	r2, [pc, #72]	@ (80006e4 <MX_USART3_UART_Init+0x50>)
 800069c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006cc:	f001 ff8a 	bl	80025e4 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006d6:	f000 f94a 	bl	800096e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000110 	.word	0x20000110
 80006e4:	40004800 	.word	0x40004800

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	@ 0x30
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	4b66      	ldr	r3, [pc, #408]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a65      	ldr	r2, [pc, #404]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b63      	ldr	r3, [pc, #396]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	4b5f      	ldr	r3, [pc, #380]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a5e      	ldr	r2, [pc, #376]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b5c      	ldr	r3, [pc, #368]	@ (800089c <MX_GPIO_Init+0x1b4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b58      	ldr	r3, [pc, #352]	@ (800089c <MX_GPIO_Init+0x1b4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a57      	ldr	r2, [pc, #348]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b55      	ldr	r3, [pc, #340]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b51      	ldr	r3, [pc, #324]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a50      	ldr	r2, [pc, #320]	@ (800089c <MX_GPIO_Init+0x1b4>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b4e      	ldr	r3, [pc, #312]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b4a      	ldr	r3, [pc, #296]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a49      	ldr	r2, [pc, #292]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b47      	ldr	r3, [pc, #284]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b43      	ldr	r3, [pc, #268]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a42      	ldr	r2, [pc, #264]	@ (800089c <MX_GPIO_Init+0x1b4>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b40      	ldr	r3, [pc, #256]	@ (800089c <MX_GPIO_Init+0x1b4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CLCD_3_Pin|CLCD_3E4_Pin|CLCD_4_Pin|CLCD_5_Pin
 80007a6:	2200      	movs	r2, #0
 80007a8:	21f7      	movs	r1, #247	@ 0xf7
 80007aa:	483d      	ldr	r0, [pc, #244]	@ (80008a0 <MX_GPIO_Init+0x1b8>)
 80007ac:	f000 ff3c 	bl	8001628 <HAL_GPIO_WritePin>
                          |CLCD_6_Pin|CLCD_1_Pin|CLCD_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RIGHT_BLUE_Pin|RIGHT_GREEN_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2121      	movs	r1, #33	@ 0x21
 80007b4:	483b      	ldr	r0, [pc, #236]	@ (80008a4 <MX_GPIO_Init+0x1bc>)
 80007b6:	f000 ff37 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEFT_RED_Pin|LEFT_GREEN_Pin|LEFT_BLUE_Pin, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80007c0:	4839      	ldr	r0, [pc, #228]	@ (80008a8 <MX_GPIO_Init+0x1c0>)
 80007c2:	f000 ff31 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RIGHT_RED_GPIO_Port, RIGHT_RED_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2140      	movs	r1, #64	@ 0x40
 80007ca:	4838      	ldr	r0, [pc, #224]	@ (80008ac <MX_GPIO_Init+0x1c4>)
 80007cc:	f000 ff2c 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLCD_3_Pin CLCD_3E4_Pin CLCD_4_Pin CLCD_5_Pin
                           CLCD_6_Pin CLCD_1_Pin CLCD_2_Pin */
  GPIO_InitStruct.Pin = CLCD_3_Pin|CLCD_3E4_Pin|CLCD_4_Pin|CLCD_5_Pin
 80007d0:	23f7      	movs	r3, #247	@ 0xf7
 80007d2:	61fb      	str	r3, [r7, #28]
                          |CLCD_6_Pin|CLCD_1_Pin|CLCD_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	482e      	ldr	r0, [pc, #184]	@ (80008a0 <MX_GPIO_Init+0x1b8>)
 80007e8:	f000 fd6a 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 80007ec:	2308      	movs	r3, #8
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007f0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4827      	ldr	r0, [pc, #156]	@ (80008a0 <MX_GPIO_Init+0x1b8>)
 8000802:	f000 fd5d 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin;
 8000806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800080c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_2_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4823      	ldr	r0, [pc, #140]	@ (80008ac <MX_GPIO_Init+0x1c4>)
 800081e:	f000 fd4f 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_BLUE_Pin RIGHT_GREEN_Pin */
  GPIO_InitStruct.Pin = RIGHT_BLUE_Pin|RIGHT_GREEN_Pin;
 8000822:	2321      	movs	r3, #33	@ 0x21
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082a:	2301      	movs	r3, #1
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082e:	2302      	movs	r3, #2
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	481a      	ldr	r0, [pc, #104]	@ (80008a4 <MX_GPIO_Init+0x1bc>)
 800083a:	f000 fd41 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_3_Pin;
 800083e:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000844:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4814      	ldr	r0, [pc, #80]	@ (80008a8 <MX_GPIO_Init+0x1c0>)
 8000856:	f000 fd33 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_RED_Pin LEFT_GREEN_Pin LEFT_BLUE_Pin */
  GPIO_InitStruct.Pin = LEFT_RED_Pin|LEFT_GREEN_Pin|LEFT_BLUE_Pin;
 800085a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000864:	2301      	movs	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000868:	2302      	movs	r3, #2
 800086a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <MX_GPIO_Init+0x1c0>)
 8000874:	f000 fd24 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_RED_Pin */
  GPIO_InitStruct.Pin = RIGHT_RED_Pin;
 8000878:	2340      	movs	r3, #64	@ 0x40
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000880:	2301      	movs	r3, #1
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000884:	2302      	movs	r3, #2
 8000886:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4807      	ldr	r0, [pc, #28]	@ (80008ac <MX_GPIO_Init+0x1c4>)
 8000890:	f000 fd16 	bl	80012c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3730      	adds	r7, #48	@ 0x30
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40020400 	.word	0x40020400
 80008a8:	40020c00 	.word	0x40020c00
 80008ac:	40020800 	.word	0x40020800

080008b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	Uart* uart = GET_INSTANCE(uart);
 80008b8:	f003 fc54 	bl	8004164 <get_uart>
 80008bc:	60f8      	str	r0, [r7, #12]

	if (huart->Instance == USART3)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a05      	ldr	r2, [pc, #20]	@ (80008d8 <HAL_UART_RxCpltCallback+0x28>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d103      	bne.n	80008d0 <HAL_UART_RxCpltCallback+0x20>
	{
		uart->receive(uart);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	4798      	blx	r3
	}
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40004800 	.word	0x40004800

080008dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	Timer* timer = GET_INSTANCE(timer);
 80008e4:	f003 fc08 	bl	80040f8 <get_timer>
 80008e8:	60f8      	str	r0, [r7, #12]

	if (htim->Instance == TIM6)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d103      	bne.n	80008fc <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		timer->count_up(timer);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	4798      	blx	r3
	}
}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40001000 	.word	0x40001000

08000908 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	80fb      	strh	r3, [r7, #6]
	Button* button_1 = GET_INSTANCE(button_1);
 8000912:	f003 fca9 	bl	8004268 <get_button_1>
 8000916:	6178      	str	r0, [r7, #20]
	Button* button_2 = GET_INSTANCE(button_2);
 8000918:	f003 fcb0 	bl	800427c <get_button_2>
 800091c:	6138      	str	r0, [r7, #16]
	Button* button_3 = GET_INSTANCE(button_3);
 800091e:	f003 fcb7 	bl	8004290 <get_button_3>
 8000922:	60f8      	str	r0, [r7, #12]
	Button* button_4 = GET_INSTANCE(button_4);
 8000924:	f003 fcbe 	bl	80042a4 <get_button_4>
 8000928:	60b8      	str	r0, [r7, #8]

	if (GPIO_Pin == BUTTON_1_Pin) button_1->update(button_1);
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	2b08      	cmp	r3, #8
 800092e:	d103      	bne.n	8000938 <HAL_GPIO_EXTI_Callback+0x30>
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	6978      	ldr	r0, [r7, #20]
 8000936:	4798      	blx	r3
	if (GPIO_Pin == BUTTON_2_Pin) button_2->update(button_2);
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800093e:	d103      	bne.n	8000948 <HAL_GPIO_EXTI_Callback+0x40>
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	6938      	ldr	r0, [r7, #16]
 8000946:	4798      	blx	r3
	if (GPIO_Pin == BUTTON_3_Pin) button_3->update(button_3);
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	2b10      	cmp	r3, #16
 800094c:	d103      	bne.n	8000956 <HAL_GPIO_EXTI_Callback+0x4e>
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	4798      	blx	r3
	if (GPIO_Pin == BUTTON_4_Pin) button_4->update(button_4);
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800095c:	d103      	bne.n	8000966 <HAL_GPIO_EXTI_Callback+0x5e>
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	68b8      	ldr	r0, [r7, #8]
 8000964:	4798      	blx	r3
}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000972:	b672      	cpsid	i
}
 8000974:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000976:	bf00      	nop
 8000978:	e7fd      	b.n	8000976 <Error_Handler+0x8>
	...

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	4a0f      	ldr	r2, [pc, #60]	@ (80009c8 <HAL_MspInit+0x4c>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000990:	6453      	str	r3, [r2, #68]	@ 0x44
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <HAL_MspInit+0x4c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000a08 <HAL_TIM_Base_MspInit+0x3c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d10d      	bne.n	80009fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <HAL_TIM_Base_MspInit+0x40>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	4a09      	ldr	r2, [pc, #36]	@ (8000a0c <HAL_TIM_Base_MspInit+0x40>)
 80009e8:	f043 0310 	orr.w	r3, r3, #16
 80009ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ee:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <HAL_TIM_Base_MspInit+0x40>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40001000 	.word	0x40001000
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	@ (8000a94 <HAL_UART_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12c      	bne.n	8000a8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <HAL_UART_MspInit+0x88>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <HAL_UART_MspInit+0x88>)
 8000a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <HAL_UART_MspInit+0x88>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <HAL_UART_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a10      	ldr	r2, [pc, #64]	@ (8000a98 <HAL_UART_MspInit+0x88>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <HAL_UART_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <HAL_UART_MspInit+0x8c>)
 8000a88:	f000 fc1a 	bl	80012c0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	@ 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40004800 	.word	0x40004800
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af6:	f000 f9fb 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}

08000afe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8000b02:	2008      	movs	r0, #8
 8000b04:	f000 fdaa 	bl	800165c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_3_Pin);
 8000b10:	2010      	movs	r0, #16
 8000b12:	f000 fda3 	bl	800165c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <USART3_IRQHandler+0x10>)
 8000b22:	f001 fdd5 	bl	80026d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000110 	.word	0x20000110

08000b30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_4_Pin);
 8000b34:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000b38:	f000 fd90 	bl	800165c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8000b3c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000b40:	f000 fd8c 	bl	800165c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <TIM6_DAC_IRQHandler+0x10>)
 8000b4e:	f001 faf5 	bl	800213c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000c8 	.word	0x200000c8

08000b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b84:	f7ff ffea 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	@ (8000bc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bae:	f003 fb8b 	bl	80042c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb2:	f7ff fc81 	bl	80004b8 <main>
  bx  lr    
 8000bb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000bc4:	08004350 	.word	0x08004350
  ldr r2, =_sbss
 8000bc8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000bcc:	20000164 	.word	0x20000164

08000bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC_IRQHandler>
	...

08000bd4 <CLCD_GPIO_Init>:
 */

#include "CLCD.h"

void CLCD_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <CLCD_GPIO_Init+0x98>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a22      	ldr	r2, [pc, #136]	@ (8000c6c <CLCD_GPIO_Init+0x98>)
 8000be4:	f043 0310 	orr.w	r3, r3, #16
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <CLCD_GPIO_Init+0x98>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
	
	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4819      	ldr	r0, [pc, #100]	@ (8000c70 <CLCD_GPIO_Init+0x9c>)
 8000c0c:	f000 fb58 	bl	80012c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8000c10:	2302      	movs	r3, #2
 8000c12:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4815      	ldr	r0, [pc, #84]	@ (8000c70 <CLCD_GPIO_Init+0x9c>)
 8000c1a:	f000 fb51 	bl	80012c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4619      	mov	r1, r3
 8000c26:	4812      	ldr	r0, [pc, #72]	@ (8000c70 <CLCD_GPIO_Init+0x9c>)
 8000c28:	f000 fb4a 	bl	80012c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	480e      	ldr	r0, [pc, #56]	@ (8000c70 <CLCD_GPIO_Init+0x9c>)
 8000c36:	f000 fb43 	bl	80012c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 8000c3a:	2320      	movs	r3, #32
 8000c3c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	480b      	ldr	r0, [pc, #44]	@ (8000c70 <CLCD_GPIO_Init+0x9c>)
 8000c44:	f000 fb3c 	bl	80012c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 8000c48:	2340      	movs	r3, #64	@ 0x40
 8000c4a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <CLCD_GPIO_Init+0x9c>)
 8000c52:	f000 fb35 	bl	80012c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 8000c56:	2380      	movs	r3, #128	@ 0x80
 8000c58:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4804      	ldr	r0, [pc, #16]	@ (8000c70 <CLCD_GPIO_Init+0x9c>)
 8000c60:	f000 fb2e 	bl	80012c0 <HAL_GPIO_Init>
}
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40021000 	.word	0x40021000

08000c74 <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	da04      	bge.n	8000c90 <CLCD_Write_Instruction+0x1c>
 8000c86:	4b5f      	ldr	r3, [pc, #380]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c8e:	e003      	b.n	8000c98 <CLCD_Write_Instruction+0x24>
 8000c90:	4b5c      	ldr	r3, [pc, #368]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c98:	4a5a      	ldr	r2, [pc, #360]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000c9a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d004      	beq.n	8000cb0 <CLCD_Write_Instruction+0x3c>
 8000ca6:	4b57      	ldr	r3, [pc, #348]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cae:	e003      	b.n	8000cb8 <CLCD_Write_Instruction+0x44>
 8000cb0:	4b54      	ldr	r3, [pc, #336]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000cb8:	4a52      	ldr	r2, [pc, #328]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000cba:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 0320 	and.w	r3, r3, #32
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d004      	beq.n	8000cd0 <CLCD_Write_Instruction+0x5c>
 8000cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f043 0320 	orr.w	r3, r3, #32
 8000cce:	e003      	b.n	8000cd8 <CLCD_Write_Instruction+0x64>
 8000cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	f023 0320 	bic.w	r3, r3, #32
 8000cd8:	4a4a      	ldr	r2, [pc, #296]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000cda:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d004      	beq.n	8000cf0 <CLCD_Write_Instruction+0x7c>
 8000ce6:	4b47      	ldr	r3, [pc, #284]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	e003      	b.n	8000cf8 <CLCD_Write_Instruction+0x84>
 8000cf0:	4b44      	ldr	r3, [pc, #272]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	f023 0310 	bic.w	r3, r3, #16
 8000cf8:	4a42      	ldr	r2, [pc, #264]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000cfa:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 8000cfc:	4b41      	ldr	r3, [pc, #260]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	4a40      	ldr	r2, [pc, #256]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d02:	f023 0301 	bic.w	r3, r3, #1
 8000d06:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8000d08:	4b3e      	ldr	r3, [pc, #248]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	4a3d      	ldr	r2, [pc, #244]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d0e:	f023 0302 	bic.w	r3, r3, #2
 8000d12:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000d14:	4b3b      	ldr	r3, [pc, #236]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	4a3a      	ldr	r2, [pc, #232]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d1a:	f023 0304 	bic.w	r3, r3, #4
 8000d1e:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 8000d20:	4b38      	ldr	r3, [pc, #224]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	4a37      	ldr	r2, [pc, #220]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000d2c:	4b35      	ldr	r3, [pc, #212]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	4a34      	ldr	r2, [pc, #208]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d32:	f023 0304 	bic.w	r3, r3, #4
 8000d36:	6153      	str	r3, [r2, #20]
	
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d004      	beq.n	8000d4c <CLCD_Write_Instruction+0xd8>
 8000d42:	4b30      	ldr	r3, [pc, #192]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4a:	e003      	b.n	8000d54 <CLCD_Write_Instruction+0xe0>
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d54:	4a2b      	ldr	r2, [pc, #172]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d56:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d004      	beq.n	8000d6c <CLCD_Write_Instruction+0xf8>
 8000d62:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d6a:	e003      	b.n	8000d74 <CLCD_Write_Instruction+0x100>
 8000d6c:	4b25      	ldr	r3, [pc, #148]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d74:	4a23      	ldr	r2, [pc, #140]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d76:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d004      	beq.n	8000d8c <CLCD_Write_Instruction+0x118>
 8000d82:	4b20      	ldr	r3, [pc, #128]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f043 0320 	orr.w	r3, r3, #32
 8000d8a:	e003      	b.n	8000d94 <CLCD_Write_Instruction+0x120>
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	f023 0320 	bic.w	r3, r3, #32
 8000d94:	4a1b      	ldr	r2, [pc, #108]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000d96:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <CLCD_Write_Instruction+0x138>
 8000da2:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	e003      	b.n	8000db4 <CLCD_Write_Instruction+0x140>
 8000dac:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	f023 0310 	bic.w	r3, r3, #16
 8000db4:	4a13      	ldr	r2, [pc, #76]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000db6:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	4a11      	ldr	r2, [pc, #68]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000dbe:	f023 0301 	bic.w	r3, r3, #1
 8000dc2:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000dca:	f023 0302 	bic.w	r3, r3, #2
 8000dce:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000dd6:	f023 0304 	bic.w	r3, r3, #4
 8000dda:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <CLCD_Write_Instruction+0x190>)
 8000dee:	f023 0304 	bic.w	r3, r3, #4
 8000df2:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 f89b 	bl	8000f30 <HAL_Delay>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <CLCD_Init>:
	}
	while(str[++i]!='\0');
}

void CLCD_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000e0c:	2064      	movs	r0, #100	@ 0x64
 8000e0e:	f000 f88f 	bl	8000f30 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8000e12:	2028      	movs	r0, #40	@ 0x28
 8000e14:	f7ff ff2e 	bl	8000c74 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8000e18:	200a      	movs	r0, #10
 8000e1a:	f000 f889 	bl	8000f30 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8000e1e:	2028      	movs	r0, #40	@ 0x28
 8000e20:	f7ff ff28 	bl	8000c74 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8000e24:	200a      	movs	r0, #10
 8000e26:	f000 f883 	bl	8000f30 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8000e2a:	200c      	movs	r0, #12
 8000e2c:	f7ff ff22 	bl	8000c74 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 8000e30:	2006      	movs	r0, #6
 8000e32:	f7ff ff1f 	bl	8000c74 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 8000e36:	2002      	movs	r0, #2
 8000e38:	f7ff ff1c 	bl	8000c74 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff ff19 	bl	8000c74 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f7ff ff16 	bl	8000c74 <CLCD_Write_Instruction>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e50:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <HAL_Init+0x40>)
 8000e56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <HAL_Init+0x40>)
 8000e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	@ (8000e8c <HAL_Init+0x40>)
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f94f 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	200f      	movs	r0, #15
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fd7c 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023c00 	.word	0x40023c00

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f967 	bl	8001182 <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f92f 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	@ (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000158 	.word	0x20000158

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	@ (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000158 	.word	0x20000158

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db0b      	blt.n	8001006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	4907      	ldr	r1, [pc, #28]	@ (8001014 <__NVIC_EnableIRQ+0x38>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	@ (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	@ (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	@ 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	@ 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff29 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff3e 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff31 	bl	8000fdc <__NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffa2 	bl	80010d4 <SysTick_Config>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff feb6 	bl	8000f18 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d008      	beq.n	80011cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2280      	movs	r2, #128	@ 0x80
 80011be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e052      	b.n	8001272 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0216 	bic.w	r2, r2, #22
 80011da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d103      	bne.n	80011fc <HAL_DMA_Abort+0x62>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0208 	bic.w	r2, r2, #8
 800120a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0201 	bic.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121c:	e013      	b.n	8001246 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800121e:	f7ff fe7b 	bl	8000f18 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b05      	cmp	r3, #5
 800122a:	d90c      	bls.n	8001246 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2220      	movs	r2, #32
 8001230:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2203      	movs	r2, #3
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e015      	b.n	8001272 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1e4      	bne.n	800121e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001258:	223f      	movs	r2, #63	@ 0x3f
 800125a:	409a      	lsls	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d004      	beq.n	8001298 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2280      	movs	r2, #128	@ 0x80
 8001292:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e00c      	b.n	80012b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2205      	movs	r2, #5
 800129c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0201 	bic.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	@ 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e16b      	b.n	80015b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 815a 	bne.w	80015ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d005      	beq.n	8001312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130e:	2b02      	cmp	r3, #2
 8001310:	d130      	bne.n	8001374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001348:	2201      	movs	r2, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 0201 	and.w	r2, r3, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b03      	cmp	r3, #3
 800137e:	d017      	beq.n	80013b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d123      	bne.n	8001404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0203 	and.w	r2, r3, #3
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80b4 	beq.w	80015ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b60      	ldr	r3, [pc, #384]	@ (80015cc <HAL_GPIO_Init+0x30c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	4a5f      	ldr	r2, [pc, #380]	@ (80015cc <HAL_GPIO_Init+0x30c>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001454:	6453      	str	r3, [r2, #68]	@ 0x44
 8001456:	4b5d      	ldr	r3, [pc, #372]	@ (80015cc <HAL_GPIO_Init+0x30c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001462:	4a5b      	ldr	r2, [pc, #364]	@ (80015d0 <HAL_GPIO_Init+0x310>)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a52      	ldr	r2, [pc, #328]	@ (80015d4 <HAL_GPIO_Init+0x314>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d02b      	beq.n	80014e6 <HAL_GPIO_Init+0x226>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a51      	ldr	r2, [pc, #324]	@ (80015d8 <HAL_GPIO_Init+0x318>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d025      	beq.n	80014e2 <HAL_GPIO_Init+0x222>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a50      	ldr	r2, [pc, #320]	@ (80015dc <HAL_GPIO_Init+0x31c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d01f      	beq.n	80014de <HAL_GPIO_Init+0x21e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4f      	ldr	r2, [pc, #316]	@ (80015e0 <HAL_GPIO_Init+0x320>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d019      	beq.n	80014da <HAL_GPIO_Init+0x21a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4e      	ldr	r2, [pc, #312]	@ (80015e4 <HAL_GPIO_Init+0x324>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0x216>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4d      	ldr	r2, [pc, #308]	@ (80015e8 <HAL_GPIO_Init+0x328>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00d      	beq.n	80014d2 <HAL_GPIO_Init+0x212>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4c      	ldr	r2, [pc, #304]	@ (80015ec <HAL_GPIO_Init+0x32c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d007      	beq.n	80014ce <HAL_GPIO_Init+0x20e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4b      	ldr	r2, [pc, #300]	@ (80015f0 <HAL_GPIO_Init+0x330>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_GPIO_Init+0x20a>
 80014c6:	2307      	movs	r3, #7
 80014c8:	e00e      	b.n	80014e8 <HAL_GPIO_Init+0x228>
 80014ca:	2308      	movs	r3, #8
 80014cc:	e00c      	b.n	80014e8 <HAL_GPIO_Init+0x228>
 80014ce:	2306      	movs	r3, #6
 80014d0:	e00a      	b.n	80014e8 <HAL_GPIO_Init+0x228>
 80014d2:	2305      	movs	r3, #5
 80014d4:	e008      	b.n	80014e8 <HAL_GPIO_Init+0x228>
 80014d6:	2304      	movs	r3, #4
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x228>
 80014da:	2303      	movs	r3, #3
 80014dc:	e004      	b.n	80014e8 <HAL_GPIO_Init+0x228>
 80014de:	2302      	movs	r3, #2
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_Init+0x228>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x228>
 80014e6:	2300      	movs	r3, #0
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	f002 0203 	and.w	r2, r2, #3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4093      	lsls	r3, r2
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f8:	4935      	ldr	r1, [pc, #212]	@ (80015d0 <HAL_GPIO_Init+0x310>)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001506:	4b3b      	ldr	r3, [pc, #236]	@ (80015f4 <HAL_GPIO_Init+0x334>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152a:	4a32      	ldr	r2, [pc, #200]	@ (80015f4 <HAL_GPIO_Init+0x334>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001530:	4b30      	ldr	r3, [pc, #192]	@ (80015f4 <HAL_GPIO_Init+0x334>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001554:	4a27      	ldr	r2, [pc, #156]	@ (80015f4 <HAL_GPIO_Init+0x334>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800155a:	4b26      	ldr	r3, [pc, #152]	@ (80015f4 <HAL_GPIO_Init+0x334>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800157e:	4a1d      	ldr	r2, [pc, #116]	@ (80015f4 <HAL_GPIO_Init+0x334>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_GPIO_Init+0x334>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a8:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <HAL_GPIO_Init+0x334>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3301      	adds	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	f67f ae90 	bls.w	80012dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3724      	adds	r7, #36	@ 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40013800 	.word	0x40013800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020400 	.word	0x40020400
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020c00 	.word	0x40020c00
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40021400 	.word	0x40021400
 80015ec:	40021800 	.word	0x40021800
 80015f0:	40021c00 	.word	0x40021c00
 80015f4:	40013c00 	.word	0x40013c00

080015f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e001      	b.n	800161a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001644:	e003      	b.n	800164e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	041a      	lsls	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001672:	4a05      	ldr	r2, [pc, #20]	@ (8001688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f944 	bl	8000908 <HAL_GPIO_EXTI_Callback>
  }
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40013c00 	.word	0x40013c00

0800168c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e267      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d075      	beq.n	8001796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016aa:	4b88      	ldr	r3, [pc, #544]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d00c      	beq.n	80016d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b6:	4b85      	ldr	r3, [pc, #532]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d112      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c2:	4b82      	ldr	r3, [pc, #520]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016ce:	d10b      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	4b7e      	ldr	r3, [pc, #504]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d05b      	beq.n	8001794 <HAL_RCC_OscConfig+0x108>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d157      	bne.n	8001794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e242      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_OscConfig+0x74>
 80016f2:	4b76      	ldr	r3, [pc, #472]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a75      	ldr	r2, [pc, #468]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e01d      	b.n	800173c <HAL_RCC_OscConfig+0xb0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x98>
 800170a:	4b70      	ldr	r3, [pc, #448]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6f      	ldr	r2, [pc, #444]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b6d      	ldr	r3, [pc, #436]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6c      	ldr	r2, [pc, #432]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 800171c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0xb0>
 8001724:	4b69      	ldr	r3, [pc, #420]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a68      	ldr	r2, [pc, #416]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 800172a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b66      	ldr	r3, [pc, #408]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a65      	ldr	r2, [pc, #404]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800173a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fbe8 	bl	8000f18 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fbe4 	bl	8000f18 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	@ 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e207      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b5b      	ldr	r3, [pc, #364]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0xc0>
 800176a:	e014      	b.n	8001796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fbd4 	bl	8000f18 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fbd0 	bl	8000f18 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	@ 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1f3      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001786:	4b51      	ldr	r3, [pc, #324]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0xe8>
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d063      	beq.n	800186a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017a2:	4b4a      	ldr	r3, [pc, #296]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00b      	beq.n	80017c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ae:	4b47      	ldr	r3, [pc, #284]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d11c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b44      	ldr	r3, [pc, #272]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d116      	bne.n	80017f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c6:	4b41      	ldr	r3, [pc, #260]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <HAL_RCC_OscConfig+0x152>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e1c7      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017de:	4b3b      	ldr	r3, [pc, #236]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4937      	ldr	r1, [pc, #220]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	e03a      	b.n	800186a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fc:	4b34      	ldr	r3, [pc, #208]	@ (80018d0 <HAL_RCC_OscConfig+0x244>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff fb89 	bl	8000f18 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff fb85 	bl	8000f18 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1a8      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	4b2b      	ldr	r3, [pc, #172]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001828:	4b28      	ldr	r3, [pc, #160]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4925      	ldr	r1, [pc, #148]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
 800183c:	e015      	b.n	800186a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183e:	4b24      	ldr	r3, [pc, #144]	@ (80018d0 <HAL_RCC_OscConfig+0x244>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fb68 	bl	8000f18 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184c:	f7ff fb64 	bl	8000f18 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e187      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d036      	beq.n	80018e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d016      	beq.n	80018ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_RCC_OscConfig+0x248>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff fb48 	bl	8000f18 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188c:	f7ff fb44 	bl	8000f18 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e167      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80018a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x200>
 80018aa:	e01b      	b.n	80018e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ac:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_RCC_OscConfig+0x248>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b2:	f7ff fb31 	bl	8000f18 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	e00e      	b.n	80018d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ba:	f7ff fb2d 	bl	8000f18 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d907      	bls.n	80018d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e150      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
 80018cc:	40023800 	.word	0x40023800
 80018d0:	42470000 	.word	0x42470000
 80018d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d8:	4b88      	ldr	r3, [pc, #544]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 80018da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ea      	bne.n	80018ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8097 	beq.w	8001a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f6:	4b81      	ldr	r3, [pc, #516]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b7d      	ldr	r3, [pc, #500]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	4a7c      	ldr	r2, [pc, #496]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	@ 0x40
 8001912:	4b7a      	ldr	r3, [pc, #488]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191e:	2301      	movs	r3, #1
 8001920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	4b77      	ldr	r3, [pc, #476]	@ (8001b00 <HAL_RCC_OscConfig+0x474>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192a:	2b00      	cmp	r3, #0
 800192c:	d118      	bne.n	8001960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192e:	4b74      	ldr	r3, [pc, #464]	@ (8001b00 <HAL_RCC_OscConfig+0x474>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a73      	ldr	r2, [pc, #460]	@ (8001b00 <HAL_RCC_OscConfig+0x474>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193a:	f7ff faed 	bl	8000f18 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001942:	f7ff fae9 	bl	8000f18 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e10c      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	4b6a      	ldr	r3, [pc, #424]	@ (8001b00 <HAL_RCC_OscConfig+0x474>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x2ea>
 8001968:	4b64      	ldr	r3, [pc, #400]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196c:	4a63      	ldr	r2, [pc, #396]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6713      	str	r3, [r2, #112]	@ 0x70
 8001974:	e01c      	b.n	80019b0 <HAL_RCC_OscConfig+0x324>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b05      	cmp	r3, #5
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x30c>
 800197e:	4b5f      	ldr	r3, [pc, #380]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001982:	4a5e      	ldr	r2, [pc, #376]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6713      	str	r3, [r2, #112]	@ 0x70
 800198a:	4b5c      	ldr	r3, [pc, #368]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198e:	4a5b      	ldr	r2, [pc, #364]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6713      	str	r3, [r2, #112]	@ 0x70
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0x324>
 8001998:	4b58      	ldr	r3, [pc, #352]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199c:	4a57      	ldr	r2, [pc, #348]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a4:	4b55      	ldr	r3, [pc, #340]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a8:	4a54      	ldr	r2, [pc, #336]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 80019aa:	f023 0304 	bic.w	r3, r3, #4
 80019ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d015      	beq.n	80019e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff faae 	bl	8000f18 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7ff faaa 	bl	8000f18 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e0cb      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d6:	4b49      	ldr	r3, [pc, #292]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0ee      	beq.n	80019c0 <HAL_RCC_OscConfig+0x334>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7ff fa98 	bl	8000f18 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ec:	f7ff fa94 	bl	8000f18 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e0b5      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a02:	4b3e      	ldr	r3, [pc, #248]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ee      	bne.n	80019ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a14:	4b39      	ldr	r3, [pc, #228]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	4a38      	ldr	r2, [pc, #224]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80a1 	beq.w	8001b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a2a:	4b34      	ldr	r3, [pc, #208]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d05c      	beq.n	8001af0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d141      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b31      	ldr	r3, [pc, #196]	@ (8001b04 <HAL_RCC_OscConfig+0x478>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fa68 	bl	8000f18 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff fa64 	bl	8000f18 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e087      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69da      	ldr	r2, [r3, #28]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	019b      	lsls	r3, r3, #6
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	3b01      	subs	r3, #1
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	061b      	lsls	r3, r3, #24
 8001a8e:	491b      	ldr	r1, [pc, #108]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a94:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <HAL_RCC_OscConfig+0x478>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fa3d 	bl	8000f18 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7ff fa39 	bl	8000f18 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e05c      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x416>
 8001ac0:	e054      	b.n	8001b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <HAL_RCC_OscConfig+0x478>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fa26 	bl	8000f18 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff fa22 	bl	8000f18 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e045      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x444>
 8001aee:	e03d      	b.n	8001b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e038      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000
 8001b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <HAL_RCC_OscConfig+0x4ec>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d028      	beq.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d121      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d11a      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b38:	4013      	ands	r3, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d111      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	085b      	lsrs	r3, r3, #1
 8001b50:	3b01      	subs	r3, #1
 8001b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0cc      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b90:	4b68      	ldr	r3, [pc, #416]	@ (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d90c      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b65      	ldr	r3, [pc, #404]	@ (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b63      	ldr	r3, [pc, #396]	@ (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0b8      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd0:	4b59      	ldr	r3, [pc, #356]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a58      	ldr	r2, [pc, #352]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be8:	4b53      	ldr	r3, [pc, #332]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a52      	ldr	r2, [pc, #328]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4b50      	ldr	r3, [pc, #320]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	494d      	ldr	r1, [pc, #308]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d044      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b47      	ldr	r3, [pc, #284]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d119      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e07f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d003      	beq.n	8001c3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e06f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e067      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5a:	4b37      	ldr	r3, [pc, #220]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f023 0203 	bic.w	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4934      	ldr	r1, [pc, #208]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c6c:	f7ff f954 	bl	8000f18 <HAL_GetTick>
 8001c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c74:	f7ff f950 	bl	8000f18 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e04f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 020c 	and.w	r2, r3, #12
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d1eb      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d20c      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e032      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4916      	ldr	r1, [pc, #88]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cee:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	490e      	ldr	r1, [pc, #56]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d02:	f000 f821 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	490a      	ldr	r1, [pc, #40]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	4a09      	ldr	r2, [pc, #36]	@ (8001d40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f8b4 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023c00 	.word	0x40023c00
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	08004328 	.word	0x08004328
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d4c:	b094      	sub	sp, #80	@ 0x50
 8001d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d60:	4b79      	ldr	r3, [pc, #484]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d00d      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x40>
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	f200 80e1 	bhi.w	8001f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x34>
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d7a:	e0db      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b73      	ldr	r3, [pc, #460]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d80:	e0db      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d82:	4b73      	ldr	r3, [pc, #460]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d86:	e0d8      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d88:	4b6f      	ldr	r3, [pc, #444]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d92:	4b6d      	ldr	r3, [pc, #436]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d063      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	2200      	movs	r2, #0
 8001da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001da8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001db2:	2300      	movs	r3, #0
 8001db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dba:	4622      	mov	r2, r4
 8001dbc:	462b      	mov	r3, r5
 8001dbe:	f04f 0000 	mov.w	r0, #0
 8001dc2:	f04f 0100 	mov.w	r1, #0
 8001dc6:	0159      	lsls	r1, r3, #5
 8001dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dcc:	0150      	lsls	r0, r2, #5
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	1a51      	subs	r1, r2, r1
 8001dd6:	6139      	str	r1, [r7, #16]
 8001dd8:	4629      	mov	r1, r5
 8001dda:	eb63 0301 	sbc.w	r3, r3, r1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dec:	4659      	mov	r1, fp
 8001dee:	018b      	lsls	r3, r1, #6
 8001df0:	4651      	mov	r1, sl
 8001df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001df6:	4651      	mov	r1, sl
 8001df8:	018a      	lsls	r2, r1, #6
 8001dfa:	4651      	mov	r1, sl
 8001dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8001e00:	4659      	mov	r1, fp
 8001e02:	eb63 0901 	sbc.w	r9, r3, r1
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e1a:	4690      	mov	r8, r2
 8001e1c:	4699      	mov	r9, r3
 8001e1e:	4623      	mov	r3, r4
 8001e20:	eb18 0303 	adds.w	r3, r8, r3
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	462b      	mov	r3, r5
 8001e28:	eb49 0303 	adc.w	r3, r9, r3
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	024b      	lsls	r3, r1, #9
 8001e3e:	4621      	mov	r1, r4
 8001e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e44:	4621      	mov	r1, r4
 8001e46:	024a      	lsls	r2, r1, #9
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e4e:	2200      	movs	r2, #0
 8001e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e58:	f7fe f9b6 	bl	80001c8 <__aeabi_uldivmod>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4613      	mov	r3, r2
 8001e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e64:	e058      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e66:	4b38      	ldr	r3, [pc, #224]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4611      	mov	r1, r2
 8001e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e76:	623b      	str	r3, [r7, #32]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e80:	4642      	mov	r2, r8
 8001e82:	464b      	mov	r3, r9
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	f04f 0100 	mov.w	r1, #0
 8001e8c:	0159      	lsls	r1, r3, #5
 8001e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e92:	0150      	lsls	r0, r2, #5
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4641      	mov	r1, r8
 8001e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e9e:	4649      	mov	r1, r9
 8001ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8001ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	00eb      	lsls	r3, r5, #3
 8001eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ece:	00e2      	lsls	r2, r4, #3
 8001ed0:	4614      	mov	r4, r2
 8001ed2:	461d      	mov	r5, r3
 8001ed4:	4643      	mov	r3, r8
 8001ed6:	18e3      	adds	r3, r4, r3
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	464b      	mov	r3, r9
 8001edc:	eb45 0303 	adc.w	r3, r5, r3
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eee:	4629      	mov	r1, r5
 8001ef0:	028b      	lsls	r3, r1, #10
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef8:	4621      	mov	r1, r4
 8001efa:	028a      	lsls	r2, r1, #10
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f02:	2200      	movs	r2, #0
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	61fa      	str	r2, [r7, #28]
 8001f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f0c:	f7fe f95c 	bl	80001c8 <__aeabi_uldivmod>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4613      	mov	r3, r2
 8001f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	0c1b      	lsrs	r3, r3, #16
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	3301      	adds	r3, #1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f32:	e002      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3750      	adds	r7, #80	@ 0x50
 8001f40:	46bd      	mov	sp, r7
 8001f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	00f42400 	.word	0x00f42400
 8001f50:	007a1200 	.word	0x007a1200

08001f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000000 	.word	0x20000000

08001f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f70:	f7ff fff0 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	0a9b      	lsrs	r3, r3, #10
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	4903      	ldr	r1, [pc, #12]	@ (8001f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f82:	5ccb      	ldrb	r3, [r1, r3]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	08004338 	.word	0x08004338

08001f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f98:	f7ff ffdc 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	0b5b      	lsrs	r3, r3, #13
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	4903      	ldr	r1, [pc, #12]	@ (8001fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	08004338 	.word	0x08004338

08001fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e041      	b.n	8002052 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fcf2 	bl	80009cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f000 f9b6 	bl	800236c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d001      	beq.n	8002074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e04e      	b.n	8002112 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a23      	ldr	r2, [pc, #140]	@ (8002120 <HAL_TIM_Base_Start_IT+0xc4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d022      	beq.n	80020dc <HAL_TIM_Base_Start_IT+0x80>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800209e:	d01d      	beq.n	80020dc <HAL_TIM_Base_Start_IT+0x80>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002124 <HAL_TIM_Base_Start_IT+0xc8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d018      	beq.n	80020dc <HAL_TIM_Base_Start_IT+0x80>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002128 <HAL_TIM_Base_Start_IT+0xcc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <HAL_TIM_Base_Start_IT+0x80>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <HAL_TIM_Base_Start_IT+0xd0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00e      	beq.n	80020dc <HAL_TIM_Base_Start_IT+0x80>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002130 <HAL_TIM_Base_Start_IT+0xd4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d009      	beq.n	80020dc <HAL_TIM_Base_Start_IT+0x80>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a19      	ldr	r2, [pc, #100]	@ (8002134 <HAL_TIM_Base_Start_IT+0xd8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d004      	beq.n	80020dc <HAL_TIM_Base_Start_IT+0x80>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a18      	ldr	r2, [pc, #96]	@ (8002138 <HAL_TIM_Base_Start_IT+0xdc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d111      	bne.n	8002100 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d010      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0201 	orr.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fe:	e007      	b.n	8002110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40010000 	.word	0x40010000
 8002124:	40000400 	.word	0x40000400
 8002128:	40000800 	.word	0x40000800
 800212c:	40000c00 	.word	0x40000c00
 8002130:	40010400 	.word	0x40010400
 8002134:	40014000 	.word	0x40014000
 8002138:	40001800 	.word	0x40001800

0800213c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d020      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01b      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0202 	mvn.w	r2, #2
 8002170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f8d2 	bl	8002330 <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f8c4 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f8d5 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d020      	beq.n	80021ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01b      	beq.n	80021ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0204 	mvn.w	r2, #4
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f8ac 	bl	8002330 <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f89e 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f8af 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d020      	beq.n	8002238 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0208 	mvn.w	r2, #8
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2204      	movs	r2, #4
 800220e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f886 	bl	8002330 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f878 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f889 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d020      	beq.n	8002284 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0210 	mvn.w	r2, #16
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2208      	movs	r2, #8
 800225a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f860 	bl	8002330 <HAL_TIM_IC_CaptureCallback>
 8002270:	e005      	b.n	800227e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f852 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f863 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0201 	mvn.w	r2, #1
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fb1a 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00c      	beq.n	80022cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f982 	bl	80025d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f834 	bl	8002358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0220 	mvn.w	r2, #32
 800230c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f954 	bl	80025bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a46      	ldr	r2, [pc, #280]	@ (8002498 <TIM_Base_SetConfig+0x12c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d013      	beq.n	80023ac <TIM_Base_SetConfig+0x40>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800238a:	d00f      	beq.n	80023ac <TIM_Base_SetConfig+0x40>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a43      	ldr	r2, [pc, #268]	@ (800249c <TIM_Base_SetConfig+0x130>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00b      	beq.n	80023ac <TIM_Base_SetConfig+0x40>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a42      	ldr	r2, [pc, #264]	@ (80024a0 <TIM_Base_SetConfig+0x134>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d007      	beq.n	80023ac <TIM_Base_SetConfig+0x40>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a41      	ldr	r2, [pc, #260]	@ (80024a4 <TIM_Base_SetConfig+0x138>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d003      	beq.n	80023ac <TIM_Base_SetConfig+0x40>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a40      	ldr	r2, [pc, #256]	@ (80024a8 <TIM_Base_SetConfig+0x13c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d108      	bne.n	80023be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a35      	ldr	r2, [pc, #212]	@ (8002498 <TIM_Base_SetConfig+0x12c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02b      	beq.n	800241e <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023cc:	d027      	beq.n	800241e <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a32      	ldr	r2, [pc, #200]	@ (800249c <TIM_Base_SetConfig+0x130>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d023      	beq.n	800241e <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a31      	ldr	r2, [pc, #196]	@ (80024a0 <TIM_Base_SetConfig+0x134>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01f      	beq.n	800241e <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a30      	ldr	r2, [pc, #192]	@ (80024a4 <TIM_Base_SetConfig+0x138>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01b      	beq.n	800241e <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a2f      	ldr	r2, [pc, #188]	@ (80024a8 <TIM_Base_SetConfig+0x13c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d017      	beq.n	800241e <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a2e      	ldr	r2, [pc, #184]	@ (80024ac <TIM_Base_SetConfig+0x140>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <TIM_Base_SetConfig+0xb2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a2d      	ldr	r2, [pc, #180]	@ (80024b0 <TIM_Base_SetConfig+0x144>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00f      	beq.n	800241e <TIM_Base_SetConfig+0xb2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a2c      	ldr	r2, [pc, #176]	@ (80024b4 <TIM_Base_SetConfig+0x148>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00b      	beq.n	800241e <TIM_Base_SetConfig+0xb2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a2b      	ldr	r2, [pc, #172]	@ (80024b8 <TIM_Base_SetConfig+0x14c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <TIM_Base_SetConfig+0xb2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a2a      	ldr	r2, [pc, #168]	@ (80024bc <TIM_Base_SetConfig+0x150>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d003      	beq.n	800241e <TIM_Base_SetConfig+0xb2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a29      	ldr	r2, [pc, #164]	@ (80024c0 <TIM_Base_SetConfig+0x154>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d108      	bne.n	8002430 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a10      	ldr	r2, [pc, #64]	@ (8002498 <TIM_Base_SetConfig+0x12c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d003      	beq.n	8002464 <TIM_Base_SetConfig+0xf8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a12      	ldr	r2, [pc, #72]	@ (80024a8 <TIM_Base_SetConfig+0x13c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d103      	bne.n	800246c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	d105      	bne.n	800248a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f023 0201 	bic.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	611a      	str	r2, [r3, #16]
  }
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40010000 	.word	0x40010000
 800249c:	40000400 	.word	0x40000400
 80024a0:	40000800 	.word	0x40000800
 80024a4:	40000c00 	.word	0x40000c00
 80024a8:	40010400 	.word	0x40010400
 80024ac:	40014000 	.word	0x40014000
 80024b0:	40014400 	.word	0x40014400
 80024b4:	40014800 	.word	0x40014800
 80024b8:	40001800 	.word	0x40001800
 80024bc:	40001c00 	.word	0x40001c00
 80024c0:	40002000 	.word	0x40002000

080024c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024d8:	2302      	movs	r3, #2
 80024da:	e05a      	b.n	8002592 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a21      	ldr	r2, [pc, #132]	@ (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d022      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002528:	d01d      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1d      	ldr	r2, [pc, #116]	@ (80025a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d018      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1b      	ldr	r2, [pc, #108]	@ (80025a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1a      	ldr	r2, [pc, #104]	@ (80025ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00e      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a18      	ldr	r2, [pc, #96]	@ (80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d009      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a17      	ldr	r2, [pc, #92]	@ (80025b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a15      	ldr	r2, [pc, #84]	@ (80025b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10c      	bne.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800256c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4313      	orrs	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800
 80025ac:	40000c00 	.word	0x40000c00
 80025b0:	40010400 	.word	0x40010400
 80025b4:	40014000 	.word	0x40014000
 80025b8:	40001800 	.word	0x40001800

080025bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e042      	b.n	800267c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe fa00 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2224      	movs	r2, #36	@ 0x24
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fcdb 	bl	8002fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800263c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800264c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800265c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b20      	cmp	r3, #32
 800269c:	d112      	bne.n	80026c4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_UART_Receive_IT+0x26>
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00b      	b.n	80026c6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 faba 	bl	8002c34 <UART_Start_Receive_IT>
 80026c0:	4603      	mov	r3, r0
 80026c2:	e000      	b.n	80026c6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b0ba      	sub	sp, #232	@ 0xe8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800270e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_UART_IRQHandler+0x66>
 8002722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fb99 	bl	8002e66 <UART_Receive_IT>
      return;
 8002734:	e25b      	b.n	8002bee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80de 	beq.w	80028fc <HAL_UART_IRQHandler+0x22c>
 8002740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800274c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002750:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80d1 	beq.w	80028fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800275a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_UART_IRQHandler+0xae>
 8002766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_UART_IRQHandler+0xd2>
 800278a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f043 0202 	orr.w	r2, r3, #2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_UART_IRQHandler+0xf6>
 80027ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	f043 0204 	orr.w	r2, r3, #4
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d011      	beq.n	80027f6 <HAL_UART_IRQHandler+0x126>
 80027d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	f043 0208 	orr.w	r2, r3, #8
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 81f2 	beq.w	8002be4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_UART_IRQHandler+0x14e>
 800280c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fb24 	bl	8002e66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002828:	2b40      	cmp	r3, #64	@ 0x40
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d103      	bne.n	800284a <HAL_UART_IRQHandler+0x17a>
 8002842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d04f      	beq.n	80028ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa2c 	bl	8002ca8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285a:	2b40      	cmp	r3, #64	@ 0x40
 800285c:	d141      	bne.n	80028e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3314      	adds	r3, #20
 8002864:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002868:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800286c:	e853 3f00 	ldrex	r3, [r3]
 8002870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800287c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3314      	adds	r3, #20
 8002886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800288a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800288e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80028a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1d9      	bne.n	800285e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d013      	beq.n	80028da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ab0 <HAL_UART_IRQHandler+0x3e0>)
 80028b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fcdb 	bl	800127a <HAL_DMA_Abort_IT>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d016      	beq.n	80028f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028d4:	4610      	mov	r0, r2
 80028d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d8:	e00e      	b.n	80028f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f994 	bl	8002c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e0:	e00a      	b.n	80028f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f990 	bl	8002c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e8:	e006      	b.n	80028f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f98c 	bl	8002c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80028f6:	e175      	b.n	8002be4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f8:	bf00      	nop
    return;
 80028fa:	e173      	b.n	8002be4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002900:	2b01      	cmp	r3, #1
 8002902:	f040 814f 	bne.w	8002ba4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8148 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8141 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002942:	2b40      	cmp	r3, #64	@ 0x40
 8002944:	f040 80b6 	bne.w	8002ab4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8145 	beq.w	8002be8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002966:	429a      	cmp	r2, r3
 8002968:	f080 813e 	bcs.w	8002be8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002972:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800297e:	f000 8088 	beq.w	8002a92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800299c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80029ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029be:	e841 2300 	strex	r3, r2, [r1]
 80029c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80029c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1d9      	bne.n	8002982 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3314      	adds	r3, #20
 80029d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d8:	e853 3f00 	ldrex	r3, [r3]
 80029dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80029de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3314      	adds	r3, #20
 80029ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80029f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80029fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029fe:	e841 2300 	strex	r3, r2, [r1]
 8002a02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1e1      	bne.n	80029ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3314      	adds	r3, #20
 8002a10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a14:	e853 3f00 	ldrex	r3, [r3]
 8002a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3314      	adds	r3, #20
 8002a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a36:	e841 2300 	strex	r3, r2, [r1]
 8002a3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1e3      	bne.n	8002a0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	330c      	adds	r3, #12
 8002a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a5a:	e853 3f00 	ldrex	r3, [r3]
 8002a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a62:	f023 0310 	bic.w	r3, r3, #16
 8002a66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	330c      	adds	r3, #12
 8002a70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002a74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a7c:	e841 2300 	strex	r3, r2, [r1]
 8002a80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e3      	bne.n	8002a50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe fb84 	bl	800119a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f8b7 	bl	8002c1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002aae:	e09b      	b.n	8002be8 <HAL_UART_IRQHandler+0x518>
 8002ab0:	08002d6f 	.word	0x08002d6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 808e 	beq.w	8002bec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ad0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8089 	beq.w	8002bec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	330c      	adds	r3, #12
 8002ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae4:	e853 3f00 	ldrex	r3, [r3]
 8002ae8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002af0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002afe:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e3      	bne.n	8002ada <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3314      	adds	r3, #20
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	623b      	str	r3, [r7, #32]
   return(result);
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3314      	adds	r3, #20
 8002b32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b36:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b3e:	e841 2300 	strex	r3, r2, [r1]
 8002b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1e3      	bne.n	8002b12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	e853 3f00 	ldrex	r3, [r3]
 8002b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0310 	bic.w	r3, r3, #16
 8002b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	330c      	adds	r3, #12
 8002b78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002b7c:	61fa      	str	r2, [r7, #28]
 8002b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b80:	69b9      	ldr	r1, [r7, #24]
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	e841 2300 	strex	r3, r2, [r1]
 8002b88:	617b      	str	r3, [r7, #20]
   return(result);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e3      	bne.n	8002b58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f83d 	bl	8002c1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ba2:	e023      	b.n	8002bec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d009      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x4f4>
 8002bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8ea 	bl	8002d96 <UART_Transmit_IT>
    return;
 8002bc2:	e014      	b.n	8002bee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00e      	beq.n	8002bee <HAL_UART_IRQHandler+0x51e>
 8002bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f92a 	bl	8002e36 <UART_EndTransmit_IT>
    return;
 8002be2:	e004      	b.n	8002bee <HAL_UART_IRQHandler+0x51e>
    return;
 8002be4:	bf00      	nop
 8002be6:	e002      	b.n	8002bee <HAL_UART_IRQHandler+0x51e>
      return;
 8002be8:	bf00      	nop
 8002bea:	e000      	b.n	8002bee <HAL_UART_IRQHandler+0x51e>
      return;
 8002bec:	bf00      	nop
  }
}
 8002bee:	37e8      	adds	r7, #232	@ 0xe8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	88fa      	ldrh	r2, [r7, #6]
 8002c52:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2222      	movs	r2, #34	@ 0x22
 8002c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c78:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0220 	orr.w	r2, r2, #32
 8002c98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b095      	sub	sp, #84	@ 0x54
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cba:	e853 3f00 	ldrex	r3, [r3]
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cd0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e5      	bne.n	8002cb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3314      	adds	r3, #20
 8002cea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3314      	adds	r3, #20
 8002d02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e5      	bne.n	8002ce4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d119      	bne.n	8002d54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	e853 3f00 	ldrex	r3, [r3]
 8002d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f023 0310 	bic.w	r3, r3, #16
 8002d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d40:	61ba      	str	r2, [r7, #24]
 8002d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	6979      	ldr	r1, [r7, #20]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	e841 2300 	strex	r3, r2, [r1]
 8002d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e5      	bne.n	8002d20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d62:	bf00      	nop
 8002d64:	3754      	adds	r7, #84	@ 0x54
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff ff3d 	bl	8002c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b21      	cmp	r3, #33	@ 0x21
 8002da8:	d13e      	bne.n	8002e28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db2:	d114      	bne.n	8002dde <UART_Transmit_IT+0x48>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d110      	bne.n	8002dde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	1c9a      	adds	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	621a      	str	r2, [r3, #32]
 8002ddc:	e008      	b.n	8002df0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	1c59      	adds	r1, r3, #1
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6211      	str	r1, [r2, #32]
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10f      	bne.n	8002e24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff fecc 	bl	8002bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b08c      	sub	sp, #48	@ 0x30
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b22      	cmp	r3, #34	@ 0x22
 8002e78:	f040 80ae 	bne.w	8002fd8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e84:	d117      	bne.n	8002eb6 <UART_Receive_IT+0x50>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d113      	bne.n	8002eb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e96:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	1c9a      	adds	r2, r3, #2
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eb4:	e026      	b.n	8002f04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ec8:	d007      	beq.n	8002eda <UART_Receive_IT+0x74>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10a      	bne.n	8002ee8 <UART_Receive_IT+0x82>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	e008      	b.n	8002efa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4619      	mov	r1, r3
 8002f12:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d15d      	bne.n	8002fd4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0220 	bic.w	r2, r2, #32
 8002f26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d135      	bne.n	8002fca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	330c      	adds	r3, #12
 8002f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	e853 3f00 	ldrex	r3, [r3]
 8002f72:	613b      	str	r3, [r7, #16]
   return(result);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f023 0310 	bic.w	r3, r3, #16
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	330c      	adds	r3, #12
 8002f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f84:	623a      	str	r2, [r7, #32]
 8002f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f88:	69f9      	ldr	r1, [r7, #28]
 8002f8a:	6a3a      	ldr	r2, [r7, #32]
 8002f8c:	e841 2300 	strex	r3, r2, [r1]
 8002f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e5      	bne.n	8002f64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d10a      	bne.n	8002fbc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fe2a 	bl	8002c1c <HAL_UARTEx_RxEventCallback>
 8002fc8:	e002      	b.n	8002fd0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fd fc70 	bl	80008b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e002      	b.n	8002fda <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3730      	adds	r7, #48	@ 0x30
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe8:	b0c0      	sub	sp, #256	@ 0x100
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003000:	68d9      	ldr	r1, [r3, #12]
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	ea40 0301 	orr.w	r3, r0, r1
 800300c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	431a      	orrs	r2, r3
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	431a      	orrs	r2, r3
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800303c:	f021 010c 	bic.w	r1, r1, #12
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800304a:	430b      	orrs	r3, r1
 800304c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800304e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305e:	6999      	ldr	r1, [r3, #24]
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	ea40 0301 	orr.w	r3, r0, r1
 800306a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4b8f      	ldr	r3, [pc, #572]	@ (80032b0 <UART_SetConfig+0x2cc>)
 8003074:	429a      	cmp	r2, r3
 8003076:	d005      	beq.n	8003084 <UART_SetConfig+0xa0>
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b8d      	ldr	r3, [pc, #564]	@ (80032b4 <UART_SetConfig+0x2d0>)
 8003080:	429a      	cmp	r2, r3
 8003082:	d104      	bne.n	800308e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003084:	f7fe ff86 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 8003088:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800308c:	e003      	b.n	8003096 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800308e:	f7fe ff6d 	bl	8001f6c <HAL_RCC_GetPCLK1Freq>
 8003092:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a0:	f040 810c 	bne.w	80032bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030a8:	2200      	movs	r2, #0
 80030aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030b6:	4622      	mov	r2, r4
 80030b8:	462b      	mov	r3, r5
 80030ba:	1891      	adds	r1, r2, r2
 80030bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030be:	415b      	adcs	r3, r3
 80030c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030c6:	4621      	mov	r1, r4
 80030c8:	eb12 0801 	adds.w	r8, r2, r1
 80030cc:	4629      	mov	r1, r5
 80030ce:	eb43 0901 	adc.w	r9, r3, r1
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030e6:	4690      	mov	r8, r2
 80030e8:	4699      	mov	r9, r3
 80030ea:	4623      	mov	r3, r4
 80030ec:	eb18 0303 	adds.w	r3, r8, r3
 80030f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030f4:	462b      	mov	r3, r5
 80030f6:	eb49 0303 	adc.w	r3, r9, r3
 80030fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800310a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800310e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003112:	460b      	mov	r3, r1
 8003114:	18db      	adds	r3, r3, r3
 8003116:	653b      	str	r3, [r7, #80]	@ 0x50
 8003118:	4613      	mov	r3, r2
 800311a:	eb42 0303 	adc.w	r3, r2, r3
 800311e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003120:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003124:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003128:	f7fd f84e 	bl	80001c8 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4b61      	ldr	r3, [pc, #388]	@ (80032b8 <UART_SetConfig+0x2d4>)
 8003132:	fba3 2302 	umull	r2, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	011c      	lsls	r4, r3, #4
 800313a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800313e:	2200      	movs	r2, #0
 8003140:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003144:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003148:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800314c:	4642      	mov	r2, r8
 800314e:	464b      	mov	r3, r9
 8003150:	1891      	adds	r1, r2, r2
 8003152:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003154:	415b      	adcs	r3, r3
 8003156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003158:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800315c:	4641      	mov	r1, r8
 800315e:	eb12 0a01 	adds.w	sl, r2, r1
 8003162:	4649      	mov	r1, r9
 8003164:	eb43 0b01 	adc.w	fp, r3, r1
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003174:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800317c:	4692      	mov	sl, r2
 800317e:	469b      	mov	fp, r3
 8003180:	4643      	mov	r3, r8
 8003182:	eb1a 0303 	adds.w	r3, sl, r3
 8003186:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800318a:	464b      	mov	r3, r9
 800318c:	eb4b 0303 	adc.w	r3, fp, r3
 8003190:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031a8:	460b      	mov	r3, r1
 80031aa:	18db      	adds	r3, r3, r3
 80031ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80031ae:	4613      	mov	r3, r2
 80031b0:	eb42 0303 	adc.w	r3, r2, r3
 80031b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031be:	f7fd f803 	bl	80001c8 <__aeabi_uldivmod>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	4b3b      	ldr	r3, [pc, #236]	@ (80032b8 <UART_SetConfig+0x2d4>)
 80031ca:	fba3 2301 	umull	r2, r3, r3, r1
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	2264      	movs	r2, #100	@ 0x64
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	1acb      	subs	r3, r1, r3
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031de:	4b36      	ldr	r3, [pc, #216]	@ (80032b8 <UART_SetConfig+0x2d4>)
 80031e0:	fba3 2302 	umull	r2, r3, r3, r2
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031ec:	441c      	add	r4, r3
 80031ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003200:	4642      	mov	r2, r8
 8003202:	464b      	mov	r3, r9
 8003204:	1891      	adds	r1, r2, r2
 8003206:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003208:	415b      	adcs	r3, r3
 800320a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800320c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003210:	4641      	mov	r1, r8
 8003212:	1851      	adds	r1, r2, r1
 8003214:	6339      	str	r1, [r7, #48]	@ 0x30
 8003216:	4649      	mov	r1, r9
 8003218:	414b      	adcs	r3, r1
 800321a:	637b      	str	r3, [r7, #52]	@ 0x34
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003228:	4659      	mov	r1, fp
 800322a:	00cb      	lsls	r3, r1, #3
 800322c:	4651      	mov	r1, sl
 800322e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003232:	4651      	mov	r1, sl
 8003234:	00ca      	lsls	r2, r1, #3
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	4603      	mov	r3, r0
 800323c:	4642      	mov	r2, r8
 800323e:	189b      	adds	r3, r3, r2
 8003240:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003244:	464b      	mov	r3, r9
 8003246:	460a      	mov	r2, r1
 8003248:	eb42 0303 	adc.w	r3, r2, r3
 800324c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800325c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003264:	460b      	mov	r3, r1
 8003266:	18db      	adds	r3, r3, r3
 8003268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800326a:	4613      	mov	r3, r2
 800326c:	eb42 0303 	adc.w	r3, r2, r3
 8003270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003276:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800327a:	f7fc ffa5 	bl	80001c8 <__aeabi_uldivmod>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <UART_SetConfig+0x2d4>)
 8003284:	fba3 1302 	umull	r1, r3, r3, r2
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	2164      	movs	r1, #100	@ 0x64
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	3332      	adds	r3, #50	@ 0x32
 8003296:	4a08      	ldr	r2, [pc, #32]	@ (80032b8 <UART_SetConfig+0x2d4>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	f003 0207 	and.w	r2, r3, #7
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4422      	add	r2, r4
 80032aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032ac:	e106      	b.n	80034bc <UART_SetConfig+0x4d8>
 80032ae:	bf00      	nop
 80032b0:	40011000 	.word	0x40011000
 80032b4:	40011400 	.word	0x40011400
 80032b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032c0:	2200      	movs	r2, #0
 80032c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032ce:	4642      	mov	r2, r8
 80032d0:	464b      	mov	r3, r9
 80032d2:	1891      	adds	r1, r2, r2
 80032d4:	6239      	str	r1, [r7, #32]
 80032d6:	415b      	adcs	r3, r3
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032de:	4641      	mov	r1, r8
 80032e0:	1854      	adds	r4, r2, r1
 80032e2:	4649      	mov	r1, r9
 80032e4:	eb43 0501 	adc.w	r5, r3, r1
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	00eb      	lsls	r3, r5, #3
 80032f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032f6:	00e2      	lsls	r2, r4, #3
 80032f8:	4614      	mov	r4, r2
 80032fa:	461d      	mov	r5, r3
 80032fc:	4643      	mov	r3, r8
 80032fe:	18e3      	adds	r3, r4, r3
 8003300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003304:	464b      	mov	r3, r9
 8003306:	eb45 0303 	adc.w	r3, r5, r3
 800330a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800331a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800332a:	4629      	mov	r1, r5
 800332c:	008b      	lsls	r3, r1, #2
 800332e:	4621      	mov	r1, r4
 8003330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003334:	4621      	mov	r1, r4
 8003336:	008a      	lsls	r2, r1, #2
 8003338:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800333c:	f7fc ff44 	bl	80001c8 <__aeabi_uldivmod>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4b60      	ldr	r3, [pc, #384]	@ (80034c8 <UART_SetConfig+0x4e4>)
 8003346:	fba3 2302 	umull	r2, r3, r3, r2
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	011c      	lsls	r4, r3, #4
 800334e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003352:	2200      	movs	r2, #0
 8003354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003358:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800335c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003360:	4642      	mov	r2, r8
 8003362:	464b      	mov	r3, r9
 8003364:	1891      	adds	r1, r2, r2
 8003366:	61b9      	str	r1, [r7, #24]
 8003368:	415b      	adcs	r3, r3
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003370:	4641      	mov	r1, r8
 8003372:	1851      	adds	r1, r2, r1
 8003374:	6139      	str	r1, [r7, #16]
 8003376:	4649      	mov	r1, r9
 8003378:	414b      	adcs	r3, r1
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003388:	4659      	mov	r1, fp
 800338a:	00cb      	lsls	r3, r1, #3
 800338c:	4651      	mov	r1, sl
 800338e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003392:	4651      	mov	r1, sl
 8003394:	00ca      	lsls	r2, r1, #3
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	4603      	mov	r3, r0
 800339c:	4642      	mov	r2, r8
 800339e:	189b      	adds	r3, r3, r2
 80033a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033a4:	464b      	mov	r3, r9
 80033a6:	460a      	mov	r2, r1
 80033a8:	eb42 0303 	adc.w	r3, r2, r3
 80033ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033c8:	4649      	mov	r1, r9
 80033ca:	008b      	lsls	r3, r1, #2
 80033cc:	4641      	mov	r1, r8
 80033ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033d2:	4641      	mov	r1, r8
 80033d4:	008a      	lsls	r2, r1, #2
 80033d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033da:	f7fc fef5 	bl	80001c8 <__aeabi_uldivmod>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4611      	mov	r1, r2
 80033e4:	4b38      	ldr	r3, [pc, #224]	@ (80034c8 <UART_SetConfig+0x4e4>)
 80033e6:	fba3 2301 	umull	r2, r3, r3, r1
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2264      	movs	r2, #100	@ 0x64
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	1acb      	subs	r3, r1, r3
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	3332      	adds	r3, #50	@ 0x32
 80033f8:	4a33      	ldr	r2, [pc, #204]	@ (80034c8 <UART_SetConfig+0x4e4>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003404:	441c      	add	r4, r3
 8003406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800340a:	2200      	movs	r2, #0
 800340c:	673b      	str	r3, [r7, #112]	@ 0x70
 800340e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003410:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003414:	4642      	mov	r2, r8
 8003416:	464b      	mov	r3, r9
 8003418:	1891      	adds	r1, r2, r2
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	415b      	adcs	r3, r3
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003424:	4641      	mov	r1, r8
 8003426:	1851      	adds	r1, r2, r1
 8003428:	6039      	str	r1, [r7, #0]
 800342a:	4649      	mov	r1, r9
 800342c:	414b      	adcs	r3, r1
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800343c:	4659      	mov	r1, fp
 800343e:	00cb      	lsls	r3, r1, #3
 8003440:	4651      	mov	r1, sl
 8003442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003446:	4651      	mov	r1, sl
 8003448:	00ca      	lsls	r2, r1, #3
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	4603      	mov	r3, r0
 8003450:	4642      	mov	r2, r8
 8003452:	189b      	adds	r3, r3, r2
 8003454:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003456:	464b      	mov	r3, r9
 8003458:	460a      	mov	r2, r1
 800345a:	eb42 0303 	adc.w	r3, r2, r3
 800345e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	663b      	str	r3, [r7, #96]	@ 0x60
 800346a:	667a      	str	r2, [r7, #100]	@ 0x64
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003478:	4649      	mov	r1, r9
 800347a:	008b      	lsls	r3, r1, #2
 800347c:	4641      	mov	r1, r8
 800347e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003482:	4641      	mov	r1, r8
 8003484:	008a      	lsls	r2, r1, #2
 8003486:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800348a:	f7fc fe9d 	bl	80001c8 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <UART_SetConfig+0x4e4>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	2164      	movs	r1, #100	@ 0x64
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	3332      	adds	r3, #50	@ 0x32
 80034a6:	4a08      	ldr	r2, [pc, #32]	@ (80034c8 <UART_SetConfig+0x4e4>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	f003 020f 	and.w	r2, r3, #15
 80034b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4422      	add	r2, r4
 80034ba:	609a      	str	r2, [r3, #8]
}
 80034bc:	bf00      	nop
 80034be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034c2:	46bd      	mov	sp, r7
 80034c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034c8:	51eb851f 	.word	0x51eb851f

080034cc <_7SEG_GPIO_Init>:
 */

#include "7seg.h"

void _7SEG_GPIO_Init()
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	@ 0x28
 80034d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003684 <_7SEG_GPIO_Init+0x1b8>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	4a6a      	ldr	r2, [pc, #424]	@ (8003684 <_7SEG_GPIO_Init+0x1b8>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e2:	4b68      	ldr	r3, [pc, #416]	@ (8003684 <_7SEG_GPIO_Init+0x1b8>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	4b64      	ldr	r3, [pc, #400]	@ (8003684 <_7SEG_GPIO_Init+0x1b8>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	4a63      	ldr	r2, [pc, #396]	@ (8003684 <_7SEG_GPIO_Init+0x1b8>)
 80034f8:	f043 0304 	orr.w	r3, r3, #4
 80034fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034fe:	4b61      	ldr	r3, [pc, #388]	@ (8003684 <_7SEG_GPIO_Init+0x1b8>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	4b5d      	ldr	r3, [pc, #372]	@ (8003684 <_7SEG_GPIO_Init+0x1b8>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	4a5c      	ldr	r2, [pc, #368]	@ (8003684 <_7SEG_GPIO_Init+0x1b8>)
 8003514:	f043 0308 	orr.w	r3, r3, #8
 8003518:	6313      	str	r3, [r2, #48]	@ 0x30
 800351a:	4b5a      	ldr	r3, [pc, #360]	@ (8003684 <_7SEG_GPIO_Init+0x1b8>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]
 800352a:	4b56      	ldr	r3, [pc, #344]	@ (8003684 <_7SEG_GPIO_Init+0x1b8>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	4a55      	ldr	r2, [pc, #340]	@ (8003684 <_7SEG_GPIO_Init+0x1b8>)
 8003530:	f043 0310 	orr.w	r3, r3, #16
 8003534:	6313      	str	r3, [r2, #48]	@ 0x30
 8003536:	4b53      	ldr	r3, [pc, #332]	@ (8003684 <_7SEG_GPIO_Init+0x1b8>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	607b      	str	r3, [r7, #4]
 8003540:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 8003542:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003546:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003548:	2301      	movs	r3, #1
 800354a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2300      	movs	r3, #0
 8003552:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4619      	mov	r1, r3
 800355a:	484b      	ldr	r0, [pc, #300]	@ (8003688 <_7SEG_GPIO_Init+0x1bc>)
 800355c:	f7fd feb0 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 8003560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003564:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 8003566:	f107 0314 	add.w	r3, r7, #20
 800356a:	4619      	mov	r1, r3
 800356c:	4847      	ldr	r0, [pc, #284]	@ (800368c <_7SEG_GPIO_Init+0x1c0>)
 800356e:	f7fd fea7 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 8003572:	2340      	movs	r3, #64	@ 0x40
 8003574:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 8003576:	f107 0314 	add.w	r3, r7, #20
 800357a:	4619      	mov	r1, r3
 800357c:	4842      	ldr	r0, [pc, #264]	@ (8003688 <_7SEG_GPIO_Init+0x1bc>)
 800357e:	f7fd fe9f 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8003582:	2320      	movs	r3, #32
 8003584:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 8003586:	f107 0314 	add.w	r3, r7, #20
 800358a:	4619      	mov	r1, r3
 800358c:	483e      	ldr	r0, [pc, #248]	@ (8003688 <_7SEG_GPIO_Init+0x1bc>)
 800358e:	f7fd fe97 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8003592:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003596:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	4619      	mov	r1, r3
 800359e:	483c      	ldr	r0, [pc, #240]	@ (8003690 <_7SEG_GPIO_Init+0x1c4>)
 80035a0:	f7fd fe8e 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 80035a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035a8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 80035aa:	f107 0314 	add.w	r3, r7, #20
 80035ae:	4619      	mov	r1, r3
 80035b0:	4837      	ldr	r0, [pc, #220]	@ (8003690 <_7SEG_GPIO_Init+0x1c4>)
 80035b2:	f7fd fe85 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 80035b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ba:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4619      	mov	r1, r3
 80035c2:	4831      	ldr	r0, [pc, #196]	@ (8003688 <_7SEG_GPIO_Init+0x1bc>)
 80035c4:	f7fd fe7c 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 80035c8:	2380      	movs	r3, #128	@ 0x80
 80035ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4619      	mov	r1, r3
 80035d2:	482d      	ldr	r0, [pc, #180]	@ (8003688 <_7SEG_GPIO_Init+0x1bc>)
 80035d4:	f7fd fe74 	bl	80012c0 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 80035d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035dc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 80035de:	f107 0314 	add.w	r3, r7, #20
 80035e2:	4619      	mov	r1, r3
 80035e4:	482b      	ldr	r0, [pc, #172]	@ (8003694 <_7SEG_GPIO_Init+0x1c8>)
 80035e6:	f7fd fe6b 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 80035ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	4619      	mov	r1, r3
 80035f6:	4827      	ldr	r0, [pc, #156]	@ (8003694 <_7SEG_GPIO_Init+0x1c8>)
 80035f8:	f7fd fe62 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 80035fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003600:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	4619      	mov	r1, r3
 8003608:	4822      	ldr	r0, [pc, #136]	@ (8003694 <_7SEG_GPIO_Init+0x1c8>)
 800360a:	f7fd fe59 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 800360e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003612:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	4619      	mov	r1, r3
 800361a:	481e      	ldr	r0, [pc, #120]	@ (8003694 <_7SEG_GPIO_Init+0x1c8>)
 800361c:	f7fd fe50 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 8003620:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003624:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 8003626:	f107 0314 	add.w	r3, r7, #20
 800362a:	4619      	mov	r1, r3
 800362c:	4819      	ldr	r0, [pc, #100]	@ (8003694 <_7SEG_GPIO_Init+0x1c8>)
 800362e:	f7fd fe47 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 8003632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003636:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	4619      	mov	r1, r3
 800363e:	4815      	ldr	r0, [pc, #84]	@ (8003694 <_7SEG_GPIO_Init+0x1c8>)
 8003640:	f7fd fe3e 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 8003644:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003648:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	4619      	mov	r1, r3
 8003650:	4810      	ldr	r0, [pc, #64]	@ (8003694 <_7SEG_GPIO_Init+0x1c8>)
 8003652:	f7fd fe35 	bl	80012c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 8003656:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800365a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	4619      	mov	r1, r3
 8003662:	480c      	ldr	r0, [pc, #48]	@ (8003694 <_7SEG_GPIO_Init+0x1c8>)
 8003664:	f7fd fe2c 	bl	80012c0 <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 8003668:	2201      	movs	r2, #1
 800366a:	2100      	movs	r1, #0
 800366c:	2000      	movs	r0, #0
 800366e:	f000 f813 	bl	8003698 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 8003672:	2201      	movs	r2, #1
 8003674:	2100      	movs	r1, #0
 8003676:	2001      	movs	r0, #1
 8003678:	f000 f80e 	bl	8003698 <_7SEG_SetNumber>
}
 800367c:	bf00      	nop
 800367e:	3728      	adds	r7, #40	@ 0x28
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40023800 	.word	0x40023800
 8003688:	40020c00 	.word	0x40020c00
 800368c:	40020000 	.word	0x40020000
 8003690:	40020800 	.word	0x40020800
 8003694:	40021000 	.word	0x40021000

08003698 <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 81dc 	bne.w	8003a64 <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	4bcb      	ldr	r3, [pc, #812]	@ (80039dc <_7SEG_SetNumber+0x344>)
 80036b0:	fb83 2301 	smull	r2, r3, r3, r1
 80036b4:	109a      	asrs	r2, r3, #2
 80036b6:	17cb      	asrs	r3, r1, #31
 80036b8:	1ad2      	subs	r2, r2, r3
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	1aca      	subs	r2, r1, r3
 80036c4:	2a09      	cmp	r2, #9
 80036c6:	f200 81ba 	bhi.w	8003a3e <_7SEG_SetNumber+0x3a6>
 80036ca:	a301      	add	r3, pc, #4	@ (adr r3, 80036d0 <_7SEG_SetNumber+0x38>)
 80036cc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80036d0:	080036f9 	.word	0x080036f9
 80036d4:	0800374b 	.word	0x0800374b
 80036d8:	0800379d 	.word	0x0800379d
 80036dc:	080037ef 	.word	0x080037ef
 80036e0:	08003841 	.word	0x08003841
 80036e4:	08003893 	.word	0x08003893
 80036e8:	080038e5 	.word	0x080038e5
 80036ec:	08003937 	.word	0x08003937
 80036f0:	08003989 	.word	0x08003989
 80036f4:	080039ed 	.word	0x080039ed
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 80036f8:	2200      	movs	r2, #0
 80036fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80036fe:	48b8      	ldr	r0, [pc, #736]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003700:	f7fd ff92 	bl	8001628 <HAL_GPIO_WritePin>
 8003704:	2200      	movs	r2, #0
 8003706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800370a:	48b6      	ldr	r0, [pc, #728]	@ (80039e4 <_7SEG_SetNumber+0x34c>)
 800370c:	f7fd ff8c 	bl	8001628 <HAL_GPIO_WritePin>
 8003710:	2200      	movs	r2, #0
 8003712:	2140      	movs	r1, #64	@ 0x40
 8003714:	48b2      	ldr	r0, [pc, #712]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003716:	f7fd ff87 	bl	8001628 <HAL_GPIO_WritePin>
 800371a:	2200      	movs	r2, #0
 800371c:	2120      	movs	r1, #32
 800371e:	48b0      	ldr	r0, [pc, #704]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003720:	f7fd ff82 	bl	8001628 <HAL_GPIO_WritePin>
 8003724:	2200      	movs	r2, #0
 8003726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800372a:	48af      	ldr	r0, [pc, #700]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 800372c:	f7fd ff7c 	bl	8001628 <HAL_GPIO_WritePin>
 8003730:	2200      	movs	r2, #0
 8003732:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003736:	48ac      	ldr	r0, [pc, #688]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 8003738:	f7fd ff76 	bl	8001628 <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 800373c:	2201      	movs	r2, #1
 800373e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003742:	48a7      	ldr	r0, [pc, #668]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003744:	f7fd ff70 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003748:	e179      	b.n	8003a3e <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 800374a:	2200      	movs	r2, #0
 800374c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003750:	48a4      	ldr	r0, [pc, #656]	@ (80039e4 <_7SEG_SetNumber+0x34c>)
 8003752:	f7fd ff69 	bl	8001628 <HAL_GPIO_WritePin>
 8003756:	2200      	movs	r2, #0
 8003758:	2140      	movs	r1, #64	@ 0x40
 800375a:	48a1      	ldr	r0, [pc, #644]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 800375c:	f7fd ff64 	bl	8001628 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 8003760:	2201      	movs	r2, #1
 8003762:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003766:	489e      	ldr	r0, [pc, #632]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003768:	f7fd ff5e 	bl	8001628 <HAL_GPIO_WritePin>
 800376c:	2201      	movs	r2, #1
 800376e:	2120      	movs	r1, #32
 8003770:	489b      	ldr	r0, [pc, #620]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003772:	f7fd ff59 	bl	8001628 <HAL_GPIO_WritePin>
 8003776:	2201      	movs	r2, #1
 8003778:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800377c:	489a      	ldr	r0, [pc, #616]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 800377e:	f7fd ff53 	bl	8001628 <HAL_GPIO_WritePin>
 8003782:	2201      	movs	r2, #1
 8003784:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003788:	4897      	ldr	r0, [pc, #604]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 800378a:	f7fd ff4d 	bl	8001628 <HAL_GPIO_WritePin>
 800378e:	2201      	movs	r2, #1
 8003790:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003794:	4892      	ldr	r0, [pc, #584]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003796:	f7fd ff47 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 800379a:	e150      	b.n	8003a3e <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80037a2:	488f      	ldr	r0, [pc, #572]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80037a4:	f7fd ff40 	bl	8001628 <HAL_GPIO_WritePin>
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037ae:	488d      	ldr	r0, [pc, #564]	@ (80039e4 <_7SEG_SetNumber+0x34c>)
 80037b0:	f7fd ff3a 	bl	8001628 <HAL_GPIO_WritePin>
 80037b4:	2200      	movs	r2, #0
 80037b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037ba:	4889      	ldr	r0, [pc, #548]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80037bc:	f7fd ff34 	bl	8001628 <HAL_GPIO_WritePin>
 80037c0:	2200      	movs	r2, #0
 80037c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037c6:	4888      	ldr	r0, [pc, #544]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 80037c8:	f7fd ff2e 	bl	8001628 <HAL_GPIO_WritePin>
 80037cc:	2200      	movs	r2, #0
 80037ce:	2120      	movs	r1, #32
 80037d0:	4883      	ldr	r0, [pc, #524]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80037d2:	f7fd ff29 	bl	8001628 <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 80037d6:	2201      	movs	r2, #1
 80037d8:	2140      	movs	r1, #64	@ 0x40
 80037da:	4881      	ldr	r0, [pc, #516]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80037dc:	f7fd ff24 	bl	8001628 <HAL_GPIO_WritePin>
 80037e0:	2201      	movs	r2, #1
 80037e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037e6:	4880      	ldr	r0, [pc, #512]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 80037e8:	f7fd ff1e 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 80037ec:	e127      	b.n	8003a3e <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 80037ee:	2200      	movs	r2, #0
 80037f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80037f4:	487a      	ldr	r0, [pc, #488]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80037f6:	f7fd ff17 	bl	8001628 <HAL_GPIO_WritePin>
 80037fa:	2200      	movs	r2, #0
 80037fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003800:	4878      	ldr	r0, [pc, #480]	@ (80039e4 <_7SEG_SetNumber+0x34c>)
 8003802:	f7fd ff11 	bl	8001628 <HAL_GPIO_WritePin>
 8003806:	2200      	movs	r2, #0
 8003808:	2140      	movs	r1, #64	@ 0x40
 800380a:	4875      	ldr	r0, [pc, #468]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 800380c:	f7fd ff0c 	bl	8001628 <HAL_GPIO_WritePin>
 8003810:	2200      	movs	r2, #0
 8003812:	2120      	movs	r1, #32
 8003814:	4872      	ldr	r0, [pc, #456]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003816:	f7fd ff07 	bl	8001628 <HAL_GPIO_WritePin>
 800381a:	2200      	movs	r2, #0
 800381c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003820:	486f      	ldr	r0, [pc, #444]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003822:	f7fd ff01 	bl	8001628 <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 8003826:	2201      	movs	r2, #1
 8003828:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800382c:	486e      	ldr	r0, [pc, #440]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 800382e:	f7fd fefb 	bl	8001628 <HAL_GPIO_WritePin>
 8003832:	2201      	movs	r2, #1
 8003834:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003838:	486b      	ldr	r0, [pc, #428]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 800383a:	f7fd fef5 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 800383e:	e0fe      	b.n	8003a3e <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 8003840:	2200      	movs	r2, #0
 8003842:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003846:	4868      	ldr	r0, [pc, #416]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 8003848:	f7fd feee 	bl	8001628 <HAL_GPIO_WritePin>
 800384c:	2200      	movs	r2, #0
 800384e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003852:	4863      	ldr	r0, [pc, #396]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003854:	f7fd fee8 	bl	8001628 <HAL_GPIO_WritePin>
 8003858:	2200      	movs	r2, #0
 800385a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800385e:	4861      	ldr	r0, [pc, #388]	@ (80039e4 <_7SEG_SetNumber+0x34c>)
 8003860:	f7fd fee2 	bl	8001628 <HAL_GPIO_WritePin>
 8003864:	2200      	movs	r2, #0
 8003866:	2140      	movs	r1, #64	@ 0x40
 8003868:	485d      	ldr	r0, [pc, #372]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 800386a:	f7fd fedd 	bl	8001628 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 800386e:	2201      	movs	r2, #1
 8003870:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003874:	485a      	ldr	r0, [pc, #360]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003876:	f7fd fed7 	bl	8001628 <HAL_GPIO_WritePin>
 800387a:	2201      	movs	r2, #1
 800387c:	2120      	movs	r1, #32
 800387e:	4858      	ldr	r0, [pc, #352]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003880:	f7fd fed2 	bl	8001628 <HAL_GPIO_WritePin>
 8003884:	2201      	movs	r2, #1
 8003886:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800388a:	4857      	ldr	r0, [pc, #348]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 800388c:	f7fd fecc 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003890:	e0d5      	b.n	8003a3e <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 8003892:	2200      	movs	r2, #0
 8003894:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003898:	4851      	ldr	r0, [pc, #324]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 800389a:	f7fd fec5 	bl	8001628 <HAL_GPIO_WritePin>
 800389e:	2200      	movs	r2, #0
 80038a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038a4:	4850      	ldr	r0, [pc, #320]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 80038a6:	f7fd febf 	bl	8001628 <HAL_GPIO_WritePin>
 80038aa:	2200      	movs	r2, #0
 80038ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038b0:	484b      	ldr	r0, [pc, #300]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80038b2:	f7fd feb9 	bl	8001628 <HAL_GPIO_WritePin>
 80038b6:	2200      	movs	r2, #0
 80038b8:	2140      	movs	r1, #64	@ 0x40
 80038ba:	4849      	ldr	r0, [pc, #292]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80038bc:	f7fd feb4 	bl	8001628 <HAL_GPIO_WritePin>
 80038c0:	2200      	movs	r2, #0
 80038c2:	2120      	movs	r1, #32
 80038c4:	4846      	ldr	r0, [pc, #280]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80038c6:	f7fd feaf 	bl	8001628 <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 80038ca:	2201      	movs	r2, #1
 80038cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038d0:	4844      	ldr	r0, [pc, #272]	@ (80039e4 <_7SEG_SetNumber+0x34c>)
 80038d2:	f7fd fea9 	bl	8001628 <HAL_GPIO_WritePin>
 80038d6:	2201      	movs	r2, #1
 80038d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038dc:	4842      	ldr	r0, [pc, #264]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 80038de:	f7fd fea3 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 80038e2:	e0ac      	b.n	8003a3e <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 80038e4:	2200      	movs	r2, #0
 80038e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038ea:	483d      	ldr	r0, [pc, #244]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80038ec:	f7fd fe9c 	bl	8001628 <HAL_GPIO_WritePin>
 80038f0:	2200      	movs	r2, #0
 80038f2:	2140      	movs	r1, #64	@ 0x40
 80038f4:	483a      	ldr	r0, [pc, #232]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80038f6:	f7fd fe97 	bl	8001628 <HAL_GPIO_WritePin>
 80038fa:	2200      	movs	r2, #0
 80038fc:	2120      	movs	r1, #32
 80038fe:	4838      	ldr	r0, [pc, #224]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003900:	f7fd fe92 	bl	8001628 <HAL_GPIO_WritePin>
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800390a:	4837      	ldr	r0, [pc, #220]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 800390c:	f7fd fe8c 	bl	8001628 <HAL_GPIO_WritePin>
 8003910:	2200      	movs	r2, #0
 8003912:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003916:	4834      	ldr	r0, [pc, #208]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 8003918:	f7fd fe86 	bl	8001628 <HAL_GPIO_WritePin>
 800391c:	2200      	movs	r2, #0
 800391e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003922:	482f      	ldr	r0, [pc, #188]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003924:	f7fd fe80 	bl	8001628 <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 8003928:	2201      	movs	r2, #1
 800392a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800392e:	482d      	ldr	r0, [pc, #180]	@ (80039e4 <_7SEG_SetNumber+0x34c>)
 8003930:	f7fd fe7a 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003934:	e083      	b.n	8003a3e <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 8003936:	2200      	movs	r2, #0
 8003938:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800393c:	482a      	ldr	r0, [pc, #168]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 800393e:	f7fd fe73 	bl	8001628 <HAL_GPIO_WritePin>
 8003942:	2200      	movs	r2, #0
 8003944:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003948:	4825      	ldr	r0, [pc, #148]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 800394a:	f7fd fe6d 	bl	8001628 <HAL_GPIO_WritePin>
 800394e:	2200      	movs	r2, #0
 8003950:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003954:	4823      	ldr	r0, [pc, #140]	@ (80039e4 <_7SEG_SetNumber+0x34c>)
 8003956:	f7fd fe67 	bl	8001628 <HAL_GPIO_WritePin>
 800395a:	2200      	movs	r2, #0
 800395c:	2140      	movs	r1, #64	@ 0x40
 800395e:	4820      	ldr	r0, [pc, #128]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003960:	f7fd fe62 	bl	8001628 <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 8003964:	2201      	movs	r2, #1
 8003966:	2120      	movs	r1, #32
 8003968:	481d      	ldr	r0, [pc, #116]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 800396a:	f7fd fe5d 	bl	8001628 <HAL_GPIO_WritePin>
 800396e:	2201      	movs	r2, #1
 8003970:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003974:	481c      	ldr	r0, [pc, #112]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 8003976:	f7fd fe57 	bl	8001628 <HAL_GPIO_WritePin>
 800397a:	2201      	movs	r2, #1
 800397c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003980:	4817      	ldr	r0, [pc, #92]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003982:	f7fd fe51 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003986:	e05a      	b.n	8003a3e <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8003988:	2200      	movs	r2, #0
 800398a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800398e:	4814      	ldr	r0, [pc, #80]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 8003990:	f7fd fe4a 	bl	8001628 <HAL_GPIO_WritePin>
 8003994:	2200      	movs	r2, #0
 8003996:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800399a:	4812      	ldr	r0, [pc, #72]	@ (80039e4 <_7SEG_SetNumber+0x34c>)
 800399c:	f7fd fe44 	bl	8001628 <HAL_GPIO_WritePin>
 80039a0:	2200      	movs	r2, #0
 80039a2:	2140      	movs	r1, #64	@ 0x40
 80039a4:	480e      	ldr	r0, [pc, #56]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80039a6:	f7fd fe3f 	bl	8001628 <HAL_GPIO_WritePin>
 80039aa:	2200      	movs	r2, #0
 80039ac:	2120      	movs	r1, #32
 80039ae:	480c      	ldr	r0, [pc, #48]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80039b0:	f7fd fe3a 	bl	8001628 <HAL_GPIO_WritePin>
 80039b4:	2200      	movs	r2, #0
 80039b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039ba:	480b      	ldr	r0, [pc, #44]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 80039bc:	f7fd fe34 	bl	8001628 <HAL_GPIO_WritePin>
 80039c0:	2200      	movs	r2, #0
 80039c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80039c6:	4808      	ldr	r0, [pc, #32]	@ (80039e8 <_7SEG_SetNumber+0x350>)
 80039c8:	f7fd fe2e 	bl	8001628 <HAL_GPIO_WritePin>
 80039cc:	2200      	movs	r2, #0
 80039ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039d2:	4803      	ldr	r0, [pc, #12]	@ (80039e0 <_7SEG_SetNumber+0x348>)
 80039d4:	f7fd fe28 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 80039d8:	e031      	b.n	8003a3e <_7SEG_SetNumber+0x3a6>
 80039da:	bf00      	nop
 80039dc:	66666667 	.word	0x66666667
 80039e0:	40020c00 	.word	0x40020c00
 80039e4:	40020000 	.word	0x40020000
 80039e8:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 80039ec:	2200      	movs	r2, #0
 80039ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039f2:	48c8      	ldr	r0, [pc, #800]	@ (8003d14 <_7SEG_SetNumber+0x67c>)
 80039f4:	f7fd fe18 	bl	8001628 <HAL_GPIO_WritePin>
 80039f8:	2200      	movs	r2, #0
 80039fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039fe:	48c6      	ldr	r0, [pc, #792]	@ (8003d18 <_7SEG_SetNumber+0x680>)
 8003a00:	f7fd fe12 	bl	8001628 <HAL_GPIO_WritePin>
 8003a04:	2200      	movs	r2, #0
 8003a06:	2140      	movs	r1, #64	@ 0x40
 8003a08:	48c2      	ldr	r0, [pc, #776]	@ (8003d14 <_7SEG_SetNumber+0x67c>)
 8003a0a:	f7fd fe0d 	bl	8001628 <HAL_GPIO_WritePin>
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2120      	movs	r1, #32
 8003a12:	48c0      	ldr	r0, [pc, #768]	@ (8003d14 <_7SEG_SetNumber+0x67c>)
 8003a14:	f7fd fe08 	bl	8001628 <HAL_GPIO_WritePin>
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a1e:	48bf      	ldr	r0, [pc, #764]	@ (8003d1c <_7SEG_SetNumber+0x684>)
 8003a20:	f7fd fe02 	bl	8001628 <HAL_GPIO_WritePin>
 8003a24:	2200      	movs	r2, #0
 8003a26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a2a:	48ba      	ldr	r0, [pc, #744]	@ (8003d14 <_7SEG_SetNumber+0x67c>)
 8003a2c:	f7fd fdfc 	bl	8001628 <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8003a30:	2201      	movs	r2, #1
 8003a32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a36:	48b9      	ldr	r0, [pc, #740]	@ (8003d1c <_7SEG_SetNumber+0x684>)
 8003a38:	f7fd fdf6 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003a3c:	bf00      	nop
		}

		if(dp == ON)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d105      	bne.n	8003a50 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8003a44:	2200      	movs	r2, #0
 8003a46:	2180      	movs	r1, #128	@ 0x80
 8003a48:	48b2      	ldr	r0, [pc, #712]	@ (8003d14 <_7SEG_SetNumber+0x67c>)
 8003a4a:	f7fd fded 	bl	8001628 <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8003a4e:	e1ff      	b.n	8003e50 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f040 81fc 	bne.w	8003e50 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8003a58:	2201      	movs	r2, #1
 8003a5a:	2180      	movs	r1, #128	@ 0x80
 8003a5c:	48ad      	ldr	r0, [pc, #692]	@ (8003d14 <_7SEG_SetNumber+0x67c>)
 8003a5e:	f7fd fde3 	bl	8001628 <HAL_GPIO_WritePin>
}
 8003a62:	e1f5      	b.n	8003e50 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	f040 81f2 	bne.w	8003e50 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	4bac      	ldr	r3, [pc, #688]	@ (8003d20 <_7SEG_SetNumber+0x688>)
 8003a70:	fb83 2301 	smull	r2, r3, r3, r1
 8003a74:	109a      	asrs	r2, r3, #2
 8003a76:	17cb      	asrs	r3, r1, #31
 8003a78:	1ad2      	subs	r2, r2, r3
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	1aca      	subs	r2, r1, r3
 8003a84:	2a09      	cmp	r2, #9
 8003a86:	f200 81d0 	bhi.w	8003e2a <_7SEG_SetNumber+0x792>
 8003a8a:	a301      	add	r3, pc, #4	@ (adr r3, 8003a90 <_7SEG_SetNumber+0x3f8>)
 8003a8c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003b0f 	.word	0x08003b0f
 8003a98:	08003b65 	.word	0x08003b65
 8003a9c:	08003bbb 	.word	0x08003bbb
 8003aa0:	08003c11 	.word	0x08003c11
 8003aa4:	08003c67 	.word	0x08003c67
 8003aa8:	08003cbd 	.word	0x08003cbd
 8003aac:	08003d29 	.word	0x08003d29
 8003ab0:	08003d7f 	.word	0x08003d7f
 8003ab4:	08003dd5 	.word	0x08003dd5
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003abe:	4899      	ldr	r0, [pc, #612]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003ac0:	f7fd fdb2 	bl	8001628 <HAL_GPIO_WritePin>
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003aca:	4896      	ldr	r0, [pc, #600]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003acc:	f7fd fdac 	bl	8001628 <HAL_GPIO_WritePin>
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ad6:	4893      	ldr	r0, [pc, #588]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003ad8:	f7fd fda6 	bl	8001628 <HAL_GPIO_WritePin>
 8003adc:	2200      	movs	r2, #0
 8003ade:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ae2:	4890      	ldr	r0, [pc, #576]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003ae4:	f7fd fda0 	bl	8001628 <HAL_GPIO_WritePin>
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003aee:	488d      	ldr	r0, [pc, #564]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003af0:	f7fd fd9a 	bl	8001628 <HAL_GPIO_WritePin>
 8003af4:	2200      	movs	r2, #0
 8003af6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003afa:	488a      	ldr	r0, [pc, #552]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003afc:	f7fd fd94 	bl	8001628 <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8003b00:	2201      	movs	r2, #1
 8003b02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b06:	4887      	ldr	r0, [pc, #540]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b08:	f7fd fd8e 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003b0c:	e18d      	b.n	8003e2a <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b14:	4883      	ldr	r0, [pc, #524]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b16:	f7fd fd87 	bl	8001628 <HAL_GPIO_WritePin>
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b20:	4880      	ldr	r0, [pc, #512]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b22:	f7fd fd81 	bl	8001628 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8003b26:	2201      	movs	r2, #1
 8003b28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b2c:	487d      	ldr	r0, [pc, #500]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b2e:	f7fd fd7b 	bl	8001628 <HAL_GPIO_WritePin>
 8003b32:	2201      	movs	r2, #1
 8003b34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b38:	487a      	ldr	r0, [pc, #488]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b3a:	f7fd fd75 	bl	8001628 <HAL_GPIO_WritePin>
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b44:	4877      	ldr	r0, [pc, #476]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b46:	f7fd fd6f 	bl	8001628 <HAL_GPIO_WritePin>
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b50:	4874      	ldr	r0, [pc, #464]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b52:	f7fd fd69 	bl	8001628 <HAL_GPIO_WritePin>
 8003b56:	2201      	movs	r2, #1
 8003b58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b5c:	4871      	ldr	r0, [pc, #452]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b5e:	f7fd fd63 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003b62:	e162      	b.n	8003e2a <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8003b64:	2200      	movs	r2, #0
 8003b66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b6a:	486e      	ldr	r0, [pc, #440]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b6c:	f7fd fd5c 	bl	8001628 <HAL_GPIO_WritePin>
 8003b70:	2200      	movs	r2, #0
 8003b72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b76:	486b      	ldr	r0, [pc, #428]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b78:	f7fd fd56 	bl	8001628 <HAL_GPIO_WritePin>
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b82:	4868      	ldr	r0, [pc, #416]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b84:	f7fd fd50 	bl	8001628 <HAL_GPIO_WritePin>
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b8e:	4865      	ldr	r0, [pc, #404]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b90:	f7fd fd4a 	bl	8001628 <HAL_GPIO_WritePin>
 8003b94:	2200      	movs	r2, #0
 8003b96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b9a:	4862      	ldr	r0, [pc, #392]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003b9c:	f7fd fd44 	bl	8001628 <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ba6:	485f      	ldr	r0, [pc, #380]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003ba8:	f7fd fd3e 	bl	8001628 <HAL_GPIO_WritePin>
 8003bac:	2201      	movs	r2, #1
 8003bae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bb2:	485c      	ldr	r0, [pc, #368]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003bb4:	f7fd fd38 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003bb8:	e137      	b.n	8003e2a <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003bc0:	4858      	ldr	r0, [pc, #352]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003bc2:	f7fd fd31 	bl	8001628 <HAL_GPIO_WritePin>
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003bcc:	4855      	ldr	r0, [pc, #340]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003bce:	f7fd fd2b 	bl	8001628 <HAL_GPIO_WritePin>
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bd8:	4852      	ldr	r0, [pc, #328]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003bda:	f7fd fd25 	bl	8001628 <HAL_GPIO_WritePin>
 8003bde:	2200      	movs	r2, #0
 8003be0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003be4:	484f      	ldr	r0, [pc, #316]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003be6:	f7fd fd1f 	bl	8001628 <HAL_GPIO_WritePin>
 8003bea:	2200      	movs	r2, #0
 8003bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bf0:	484c      	ldr	r0, [pc, #304]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003bf2:	f7fd fd19 	bl	8001628 <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bfc:	4849      	ldr	r0, [pc, #292]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003bfe:	f7fd fd13 	bl	8001628 <HAL_GPIO_WritePin>
 8003c02:	2201      	movs	r2, #1
 8003c04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c08:	4846      	ldr	r0, [pc, #280]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c0a:	f7fd fd0d 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003c0e:	e10c      	b.n	8003e2a <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8003c10:	2200      	movs	r2, #0
 8003c12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c16:	4843      	ldr	r0, [pc, #268]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c18:	f7fd fd06 	bl	8001628 <HAL_GPIO_WritePin>
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c22:	4840      	ldr	r0, [pc, #256]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c24:	f7fd fd00 	bl	8001628 <HAL_GPIO_WritePin>
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c2e:	483d      	ldr	r0, [pc, #244]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c30:	f7fd fcfa 	bl	8001628 <HAL_GPIO_WritePin>
 8003c34:	2200      	movs	r2, #0
 8003c36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c3a:	483a      	ldr	r0, [pc, #232]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c3c:	f7fd fcf4 	bl	8001628 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8003c40:	2201      	movs	r2, #1
 8003c42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c46:	4837      	ldr	r0, [pc, #220]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c48:	f7fd fcee 	bl	8001628 <HAL_GPIO_WritePin>
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c52:	4834      	ldr	r0, [pc, #208]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c54:	f7fd fce8 	bl	8001628 <HAL_GPIO_WritePin>
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c5e:	4831      	ldr	r0, [pc, #196]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c60:	f7fd fce2 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003c64:	e0e1      	b.n	8003e2a <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8003c66:	2200      	movs	r2, #0
 8003c68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c6c:	482d      	ldr	r0, [pc, #180]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c6e:	f7fd fcdb 	bl	8001628 <HAL_GPIO_WritePin>
 8003c72:	2200      	movs	r2, #0
 8003c74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c78:	482a      	ldr	r0, [pc, #168]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c7a:	f7fd fcd5 	bl	8001628 <HAL_GPIO_WritePin>
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c84:	4827      	ldr	r0, [pc, #156]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c86:	f7fd fccf 	bl	8001628 <HAL_GPIO_WritePin>
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c90:	4824      	ldr	r0, [pc, #144]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c92:	f7fd fcc9 	bl	8001628 <HAL_GPIO_WritePin>
 8003c96:	2200      	movs	r2, #0
 8003c98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c9c:	4821      	ldr	r0, [pc, #132]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003c9e:	f7fd fcc3 	bl	8001628 <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ca8:	481e      	ldr	r0, [pc, #120]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003caa:	f7fd fcbd 	bl	8001628 <HAL_GPIO_WritePin>
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cb4:	481b      	ldr	r0, [pc, #108]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003cb6:	f7fd fcb7 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003cba:	e0b6      	b.n	8003e2a <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003cc2:	4818      	ldr	r0, [pc, #96]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003cc4:	f7fd fcb0 	bl	8001628 <HAL_GPIO_WritePin>
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cce:	4815      	ldr	r0, [pc, #84]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003cd0:	f7fd fcaa 	bl	8001628 <HAL_GPIO_WritePin>
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003cda:	4812      	ldr	r0, [pc, #72]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003cdc:	f7fd fca4 	bl	8001628 <HAL_GPIO_WritePin>
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ce6:	480f      	ldr	r0, [pc, #60]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003ce8:	f7fd fc9e 	bl	8001628 <HAL_GPIO_WritePin>
 8003cec:	2200      	movs	r2, #0
 8003cee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cf2:	480c      	ldr	r0, [pc, #48]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003cf4:	f7fd fc98 	bl	8001628 <HAL_GPIO_WritePin>
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003cfe:	4809      	ldr	r0, [pc, #36]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003d00:	f7fd fc92 	bl	8001628 <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8003d04:	2201      	movs	r2, #1
 8003d06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d0a:	4806      	ldr	r0, [pc, #24]	@ (8003d24 <_7SEG_SetNumber+0x68c>)
 8003d0c:	f7fd fc8c 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003d10:	e08b      	b.n	8003e2a <_7SEG_SetNumber+0x792>
 8003d12:	bf00      	nop
 8003d14:	40020c00 	.word	0x40020c00
 8003d18:	40020000 	.word	0x40020000
 8003d1c:	40020800 	.word	0x40020800
 8003d20:	66666667 	.word	0x66666667
 8003d24:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d2e:	484a      	ldr	r0, [pc, #296]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003d30:	f7fd fc7a 	bl	8001628 <HAL_GPIO_WritePin>
 8003d34:	2200      	movs	r2, #0
 8003d36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d3a:	4847      	ldr	r0, [pc, #284]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003d3c:	f7fd fc74 	bl	8001628 <HAL_GPIO_WritePin>
 8003d40:	2200      	movs	r2, #0
 8003d42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d46:	4844      	ldr	r0, [pc, #272]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003d48:	f7fd fc6e 	bl	8001628 <HAL_GPIO_WritePin>
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d52:	4841      	ldr	r0, [pc, #260]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003d54:	f7fd fc68 	bl	8001628 <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003d5e:	483e      	ldr	r0, [pc, #248]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003d60:	f7fd fc62 	bl	8001628 <HAL_GPIO_WritePin>
 8003d64:	2201      	movs	r2, #1
 8003d66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d6a:	483b      	ldr	r0, [pc, #236]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003d6c:	f7fd fc5c 	bl	8001628 <HAL_GPIO_WritePin>
 8003d70:	2201      	movs	r2, #1
 8003d72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d76:	4838      	ldr	r0, [pc, #224]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003d78:	f7fd fc56 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003d7c:	e055      	b.n	8003e2a <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d84:	4834      	ldr	r0, [pc, #208]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003d86:	f7fd fc4f 	bl	8001628 <HAL_GPIO_WritePin>
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d90:	4831      	ldr	r0, [pc, #196]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003d92:	f7fd fc49 	bl	8001628 <HAL_GPIO_WritePin>
 8003d96:	2200      	movs	r2, #0
 8003d98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d9c:	482e      	ldr	r0, [pc, #184]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003d9e:	f7fd fc43 	bl	8001628 <HAL_GPIO_WritePin>
 8003da2:	2200      	movs	r2, #0
 8003da4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003da8:	482b      	ldr	r0, [pc, #172]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003daa:	f7fd fc3d 	bl	8001628 <HAL_GPIO_WritePin>
 8003dae:	2200      	movs	r2, #0
 8003db0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003db4:	4828      	ldr	r0, [pc, #160]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003db6:	f7fd fc37 	bl	8001628 <HAL_GPIO_WritePin>
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003dc0:	4825      	ldr	r0, [pc, #148]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003dc2:	f7fd fc31 	bl	8001628 <HAL_GPIO_WritePin>
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003dcc:	4822      	ldr	r0, [pc, #136]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003dce:	f7fd fc2b 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003dd2:	e02a      	b.n	8003e2a <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dda:	481f      	ldr	r0, [pc, #124]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003ddc:	f7fd fc24 	bl	8001628 <HAL_GPIO_WritePin>
 8003de0:	2200      	movs	r2, #0
 8003de2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003de6:	481c      	ldr	r0, [pc, #112]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003de8:	f7fd fc1e 	bl	8001628 <HAL_GPIO_WritePin>
 8003dec:	2200      	movs	r2, #0
 8003dee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003df2:	4819      	ldr	r0, [pc, #100]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003df4:	f7fd fc18 	bl	8001628 <HAL_GPIO_WritePin>
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003dfe:	4816      	ldr	r0, [pc, #88]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003e00:	f7fd fc12 	bl	8001628 <HAL_GPIO_WritePin>
 8003e04:	2200      	movs	r2, #0
 8003e06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e0a:	4813      	ldr	r0, [pc, #76]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003e0c:	f7fd fc0c 	bl	8001628 <HAL_GPIO_WritePin>
 8003e10:	2200      	movs	r2, #0
 8003e12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e16:	4810      	ldr	r0, [pc, #64]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003e18:	f7fd fc06 	bl	8001628 <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e22:	480d      	ldr	r0, [pc, #52]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003e24:	f7fd fc00 	bl	8001628 <HAL_GPIO_WritePin>
				break;
 8003e28:	bf00      	nop
		if(dp == ON)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d106      	bne.n	8003e3e <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8003e30:	2200      	movs	r2, #0
 8003e32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e36:	4808      	ldr	r0, [pc, #32]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003e38:	f7fd fbf6 	bl	8001628 <HAL_GPIO_WritePin>
}
 8003e3c:	e008      	b.n	8003e50 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d105      	bne.n	8003e50 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8003e44:	2201      	movs	r2, #1
 8003e46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e4a:	4803      	ldr	r0, [pc, #12]	@ (8003e58 <_7SEG_SetNumber+0x7c0>)
 8003e4c:	f7fd fbec 	bl	8001628 <HAL_GPIO_WritePin>
}
 8003e50:	bf00      	nop
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40021000 	.word	0x40021000

08003e5c <get_stopwatch_mode>:
{
	return &alarm_mode;
}

Mode* get_stopwatch_mode(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
	return &stopwatch_mode;
 8003e60:	4b02      	ldr	r3, [pc, #8]	@ (8003e6c <get_stopwatch_mode+0x10>)
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	2000000c 	.word	0x2000000c

08003e70 <count_up>:
		get_recorded_time,
		get_time
};

static void count_up(Timer* this)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	this->count++;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	605a      	str	r2, [r3, #4]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <set_count>:

static void set_count(Timer* this, uint32_t count)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
	this->count = count;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <record_count>:

static void record_count(Timer* this)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
	this->recorded_count = this->count;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <get_recorded_count>:

static uint32_t get_recorded_count(Timer* this)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
	return this->recorded_count;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <record_time>:

static void record_time(Timer* this, Time* time)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
	this->time = time;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	601a      	str	r2, [r3, #0]
	this->time->hours             = this->count / 3600000 % 24;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4a26      	ldr	r2, [pc, #152]	@ (8003f90 <record_time+0xb0>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	0d59      	lsrs	r1, r3, #21
 8003efc:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <record_time+0xb4>)
 8003efe:	fba3 2301 	umull	r2, r3, r3, r1
 8003f02:	091a      	lsrs	r2, r3, #4
 8003f04:	4613      	mov	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4413      	add	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	1aca      	subs	r2, r1, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]
	this->time->minutes           = this->count / 60000 % 60;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f98 <record_time+0xb8>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	0b99      	lsrs	r1, r3, #14
 8003f22:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <record_time+0xbc>)
 8003f24:	fba3 2301 	umull	r2, r3, r3, r1
 8003f28:	095a      	lsrs	r2, r3, #5
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	1aca      	subs	r2, r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	705a      	strb	r2, [r3, #1]
	this->time->seconds           = this->count / 1000 % 60;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4a17      	ldr	r2, [pc, #92]	@ (8003fa0 <record_time+0xc0>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	0999      	lsrs	r1, r3, #6
 8003f48:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <record_time+0xbc>)
 8003f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f4e:	095a      	lsrs	r2, r3, #5
 8003f50:	4613      	mov	r3, r2
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	1aca      	subs	r2, r1, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	709a      	strb	r2, [r3, #2]
	this->time->_100_milliseconds = this->count / 100;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4a0f      	ldr	r2, [pc, #60]	@ (8003fa4 <record_time+0xc4>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	095a      	lsrs	r2, r3, #5
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	70da      	strb	r2, [r3, #3]
	this->time->milliseconds      = this->count;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	711a      	strb	r2, [r3, #4]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	95217cb1 	.word	0x95217cb1
 8003f94:	aaaaaaab 	.word	0xaaaaaaab
 8003f98:	45e7b273 	.word	0x45e7b273
 8003f9c:	88888889 	.word	0x88888889
 8003fa0:	10624dd3 	.word	0x10624dd3
 8003fa4:	51eb851f 	.word	0x51eb851f

08003fa8 <get_recorded_time>:

static uint8_t get_recorded_time(Timer* this, Time* time, TimeKind time_kind)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	71fb      	strb	r3, [r7, #7]
	this->time = time;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	601a      	str	r2, [r3, #0]
	switch(time_kind)
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d820      	bhi.n	8004004 <get_recorded_time+0x5c>
 8003fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc8 <get_recorded_time+0x20>)
 8003fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc8:	08003fdd 	.word	0x08003fdd
 8003fcc:	08003fe5 	.word	0x08003fe5
 8003fd0:	08003fed 	.word	0x08003fed
 8003fd4:	08003ff5 	.word	0x08003ff5
 8003fd8:	08003ffd 	.word	0x08003ffd
	{
	case HOURS:
		return this->time->hours;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	e011      	b.n	8004008 <get_recorded_time+0x60>
		break;
	case MINUTES:
		return this->time->minutes;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	785b      	ldrb	r3, [r3, #1]
 8003fea:	e00d      	b.n	8004008 <get_recorded_time+0x60>
		break;
	case SECONDS:
		return this->time->seconds;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	789b      	ldrb	r3, [r3, #2]
 8003ff2:	e009      	b.n	8004008 <get_recorded_time+0x60>
		break;
	case _100_MILLISECONDS:
		return this->time->_100_milliseconds;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	78db      	ldrb	r3, [r3, #3]
 8003ffa:	e005      	b.n	8004008 <get_recorded_time+0x60>
		break;
	case MILLISECONDS:
		return this->time->milliseconds;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	791b      	ldrb	r3, [r3, #4]
 8004002:	e001      	b.n	8004008 <get_recorded_time+0x60>
		break;
	default:
		break;
 8004004:	bf00      	nop
	}

	return -1;
 8004006:	23ff      	movs	r3, #255	@ 0xff
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <get_time>:

static uint8_t get_time(Timer* this, TimeKind time_kind)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	70fb      	strb	r3, [r7, #3]
	switch(time_kind)
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	2b04      	cmp	r3, #4
 8004024:	d854      	bhi.n	80040d0 <get_time+0xbc>
 8004026:	a201      	add	r2, pc, #4	@ (adr r2, 800402c <get_time+0x18>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	08004041 	.word	0x08004041
 8004030:	08004063 	.word	0x08004063
 8004034:	08004085 	.word	0x08004085
 8004038:	080040a7 	.word	0x080040a7
 800403c:	080040c9 	.word	0x080040c9
	{
	case HOURS:
		return this->count / 3600000 % 24;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4a26      	ldr	r2, [pc, #152]	@ (80040e0 <get_time+0xcc>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	0d59      	lsrs	r1, r3, #21
 800404c:	4b25      	ldr	r3, [pc, #148]	@ (80040e4 <get_time+0xd0>)
 800404e:	fba3 2301 	umull	r2, r3, r3, r1
 8004052:	091a      	lsrs	r2, r3, #4
 8004054:	4613      	mov	r3, r2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	4413      	add	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	1aca      	subs	r2, r1, r3
 800405e:	b2d3      	uxtb	r3, r2
 8004060:	e038      	b.n	80040d4 <get_time+0xc0>
		break;
	case MINUTES:
		return this->count / 60000 % 60;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4a20      	ldr	r2, [pc, #128]	@ (80040e8 <get_time+0xd4>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	0b99      	lsrs	r1, r3, #14
 800406e:	4b1f      	ldr	r3, [pc, #124]	@ (80040ec <get_time+0xd8>)
 8004070:	fba3 2301 	umull	r2, r3, r3, r1
 8004074:	095a      	lsrs	r2, r3, #5
 8004076:	4613      	mov	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	1aca      	subs	r2, r1, r3
 8004080:	b2d3      	uxtb	r3, r2
 8004082:	e027      	b.n	80040d4 <get_time+0xc0>
		break;
	case SECONDS:
		return this->count / 1000 % 60;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a19      	ldr	r2, [pc, #100]	@ (80040f0 <get_time+0xdc>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	0999      	lsrs	r1, r3, #6
 8004090:	4b16      	ldr	r3, [pc, #88]	@ (80040ec <get_time+0xd8>)
 8004092:	fba3 2301 	umull	r2, r3, r3, r1
 8004096:	095a      	lsrs	r2, r3, #5
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	1aca      	subs	r2, r1, r3
 80040a2:	b2d3      	uxtb	r3, r2
 80040a4:	e016      	b.n	80040d4 <get_time+0xc0>
		break;
	case _100_MILLISECONDS:
		return this->count % 1000 / 100;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <get_time+0xdc>)
 80040ac:	fba3 1302 	umull	r1, r3, r3, r2
 80040b0:	099b      	lsrs	r3, r3, #6
 80040b2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	4a0d      	ldr	r2, [pc, #52]	@ (80040f4 <get_time+0xe0>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e005      	b.n	80040d4 <get_time+0xc0>
		break;
	case MILLISECONDS:
		return this->count;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e001      	b.n	80040d4 <get_time+0xc0>
		break;
	default:
		break;
 80040d0:	bf00      	nop
	}

	return -1;
 80040d2:	23ff      	movs	r3, #255	@ 0xff
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	95217cb1 	.word	0x95217cb1
 80040e4:	aaaaaaab 	.word	0xaaaaaaab
 80040e8:	45e7b273 	.word	0x45e7b273
 80040ec:	88888889 	.word	0x88888889
 80040f0:	10624dd3 	.word	0x10624dd3
 80040f4:	51eb851f 	.word	0x51eb851f

080040f8 <get_timer>:
{
	return &recorded_run_time;
}

Timer* get_timer(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
	return &timer;
 80040fc:	4b02      	ldr	r3, [pc, #8]	@ (8004108 <get_timer+0x10>)
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	2000001c 	.word	0x2000001c

0800410c <receive>:
#include <_003_uart.h>

extern UART_HandleTypeDef huart3;

static void receive(Uart* this)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(this->huart, this->pData, this->Size);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6859      	ldr	r1, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	891b      	ldrh	r3, [r3, #8]
 8004120:	461a      	mov	r2, r3
 8004122:	f7fe faaf 	bl	8002684 <HAL_UART_Receive_IT>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <get_data>:

static uint8_t get_data(Uart* this)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
	return *this->pData;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	781b      	ldrb	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <reset_data>:

static void reset_data(Uart* this)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	*(this->pData) = 0;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <get_uart>:
static uint8_t data;

static Uart uart = { &huart3, &data, 1, NULL, receive, get_data, reset_data };

Uart* get_uart(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
	return &uart;
 8004168:	4b02      	ldr	r3, [pc, #8]	@ (8004174 <get_uart+0x10>)
}
 800416a:	4618      	mov	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	20000044 	.word	0x20000044

08004178 <set_mode>:


DigitalClock clock = { .mode = NULL, set_mode, operate };

static void set_mode(DigitalClock* this, Mode* mode)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
	this->mode = mode;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	601a      	str	r2, [r3, #0]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <operate>:

static void operate(DigitalClock* this)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	this->mode->operate_clock(this);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <operate_stopwatch_mode_digital_clock>:
		this->set_mode(this, GET_INSTANCE(stopwatch_mode));
	}
}

void operate_stopwatch_mode_digital_clock(DigitalClock* this)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]

	if (false) // sw1_short_press
	{
		this->set_mode(this, GET_INSTANCE(timer_mode));
	}
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <get_clock>:
		this->set_mode(this, GET_INSTANCE(clock_mode));
	}
}

DigitalClock* get_clock(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
	clock.mode = GET_INSTANCE(stopwatch_mode);
 80041c8:	f7ff fe48 	bl	8003e5c <get_stopwatch_mode>
 80041cc:	4603      	mov	r3, r0
 80041ce:	4a02      	ldr	r2, [pc, #8]	@ (80041d8 <get_clock+0x14>)
 80041d0:	6013      	str	r3, [r2, #0]
	return &clock;
 80041d2:	4b01      	ldr	r3, [pc, #4]	@ (80041d8 <get_clock+0x14>)
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000060 	.word	0x20000060

080041dc <operate_stopwatch_mode_lcd>:
{

}

void operate_stopwatch_mode_lcd(Lcd* this)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <operate_stopwatch_mode_segment>:
{

}

void operate_stopwatch_mode_segment(SevenSegment* this)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]

}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <update>:


#include <_105_button.h>

static void update(Button* this)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(this->GPIOx, this->GPIO_Pin) == GPIO_PIN_SET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	889b      	ldrh	r3, [r3, #4]
 8004214:	4619      	mov	r1, r3
 8004216:	4610      	mov	r0, r2
 8004218:	f7fd f9ee 	bl	80015f8 <HAL_GPIO_ReadPin>
 800421c:	4603      	mov	r3, r0
 800421e:	2b01      	cmp	r3, #1
 8004220:	d10a      	bne.n	8004238 <update+0x34>
	{
		if (this->_is_pressed == false) this->_is_pressed = true;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	799b      	ldrb	r3, [r3, #6]
 8004226:	f083 0301 	eor.w	r3, r3, #1
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <update+0x42>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		if (this->_is_pressed == true) this->_is_pressed = false;
	}
}
 8004236:	e006      	b.n	8004246 <update+0x42>
		if (this->_is_pressed == true) this->_is_pressed = false;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	799b      	ldrb	r3, [r3, #6]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <update+0x42>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	719a      	strb	r2, [r3, #6]
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <is_pressed>:

static bool is_pressed(Button* this)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
	return this->_is_pressed;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	799b      	ldrb	r3, [r3, #6]
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <get_button_1>:
static Button button_2 = { BUTTON_2_GPIO_Port, BUTTON_2_Pin, false, update, is_pressed };
static Button button_3 = { BUTTON_3_GPIO_Port, BUTTON_3_Pin, false, update, is_pressed };
static Button button_4 = { BUTTON_4_GPIO_Port, BUTTON_4_Pin, false, update, is_pressed };

Button* get_button_1(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
	return &button_1;
 800426c:	4b02      	ldr	r3, [pc, #8]	@ (8004278 <get_button_1+0x10>)
}
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	2000006c 	.word	0x2000006c

0800427c <get_button_2>:

Button* get_button_2(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
	return &button_2;
 8004280:	4b02      	ldr	r3, [pc, #8]	@ (800428c <get_button_2+0x10>)
}
 8004282:	4618      	mov	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	2000007c 	.word	0x2000007c

08004290 <get_button_3>:

Button* get_button_3(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
	return &button_3;
 8004294:	4b02      	ldr	r3, [pc, #8]	@ (80042a0 <get_button_3+0x10>)
}
 8004296:	4618      	mov	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	2000008c 	.word	0x2000008c

080042a4 <get_button_4>:

Button* get_button_4(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
	return &button_4;
 80042a8:	4b02      	ldr	r3, [pc, #8]	@ (80042b4 <get_button_4+0x10>)
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	2000009c 	.word	0x2000009c

080042b8 <memset>:
 80042b8:	4402      	add	r2, r0
 80042ba:	4603      	mov	r3, r0
 80042bc:	4293      	cmp	r3, r2
 80042be:	d100      	bne.n	80042c2 <memset+0xa>
 80042c0:	4770      	bx	lr
 80042c2:	f803 1b01 	strb.w	r1, [r3], #1
 80042c6:	e7f9      	b.n	80042bc <memset+0x4>

080042c8 <__libc_init_array>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004300 <__libc_init_array+0x38>)
 80042cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004304 <__libc_init_array+0x3c>)
 80042ce:	1b64      	subs	r4, r4, r5
 80042d0:	10a4      	asrs	r4, r4, #2
 80042d2:	2600      	movs	r6, #0
 80042d4:	42a6      	cmp	r6, r4
 80042d6:	d109      	bne.n	80042ec <__libc_init_array+0x24>
 80042d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004308 <__libc_init_array+0x40>)
 80042da:	4c0c      	ldr	r4, [pc, #48]	@ (800430c <__libc_init_array+0x44>)
 80042dc:	f000 f818 	bl	8004310 <_init>
 80042e0:	1b64      	subs	r4, r4, r5
 80042e2:	10a4      	asrs	r4, r4, #2
 80042e4:	2600      	movs	r6, #0
 80042e6:	42a6      	cmp	r6, r4
 80042e8:	d105      	bne.n	80042f6 <__libc_init_array+0x2e>
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
 80042ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f0:	4798      	blx	r3
 80042f2:	3601      	adds	r6, #1
 80042f4:	e7ee      	b.n	80042d4 <__libc_init_array+0xc>
 80042f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042fa:	4798      	blx	r3
 80042fc:	3601      	adds	r6, #1
 80042fe:	e7f2      	b.n	80042e6 <__libc_init_array+0x1e>
 8004300:	08004348 	.word	0x08004348
 8004304:	08004348 	.word	0x08004348
 8004308:	08004348 	.word	0x08004348
 800430c:	0800434c 	.word	0x0800434c

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
