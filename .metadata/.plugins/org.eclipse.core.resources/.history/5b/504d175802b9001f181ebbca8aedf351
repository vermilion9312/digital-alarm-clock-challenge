/*
 * lcd.c
 *
 *  Created on: Dec 13, 2024
 *      Author: LeeJooHo
 */


#include "lcd.h"

static void stop(Lcd* this);
static void run(Lcd* this);
static void pause(Lcd* this);

Lcd lcd = { .operate = operate };

static void stop(Lcd* this)
{
	Button* button_2 = GET_INSTANCE(button_2);
	static bool previous_button = false;

	if (previous_button = false && button_2->is_pressed(button_2) == true)
	{
		this->operate = run;
	}

	previous_button = button_2->is_pressed(button);
}

static void run(Lcd* this)
{
	Button* button_2 = GET_INSTANCE(button_2);
	Button* button_3 = GET_INSTANCE(button_3);
	Button* button_4 = GET_INSTANCE(button_4);
	static bool previous_button_2 = false;
	static bool previous_button_3 = false;
	static bool previous_button_4 = false;

	if (previous_button_2 == false && button_2->is_pressed(button_2) == true)
	{
		this->operate = pause;
	}

	if (previous_button_3 == false && button_3->is_pressed(button_3) == true)
	{

	}

	if (previous_button_4 == false && button_4->is_pressed(button_4) == true)
	{

	}

	previous_button_2 = button_2->is_pressed(button_2);
	previous_button_3 = button_3->is_pressed(button_3);
	previous_button_4 = button_4->is_pressed(button_4);
}

static void pause(Lcd* this)
{
	Button* button_2 = GET_INSTANCE(button_2);
	Button* button_3 = GET_INSTANCE(button_3);
	Button* button_4 = GET_INSTANCE(button_4);
	static bool previous_button_2 = false;
	static bool previous_button_3 = false;
	static bool previous_button_4 = false;


	if (previous_button_2 == false && button_2->is_pressed(button_2) == true)
	{
		this->operate = run;
	}

	if (previous_button_3 == false && button_3->is_pressed(button_3) == true)
	{

	}

	if (previous_button_4 == false && button_4->is_pressed(button_4) == true)
	{

	}

	previous_button_2 = button_2->is_pressed(button_2);
	previous_button_3 = button_3->is_pressed(button_3);
	previous_button_4 = button_4->is_pressed(button_4);
}

void display_lcd_top_line(void)
{


	Timer* timer = GET_INSTANCE(timer);
	char string[20] = { 0, };
	char seconds[20] = { 0, };
	char minutes[20] = { 0, };
	char housrs[20] = { 0, };

	CLCD_Puts(0, 0, "STW");

	sprintf(housrs,"%02d", timer->get_hours(timer));
	CLCD_Puts(4, 0, housrs);

	CLCD_Puts(6, 0, ":");

	sprintf(minutes,"%02d", timer->get_minutes(timer));
	CLCD_Puts(7, 0, minutes);

	CLCD_Puts(9, 0, ":");

	sprintf(seconds, "%02d", timer->get_seconds(timer));
	CLCD_Puts(10, 0, seconds);

	CLCD_Puts(12, 0, ".");

	sprintf(string, "%03d", timer->get_milliseconds(timer));
	CLCD_Puts(13, 0, string);
}


Lcd* get_lcd(void)
{
	return &lcd;
}
