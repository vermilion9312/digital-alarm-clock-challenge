/*
 * led.c
 *
 *  Created on: Nov 30, 2024
 *      Author: vermi
 */

#ifndef SRC_C_
#define SRC_C_

#include "led.h"

static void turn_on_led(Led* this, Button* button);
static void turn_off_led(Led* this, Button* button);

State left_red = { LEFT_RED_GPIO_Port, LEFT_RED_Pin };
State left_green = { LEFT_GREEN_GPIO_Port, LEFT_GREEN_Pin };
State left_blue = { LEFT_BLUE_GPIO_Port, LEFT_BLUE_Pin };

State right_red = { RIGHT_RED_GPIO_Port, RIGHT_RED_Pin };
State right_green = { RIGHT_GREEN_GPIO_Port, RIGHT_GREEN_Pin };
State right_blue = { RIGHT_BLUE_GPIO_Port, RIGHT_BLUE_Pin };

Led red    = { .state = &left_red   .last_button = false, .operate = turn_off_led,  .on = turn_on_led,  .off = turn_off_led };
Led green  = { .state = &left_green .last_button = false, .operate = turn_off_led,  .on = turn_on_led,  .off = turn_off_led };
Led blue   = { .state = &left_blue  .last_button = false, .operate = turn_off_led,  .on = turn_on_led,  .off = turn_off_led };

static void turn_on_led(Led* this, Button* button)
{
	HAL_GPIO_WritePin(this->GPIOx, this->GPIO_Pin, GPIO_PIN_RESET);

	if (this->last_button == false && button->is_pressed(button) == true)
	{
		this->operate = turn_off_led;
	}

	this->last_button = button->is_pressed(button);
}

static void turn_off_led(Led* this, Button* button)
{
	HAL_GPIO_WritePin(this->GPIOx, this->GPIO_Pin, GPIO_PIN_SET);

	if (this->last_button == false && button->is_pressed(button) == true)
	{
		this->operate = turn_on_led;
	}

	this->last_button = button->is_pressed(button);
}


Led* get_left_red(void)
{
	return &left_red;
}

Led* get_left_green(void)
{
	return &left_green;
}

Led* get_left_blue(void)
{
	return &left_blue;
}




#endif /* SRC_C_ */
